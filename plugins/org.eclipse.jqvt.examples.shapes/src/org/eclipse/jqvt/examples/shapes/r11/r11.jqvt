package org.eclipse.jqvt.examples.shapes.r11;
--NO GOOD EXAMPLE FOR JQVT AS ERROR MESSAGE APPEARS WHEN STARTING TRANSFROMATION "Cannot handle top relations with more than one source domains"

-- The magic of this solution is relation ExistsAlsoInOtherModel, which tells for each element of the "source" domain, if there is an element in "source2" with the same name.
transformation r11(source : Shapes, source2 : Shapes, target : Shapes) {
	
	top relation ArrowSource2ArrowSource {
		
		enforce domain source sourceArrow : Shapes::Arrow {
			source = sourceArrowSource : Shapes::Shape {
			}
		};
		
		enforce domain target targetArrow : Shapes::Arrow {
			source = targetArrowSource : Shapes::Shape {
			}
		};
		
		when {
			Source2Target(sourceArrow, targetArrow);
			Source2Target(sourceArrowSource, targetArrowSource);
		}
		
	}
	
	top relation ArrowTarget2ArrowTarget {
		
		enforce domain source sourceArrow : Shapes::Arrow {
			target = sourceArrowTarget : Shapes::Shape {
			}
		};
		
		enforce domain target targetArrow : Shapes::Arrow {
			target = targetArrowTarget : Shapes::Shape {
			}
		};
		
		when {
			Source2Target(sourceArrow, targetArrow);
			Source2Target(sourceArrowTarget, targetArrowTarget);
		}
		
	}
	
	top relation ModelElementName2ModelElementName {
		
		varName : String;
		
		enforce domain source sourceModelElement : Shapes::ModelElement {
			name = varName
		};
		
		enforce domain target targetModelElement : Shapes::ModelElement {
			name = varName
		};
		
		when {
			Source2Target(sourceModelElement, targetModelElement);
		}
		
	}
	
	top relation ModelElementblock2ModelElementblock {
		
		enforce domain source sourceModelElement : Shapes::ModelElement {
			block = sourceblock : Shapes::Block {
			}
		};
		
		enforce domain target targetModelElement : Shapes::ModelElement {
			block = targetblock : Shapes::Block {
			}
		};
		
		when {
			Source2Target(sourceModelElement, targetModelElement);
			Source2Target(sourceblock, targetblock);
		}
		
	}
	
	top relation Source2Target {
		
		enforce domain source s : Shapes::ModelElement {
		};
		
		enforce domain target t : Shapes::ModelElement {
		};
		
		when {
			MapBlock(s, t) || MapRootBlock(s, t) || MapCircle(s, t) || MapTriangle(s, t) || MapSquare(s, t) || MapArrow(s, t);
		}
		
	}
	
	top relation MapRootBlock {
		
		enforce domain source s : Shapes::RootBlock {
		};
		
		enforce domain target t : Shapes::RootBlock {
		};
		
		when {
			ExistsAlsoInOtherModel(s);
		}
		
	}
	
	top relation MapBlock {
		
		enforce domain source s : Shapes::Block {
		};
		
		enforce domain target t : Shapes::Block {
		};
		
		when {
			ExistsAlsoInOtherModel(s);
			!MapRootBlock(s, t);
		}
		
	}
	
	top relation MapCircle {
		
		enforce domain source s : Shapes::Circle {
		};
		
		enforce domain target t : Shapes::Circle {
		};
		
		when {
			ExistsAlsoInOtherModel(s);
		}
		
	}
	
	top relation MapTriangle {
		
		enforce domain source s : Shapes::Triangle {
		};
		
		enforce domain target t : Shapes::Triangle {
		};
		
		when {
			ExistsAlsoInOtherModel(s);
		}
		
	}
	
	top relation MapSquare {
		
		enforce domain source s : Shapes::Square {
		};
		
		enforce domain target t : Shapes::Square {
		};
		
		when {
			ExistsAlsoInOtherModel(s);
		}
		
	}
	
	top relation MapArrow {
		
		enforce domain source s : Shapes::Arrow {
		};
		
		enforce domain target t : Shapes::Arrow {
		};
		
		when {
			ExistsAlsoInOtherModel(s);
		}
		
	}
	
	
	top relation EqualityRelation {
	
		varName : String;
		
		enforce domain source s : Shapes::ModelElement {
			name = varName
		};
		
		enforce domain source2 s2 : Shapes::ModelElement {
			name = varName
		};
				
		where {
			ExistsAlsoInOtherModel(s);
		}
		
	}
	
	
	relation ExistsAlsoInOtherModel {
		
		enforce domain source s : Shapes::ModelElement { };
		
	}
	
	
}
