<%@ jet package="au.com.smartservicescrc.raas.codegen.jaxb.jet" class="MixedImplAdapter_Generator" skeleton="jaxb.skeleton" %>
package <%=genClass.getGenPackage().getQualifiedPackageName()%>.jaxb;

<%genClass.getGenModel().markImportLocation(stringBuffer, genClass.getGenPackage());%>
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import javax.xml.bind.annotation.adapters.XmlAdapter;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.emf.ecore.xmi.impl.XMLHelperImpl;
public class <%=genClass.getInterfaceName()%>ImplAdapter extends XmlAdapter<String, <%=genClass.getImportedInterfaceName()%>> {

	@Override
	public <%=genClass.getImportedInterfaceName()%> unmarshal(String v) throws Exception {
		ResourceSet resourceSet = new ResourceSetImpl();
		resourceSet.getLoadOptions().put(XMLResource.OPTION_EXTENDED_META_DATA, true);
		resourceSet.getLoadOptions().put(XMLResource.OPTION_USE_ENCODED_ATTRIBUTE_STYLE, true);
		Resource res = resourceSet.createResource(URI.createFileURI("/fakepath/file.xml"));
		InputStream is = new ByteArrayInputStream(v.getBytes("UTF8"));
		res.load(is, resourceSet.getLoadOptions());
		TreeIterator<EObject> it = res.getAllContents();
		while (it.hasNext()) {
			EObject o = it.next();
			if (o instanceof <%=genClass.getImportedInterfaceName()%>) {
				return (<%=genClass.getImportedInterfaceName()%>) o;
			}
		}
		return null;
	}

	@Override
	public String marshal(<%=genClass.getImportedInterfaceName()%> v) throws Exception {
		ResourceSet resourceSet = new ResourceSetImpl();
		resourceSet.getLoadOptions().put(XMLResource.OPTION_ROOT_OBJECTS, Arrays.asList(v));
		resourceSet.getLoadOptions().put(XMLResource.OPTION_EXTENDED_META_DATA, true);
		resourceSet.getLoadOptions().put(XMLResource.OPTION_DECLARE_XML, false);
		resourceSet.getLoadOptions().put(Resource.OPTION_LINE_DELIMITER, "\n");
		Resource res = resourceSet.createResource(URI.createFileURI("/fakepath/file.xml"));
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		res.save(os, resourceSet.getLoadOptions());
		return os.toString("UTF8");
	}

}

<%genClass.getGenModel().emitSortedImports();%>