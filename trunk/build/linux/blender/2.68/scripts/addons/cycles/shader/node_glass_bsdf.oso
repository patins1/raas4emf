OpenShadingLanguage 1.00
# Compiled by oslc 1.3.2
shader node_glass_bsdf
param	color	Color	0.80000001 0.80000001 0.80000001 		 %read{42,60} %write{2147483647,-1}
param	string	distribution	"Sharp" 		 %read{34,52} %write{2147483647,-1}
param	float	Roughness	0.2 		 %read{45,56} %write{2147483647,-1}
param	float	IOR	1.45 		 %read{2,2} %write{2147483647,-1}
param	normal	Normal	0 0 0 		 %read{7,56} %write{0,0}
oparam	closure color	BSDF			 %read{2147483647,-1} %write{42,60}
global	vector	I	 %read{7,7} %write{2147483647,-1}
global	normal	N	 %read{0,0} %write{2147483647,-1}
local	float	___606_c	 %read{12,24} %write{9,9}
local	float	___606_g	 %read{14,23} %write{13,16}
local	float	___606_result	 %read{33,33} %write{31,32}
local	float	___607_A	 %read{27,28} %write{19,19}
local	float	___607_B	 %read{29,29} %write{26,26}
local	float	f	 %read{5,6} %write{2,2}
local	float	eta	 %read{10,56} %write{5,6}
local	float	cosi	 %read{9,9} %write{7,7}
local	float	Fr	 %read{37,57} %write{33,33}
const	float	$const1	1		 %read{1,57} %write{2147483647,-1}
const	float	$const2	9.9999997e-06		 %read{1,1} %write{2147483647,-1}
temp	float	$tmp1	 %read{2,2} %write{1,1}
temp	int	$tmp2	 %read{4,4} %write{3,3}
const	string	$const3	"fresnel_dielectric_cos"		 %read{8,8} %write{2147483647,-1}
temp	float	$tmp3	 %read{11,11} %write{10,10}
temp	float	$tmp4	 %read{13,13} %write{11,11}
temp	float	$tmp5	 %read{13,13} %write{12,12}
const	int	$const5	0		 %read{14,14} %write{2147483647,-1}
temp	int	$tmp6	 %read{15,15} %write{14,14}
temp	float	$tmp7	 %read{19,19} %write{17,17}
temp	float	$tmp8	 %read{19,19} %write{18,18}
temp	float	$tmp9	 %read{21,21} %write{20,20}
temp	float	$tmp10	 %read{22,22} %write{21,21}
temp	float	$tmp11	 %read{26,26} %write{22,22}
temp	float	$tmp12	 %read{24,24} %write{23,23}
temp	float	$tmp13	 %read{25,25} %write{24,24}
temp	float	$tmp14	 %read{26,26} %write{25,25}
const	float	$const6	0.5		 %read{27,27} %write{2147483647,-1}
temp	float	$tmp15	 %read{28,28} %write{27,27}
temp	float	$tmp16	 %read{31,31} %write{28,28}
temp	float	$tmp17	 %read{30,30} %write{29,29}
temp	float	$tmp18	 %read{31,31} %write{30,30}
const	string	$const7	"Sharp"		 %read{34,34} %write{2147483647,-1}
temp	int	$tmp19	 %read{35,35} %write{34,34}
temp	closure color	$tmp20	 %read{37,37} %write{36,36}
const	string	$const8	"reflection"		 %read{36,36} %write{2147483647,-1}
temp	closure color	$tmp21	 %read{41,41} %write{37,37}
temp	closure color	$tmp22	 %read{40,40} %write{38,38}
const	string	$const9	"refraction"		 %read{38,38} %write{2147483647,-1}
temp	float	$tmp23	 %read{40,40} %write{39,39}
temp	closure color	$tmp24	 %read{41,41} %write{40,40}
temp	closure color	$tmp25	 %read{42,42} %write{41,41}
const	string	$const10	"Beckmann"		 %read{43,43} %write{2147483647,-1}
temp	int	$tmp26	 %read{44,44} %write{43,43}
temp	closure color	$tmp27	 %read{46,46} %write{45,45}
const	string	$const11	"microfacet_beckmann"		 %read{45,45} %write{2147483647,-1}
temp	closure color	$tmp28	 %read{50,50} %write{46,46}
temp	closure color	$tmp29	 %read{49,49} %write{47,47}
const	string	$const12	"microfacet_beckmann_refraction"		 %read{47,47} %write{2147483647,-1}
temp	float	$tmp30	 %read{49,49} %write{48,48}
temp	closure color	$tmp31	 %read{50,50} %write{49,49}
temp	closure color	$tmp32	 %read{51,51} %write{50,50}
const	string	$const13	"GGX"		 %read{52,52} %write{2147483647,-1}
temp	int	$tmp33	 %read{53,53} %write{52,52}
temp	closure color	$tmp34	 %read{55,55} %write{54,54}
const	string	$const14	"microfacet_ggx"		 %read{54,54} %write{2147483647,-1}
temp	closure color	$tmp35	 %read{59,59} %write{55,55}
temp	closure color	$tmp36	 %read{58,58} %write{56,56}
const	string	$const15	"microfacet_ggx_refraction"		 %read{56,56} %write{2147483647,-1}
temp	float	$tmp37	 %read{58,58} %write{57,57}
temp	closure color	$tmp38	 %read{59,59} %write{58,58}
temp	closure color	$tmp39	 %read{60,60} %write{59,59}
code Normal
# intern/cycles/kernel/shaders/node_glass_bsdf.osl:27
# 	normal Normal = N,
	assign		Normal N 	%filename{"intern/cycles/kernel/shaders/node_glass_bsdf.osl"} %line{27} %argrw{"wr"}
code ___main___
# intern/cycles/kernel/shaders/node_glass_bsdf.osl:30
# 	float f = max(IOR, 1.0 + 1e-5);
	add		$tmp1 $const1 $const2 	%filename{"intern/cycles/kernel/shaders/node_glass_bsdf.osl"} %line{30} %argrw{"wrr"}
	max		f IOR $tmp1 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_glass_bsdf.osl:31
# 	float eta = backfacing() ? 1.0 / f: f;
	backfacing	$tmp2 	%line{31} %argrw{"w"}
	if		$tmp2 6 7 	%argrw{"r"}
	div		eta $const1 f 	%argrw{"wrr"}
	assign		eta f 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_glass_bsdf.osl:32
# 	float cosi = dot(I, Normal);
	dot		cosi I Normal 	%line{32} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_glass_bsdf.osl:33
# 	float Fr = fresnel_dielectric_cos(cosi, eta);
	functioncall	$const3 34 	%line{33} %argrw{"r"}
# intern/cycles/kernel/shaders/node_fresnel.h:21
# 	float c = fabs(cosi);
	fabs		___606_c cosi 	%filename{"intern/cycles/kernel/shaders/node_fresnel.h"} %line{21} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_fresnel.h:22
# 	float g = eta * eta - 1 + c * c;
	mul		$tmp3 eta eta 	%line{22} %argrw{"wrr"}
	sub		$tmp4 $tmp3 $const1 	%argrw{"wrr"}
	mul		$tmp5 ___606_c ___606_c 	%argrw{"wrr"}
	add		___606_g $tmp4 $tmp5 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_fresnel.h:25
# 	if (g > 0) {
	gt		$tmp6 ___606_g $const5 	%line{25} %argrw{"wrr"}
	if		$tmp6 32 33 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_fresnel.h:26
# 		g = sqrt(g);
	sqrt		___606_g ___606_g 	%line{26} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_fresnel.h:27
# 		float A = (g - c) / (g + c);
	sub		$tmp7 ___606_g ___606_c 	%line{27} %argrw{"wrr"}
	add		$tmp8 ___606_g ___606_c 	%argrw{"wrr"}
	div		___607_A $tmp7 $tmp8 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_fresnel.h:28
# 		float B = (c * (g + c) - 1) / (c * (g - c) + 1);
	add		$tmp9 ___606_g ___606_c 	%line{28} %argrw{"wrr"}
	mul		$tmp10 ___606_c $tmp9 	%argrw{"wrr"}
	sub		$tmp11 $tmp10 $const1 	%argrw{"wrr"}
	sub		$tmp12 ___606_g ___606_c 	%argrw{"wrr"}
	mul		$tmp13 ___606_c $tmp12 	%argrw{"wrr"}
	add		$tmp14 $tmp13 $const1 	%argrw{"wrr"}
	div		___607_B $tmp11 $tmp14 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_fresnel.h:29
# 		result = 0.5 * A * A * (1 + B * B);
	mul		$tmp15 $const6 ___607_A 	%line{29} %argrw{"wrr"}
	mul		$tmp16 $tmp15 ___607_A 	%argrw{"wrr"}
	mul		$tmp17 ___607_B ___607_B 	%argrw{"wrr"}
	add		$tmp18 $const1 $tmp17 	%argrw{"wrr"}
	mul		___606_result $tmp16 $tmp18 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_fresnel.h:32
# 		result = 1.0;  /* TIR (no refracted component) */
	assign		___606_result $const1 	%line{32} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_fresnel.h:34
# 	return result;
	assign		Fr ___606_result 	%line{34} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_glass_bsdf.osl:35
# /*
	eq		$tmp19 distribution $const7 	%filename{"intern/cycles/kernel/shaders/node_glass_bsdf.osl"} %line{35} %argrw{"wrr"}
	if		$tmp19 43 61 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_glass_bsdf.osl:36
#  * Copyright 2011, Blender Foundation.
	closure		$tmp20 $const8 Normal 	%line{36} %argrw{"wrr"}
	mul		$tmp21 $tmp20 Fr 	%argrw{"wrr"}
	closure		$tmp22 $const9 Normal eta 	%argrw{"wrrr"}
	sub		$tmp23 $const1 Fr 	%argrw{"wrr"}
	mul		$tmp24 $tmp22 $tmp23 	%argrw{"wrr"}
	add		$tmp25 $tmp21 $tmp24 	%argrw{"wrr"}
	mul		BSDF $tmp25 Color 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_glass_bsdf.osl:37
#  *
	eq		$tmp26 distribution $const10 	%line{37} %argrw{"wrr"}
	if		$tmp26 52 61 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_glass_bsdf.osl:38
#  * This program is free software; you can redistribute it and/or
	closure		$tmp27 $const11 Normal Roughness 	%line{38} %argrw{"wrrr"}
	mul		$tmp28 $tmp27 Fr 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_glass_bsdf.osl:39
#  * modify it under the terms of the GNU General Public License
	closure		$tmp29 $const12 Normal Roughness eta 	%line{39} %argrw{"wrrrr"}
	sub		$tmp30 $const1 Fr 	%argrw{"wrr"}
	mul		$tmp31 $tmp29 $tmp30 	%argrw{"wrr"}
	add		$tmp32 $tmp28 $tmp31 	%argrw{"wrr"}
	mul		BSDF $tmp32 Color 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_glass_bsdf.osl:40
#  * as published by the Free Software Foundation; either version 2
	eq		$tmp33 distribution $const13 	%line{40} %argrw{"wrr"}
	if		$tmp33 61 61 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_glass_bsdf.osl:41
#  * of the License, or (at your option) any later version.
	closure		$tmp34 $const14 Normal Roughness 	%line{41} %argrw{"wrrr"}
	mul		$tmp35 $tmp34 Fr 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_glass_bsdf.osl:42
#  *
	closure		$tmp36 $const15 Normal Roughness eta 	%line{42} %argrw{"wrrrr"}
	sub		$tmp37 $const1 Fr 	%argrw{"wrr"}
	mul		$tmp38 $tmp36 $tmp37 	%argrw{"wrr"}
	add		$tmp39 $tmp35 $tmp38 	%argrw{"wrr"}
	mul		BSDF $tmp39 Color 	%argrw{"wrr"}
	end
