OpenShadingLanguage 1.00
# Compiled by oslc 1.3.2
shader node_wave_texture
param	int	use_mapping	0 		 %read{2,2} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		 %read{3,3} %write{2147483647,-1}
param	string	Type	"Bands" 		 %read{12,17} %write{2147483647,-1}
param	float	Scale	5 		 %read{6,10} %write{2147483647,-1}
param	float	Distortion	0 		 %read{26,2318} %write{2147483647,-1}
param	float	Detail	2 		 %read{34,34} %write{2147483647,-1}
param	float	DetailScale	1 		 %read{28,28} %write{2147483647,-1}
param	point	Vector	0 0 0 		 %read{1,1} %write{0,0}
oparam	float	Fac	0 		 %read{2356,2356} %write{2325,2355}
oparam	color	Color	0 0 0 		 %read{2147483647,-1} %write{2356,2356}
global	point	P	 %read{0,0} %write{2147483647,-1}
local	float	___607_r	 %read{37,2262} %write{37,2262}
local	float	___607_g	 %read{37,2262} %write{37,2262}
local	float	___607_b	 %read{37,2262} %write{37,2262}
local	int	___608_xx	 %read{37,2262} %write{37,2262}
local	int	___608_yy	 %read{37,2262} %write{37,2262}
local	int	___608_zz	 %read{37,2262} %write{37,2262}
local	int	___608_xi	 %read{37,2108} %write{37,2095}
local	int	___608_yi	 %read{37,2112} %write{37,2098}
local	int	___608_zi	 %read{37,2116} %write{37,2101}
local	point	___614_ip	 %read{37,2262} %write{37,2262}
local	point	___614_vp	 %read{37,2262} %write{37,2262}
local	point	___614_pd	 %read{37,2262} %write{37,2262}
local	float	___614_d	 %read{37,2262} %write{37,2262}
local	float[4]	___619_da	 %read{37,1900} %write{37,1899}
local	point[4]	___619_pa	 %read{37,1899} %write{37,1899}
local	float[4]	___620_da	 %read{37,2264} %write{37,2262}
local	point[4]	___620_pa	 %read{37,2262} %write{37,2262}
local	float	___626_t	 %read{37,2270} %write{37,2266}
local	float	___633_f	 %read{37,1182} %write{37,1176}
local	float	___638_b	 %read{2330,2338} %write{2329,2329}
local	int	___638_n	 %read{2332,2332} %write{2331,2331}
local	float	___639_b	 %read{2344,2348} %write{2342,2342}
local	float	___639_rmax	 %read{2353,2353} %write{2343,2343}
local	float	___640_fscale	 %read{37,1167} %write{30,1162}
local	float	___640_amp	 %read{37,2284} %write{31,1162}
local	float	___640_sum	 %read{37,2316} %write{32,2315}
local	int	___640_i	 %read{37,1162} %write{37,1162}
local	int	___640_n	 %read{39,2310} %write{36,36}
local	float	___640_octaves	 %read{36,1164} %write{35,35}
local	float	___642_t	 %read{37,1162} %write{37,1162}
local	float	___640_rmd	 %read{1165,2305} %write{1164,1164}
local	float	___643_t	 %read{1203,2284} %write{1180,2283}
local	float	___643_sum2	 %read{2302,2305} %write{2285,2302}
local	float	___646_x	 %read{14,19} %write{6,6}
local	float	___646_y	 %read{14,20} %write{8,8}
local	float	___646_z	 %read{15,22} %write{10,10}
local	float	___646_n	 %read{37,2349} %write{11,2337}
local	point	p	 %read{3,28} %write{1,3}
const	string	$const1	"wave"		 %read{4,4} %write{2147483647,-1}
const	int	$const2	0		 %read{5,2335} %write{2147483647,-1}
temp	float	$tmp1	 %read{6,6} %write{5,5}
const	int	$const3	1		 %read{7,2312} %write{2147483647,-1}
temp	float	$tmp2	 %read{8,8} %write{7,7}
const	int	$const4	2		 %read{9,2297} %write{2147483647,-1}
temp	float	$tmp3	 %read{10,10} %write{9,9}
const	float	$const5	0		 %read{11,2355} %write{2147483647,-1}
const	string	$const6	"Bands"		 %read{12,12} %write{2147483647,-1}
temp	int	$tmp4	 %read{13,13} %write{12,12}
temp	float	$tmp5	 %read{15,15} %write{14,14}
temp	float	$tmp6	 %read{16,16} %write{15,15}
const	float	$const7	10		 %read{16,2266} %write{2147483647,-1}
const	string	$const8	"Rings"		 %read{17,17} %write{2147483647,-1}
temp	int	$tmp7	 %read{18,18} %write{17,17}
temp	float	$tmp8	 %read{25,25} %write{24,24}
temp	float	$tmp9	 %read{21,21} %write{19,19}
temp	float	$tmp10	 %read{21,21} %write{20,20}
temp	float	$tmp11	 %read{23,23} %write{21,21}
temp	float	$tmp12	 %read{23,23} %write{22,22}
temp	float	$tmp13	 %read{24,24} %write{23,23}
const	float	$const9	20		 %read{25,25} %write{2147483647,-1}
temp	int	$tmp14	 %read{27,27} %write{26,26}
temp	float	$tmp15	 %read{2318,2318} %write{2306,2316}
temp	point	$tmp16	 %read{37,1167} %write{28,1162}
const	string	$const10	"Perlin"		 %read{42,2275} %write{2147483647,-1}
const	string	$const11	"noise_turbulence"		 %read{29,29} %write{2147483647,-1}
const	float	$const12	1		 %read{30,2348} %write{2147483647,-1}
const	float	$const13	16		 %read{34,34} %write{2147483647,-1}
const	string	$const14	"clamp"		 %read{33,33} %write{2147483647,-1}
temp	float	$tmp17	 %read{35,35} %write{34,34}
temp	int	$tmp18	 %read{37,1162} %write{37,1162}
temp	point	$tmp19	 %read{48,1150} %write{40,1135}
const	string	$const15	"noise_basis"		 %read{41,1168} %write{2147483647,-1}
temp	int	$tmp20	 %read{43,43} %write{42,42}
const	string	$const16	"safe_noise"		 %read{44,1171} %write{2147483647,-1}
temp	int	$tmp21	 %read{47,47} %write{46,46}
const	string	$const17	"perlin"		 %read{48,1175} %write{2147483647,-1}
temp	int	$tmp22	 %read{51,51} %write{50,50}
temp	int	$tmp23	 %read{52,52} %write{51,51}
const	float	$const18	0.5		 %read{53,2346} %write{2147483647,-1}
const	string	$const19	"Voronoi F1"		 %read{57,1184} %write{2147483647,-1}
temp	int	$tmp24	 %read{58,58} %write{57,57}
const	string	$const20	"voronoi_F1S"		 %read{59,1186} %write{2147483647,-1}
const	float	$const21	2		 %read{234,2352} %write{2147483647,-1}
temp	float	$tmp25	 %read{234,234} %write{233,233}
const	string	$const22	"voronoi_F1"		 %read{60,1187} %write{2147483647,-1}
const	string	$const23	"voronoi_Fn"		 %read{61,1728} %write{2147483647,-1}
const	string	$const24	"Distance Squared"		 %read{109,2191} %write{2147483647,-1}
const	string	$const25	"voronoi"		 %read{62,2092} %write{2147483647,-1}
temp	float	$tmp26	 %read{65,65} %write{64,64}
temp	float	$tmp27	 %read{64,64} %write{63,63}
temp	float	$tmp28	 %read{68,68} %write{67,67}
temp	float	$tmp29	 %read{67,67} %write{66,66}
temp	float	$tmp30	 %read{71,71} %write{70,70}
temp	float	$tmp31	 %read{70,70} %write{69,69}
const	float	$const26	1e+10		 %read{72,2105} %write{2147483647,-1}
const	int	$const27	3		 %read{75,2256} %write{2147483647,-1}
temp	int	$tmp32	 %read{79,79} %write{78,78}
temp	int	$tmp33	 %read{76,232} %write{76,232}
temp	int	$tmp34	 %read{83,83} %write{82,82}
temp	int	$tmp35	 %read{80,230} %write{80,230}
temp	int	$tmp36	 %read{87,87} %write{86,86}
temp	int	$tmp37	 %read{84,228} %write{84,228}
temp	float	$tmp38	 %read{91,91} %write{88,88}
temp	float	$tmp39	 %read{91,91} %write{89,89}
temp	float	$tmp40	 %read{91,91} %write{90,90}
temp	color	$tmp41	 %read{105,105} %write{104,104}
const	string	$const28	"cellnoise_color"		 %read{92,2122} %write{2147483647,-1}
temp	point	$tmp42	 %read{98,98} %write{97,97}
temp	float	$tmp43	 %read{97,97} %write{94,94}
temp	float	$tmp44	 %read{97,97} %write{95,95}
temp	float	$tmp45	 %read{97,97} %write{96,96}
temp	point	$tmp46	 %read{103,103} %write{102,102}
temp	float	$tmp47	 %read{102,102} %write{99,99}
temp	float	$tmp48	 %read{102,102} %write{100,100}
temp	float	$tmp49	 %read{102,102} %write{101,101}
temp	point	$tmp50	 %read{107,107} %write{106,106}
const	string	$const29	"voronoi_distance"		 %read{108,2138} %write{2147483647,-1}
temp	int	$tmp51	 %read{110,110} %write{109,109}
const	string	$const30	"Actual Distance"		 %read{113,2143} %write{2147483647,-1}
temp	int	$tmp52	 %read{114,114} %write{113,113}
const	string	$const31	"Manhattan"		 %read{117,2147} %write{2147483647,-1}
temp	int	$tmp53	 %read{118,118} %write{117,117}
temp	float	$tmp54	 %read{123,123} %write{120,120}
temp	float	$tmp55	 %read{120,120} %write{119,119}
temp	float	$tmp56	 %read{123,123} %write{122,122}
temp	float	$tmp57	 %read{122,122} %write{121,121}
temp	float	$tmp58	 %read{126,126} %write{123,123}
temp	float	$tmp59	 %read{126,126} %write{125,125}
temp	float	$tmp60	 %read{125,125} %write{124,124}
const	string	$const32	"Chebychev"		 %read{128,2158} %write{2147483647,-1}
temp	int	$tmp61	 %read{129,129} %write{128,128}
temp	float	$tmp62	 %read{137,137} %write{131,131}
temp	float	$tmp63	 %read{131,131} %write{130,130}
temp	float	$tmp64	 %read{137,137} %write{136,136}
temp	float	$tmp65	 %read{136,136} %write{133,133}
temp	float	$tmp66	 %read{133,133} %write{132,132}
temp	float	$tmp67	 %read{136,136} %write{135,135}
temp	float	$tmp68	 %read{135,135} %write{134,134}
const	string	$const33	"Minkovsky 1/2"		 %read{139,2169} %write{2147483647,-1}
temp	int	$tmp69	 %read{140,140} %write{139,139}
temp	float	$tmp70	 %read{147,147} %write{143,143}
temp	float	$tmp71	 %read{143,143} %write{142,142}
temp	float	$tmp72	 %read{142,142} %write{141,141}
temp	float	$tmp73	 %read{147,147} %write{146,146}
temp	float	$tmp74	 %read{146,146} %write{145,145}
temp	float	$tmp75	 %read{145,145} %write{144,144}
temp	float	$tmp76	 %read{151,151} %write{147,147}
temp	float	$tmp77	 %read{151,151} %write{150,150}
temp	float	$tmp78	 %read{150,150} %write{149,149}
temp	float	$tmp79	 %read{149,149} %write{148,148}
const	string	$const34	"Minkovsky 4"		 %read{153,2183} %write{2147483647,-1}
temp	int	$tmp80	 %read{154,154} %write{153,153}
temp	float	$tmp81	 %read{159,159} %write{158,158}
temp	float	$tmp82	 %read{158,158} %write{157,157}
temp	vector	$tmp83	 %read{157,157} %write{155,155}
temp	vector	$tmp84	 %read{157,157} %write{156,156}
const	string	$const35	"Minkovsky"		 %read{161,2191} %write{2147483647,-1}
temp	int	$tmp85	 %read{162,162} %write{161,161}
temp	float	$tmp86	 %read{169,169} %write{165,165}
temp	float	$tmp87	 %read{165,165} %write{164,164}
temp	float	$tmp88	 %read{164,164} %write{163,163}
temp	float	$tmp89	 %read{169,169} %write{168,168}
temp	float	$tmp90	 %read{168,168} %write{167,167}
temp	float	$tmp91	 %read{167,167} %write{166,166}
temp	float	$tmp92	 %read{173,173} %write{169,169}
temp	float	$tmp93	 %read{173,173} %write{172,172}
temp	float	$tmp94	 %read{172,172} %write{171,171}
temp	float	$tmp95	 %read{171,171} %write{170,170}
temp	float	$tmp96	 %read{175,175} %write{173,173}
temp	float	$tmp97	 %read{175,175} %write{174,174}
temp	point	$tmp98	 %read{182,182} %write{181,181}
temp	float	$tmp99	 %read{181,181} %write{178,178}
temp	float	$tmp100	 %read{181,181} %write{179,179}
temp	float	$tmp101	 %read{181,181} %write{180,180}
temp	float	$tmp102	 %read{184,184} %write{183,183}
temp	int	$tmp103	 %read{185,185} %write{184,184}
temp	float	$tmp104	 %read{187,187} %write{186,186}
temp	float	$tmp105	 %read{189,189} %write{188,188}
temp	float	$tmp106	 %read{191,191} %write{190,190}
temp	point	$tmp107	 %read{194,194} %write{193,193}
temp	point	$tmp108	 %read{196,196} %write{195,195}
temp	point	$tmp109	 %read{198,198} %write{197,197}
temp	float	$tmp110	 %read{201,201} %write{200,200}
temp	int	$tmp111	 %read{202,202} %write{201,201}
temp	float	$tmp112	 %read{204,204} %write{203,203}
temp	float	$tmp113	 %read{206,206} %write{205,205}
temp	point	$tmp114	 %read{209,209} %write{208,208}
temp	point	$tmp115	 %read{211,211} %write{210,210}
temp	float	$tmp116	 %read{214,214} %write{213,213}
temp	int	$tmp117	 %read{215,215} %write{214,214}
temp	float	$tmp118	 %read{217,217} %write{216,216}
temp	point	$tmp119	 %read{220,220} %write{219,219}
temp	float	$tmp120	 %read{223,223} %write{222,222}
temp	int	$tmp121	 %read{224,224} %write{223,223}
temp	int	$tmp122	 %read{2147483647,-1} %write{227,227}
temp	int	$tmp123	 %read{2147483647,-1} %write{229,229}
temp	int	$tmp124	 %read{2147483647,-1} %write{231,231}
temp	float	$tmp125	 %read{235,235} %write{234,234}
const	string	$const36	"Voronoi F2"		 %read{237,1364} %write{2147483647,-1}
temp	int	$tmp126	 %read{238,238} %write{237,237}
const	string	$const37	"voronoi_F2S"		 %read{239,1366} %write{2147483647,-1}
temp	float	$tmp127	 %read{414,414} %write{413,413}
const	string	$const38	"voronoi_F2"		 %read{240,1367} %write{2147483647,-1}
temp	float	$tmp128	 %read{245,245} %write{244,244}
temp	float	$tmp129	 %read{244,244} %write{243,243}
temp	float	$tmp130	 %read{248,248} %write{247,247}
temp	float	$tmp131	 %read{247,247} %write{246,246}
temp	float	$tmp132	 %read{251,251} %write{250,250}
temp	float	$tmp133	 %read{250,250} %write{249,249}
temp	int	$tmp134	 %read{259,259} %write{258,258}
temp	int	$tmp135	 %read{256,412} %write{256,412}
temp	int	$tmp136	 %read{263,263} %write{262,262}
temp	int	$tmp137	 %read{260,410} %write{260,410}
temp	int	$tmp138	 %read{267,267} %write{266,266}
temp	int	$tmp139	 %read{264,408} %write{264,408}
temp	float	$tmp140	 %read{271,271} %write{268,268}
temp	float	$tmp141	 %read{271,271} %write{269,269}
temp	float	$tmp142	 %read{271,271} %write{270,270}
temp	color	$tmp143	 %read{285,285} %write{284,284}
temp	point	$tmp144	 %read{278,278} %write{277,277}
temp	float	$tmp145	 %read{277,277} %write{274,274}
temp	float	$tmp146	 %read{277,277} %write{275,275}
temp	float	$tmp147	 %read{277,277} %write{276,276}
temp	point	$tmp148	 %read{283,283} %write{282,282}
temp	float	$tmp149	 %read{282,282} %write{279,279}
temp	float	$tmp150	 %read{282,282} %write{280,280}
temp	float	$tmp151	 %read{282,282} %write{281,281}
temp	point	$tmp152	 %read{287,287} %write{286,286}
temp	int	$tmp153	 %read{290,290} %write{289,289}
temp	int	$tmp154	 %read{294,294} %write{293,293}
temp	int	$tmp155	 %read{298,298} %write{297,297}
temp	float	$tmp156	 %read{303,303} %write{300,300}
temp	float	$tmp157	 %read{300,300} %write{299,299}
temp	float	$tmp158	 %read{303,303} %write{302,302}
temp	float	$tmp159	 %read{302,302} %write{301,301}
temp	float	$tmp160	 %read{306,306} %write{303,303}
temp	float	$tmp161	 %read{306,306} %write{305,305}
temp	float	$tmp162	 %read{305,305} %write{304,304}
temp	int	$tmp163	 %read{309,309} %write{308,308}
temp	float	$tmp164	 %read{317,317} %write{311,311}
temp	float	$tmp165	 %read{311,311} %write{310,310}
temp	float	$tmp166	 %read{317,317} %write{316,316}
temp	float	$tmp167	 %read{316,316} %write{313,313}
temp	float	$tmp168	 %read{313,313} %write{312,312}
temp	float	$tmp169	 %read{316,316} %write{315,315}
temp	float	$tmp170	 %read{315,315} %write{314,314}
temp	int	$tmp171	 %read{320,320} %write{319,319}
temp	float	$tmp172	 %read{327,327} %write{323,323}
temp	float	$tmp173	 %read{323,323} %write{322,322}
temp	float	$tmp174	 %read{322,322} %write{321,321}
temp	float	$tmp175	 %read{327,327} %write{326,326}
temp	float	$tmp176	 %read{326,326} %write{325,325}
temp	float	$tmp177	 %read{325,325} %write{324,324}
temp	float	$tmp178	 %read{331,331} %write{327,327}
temp	float	$tmp179	 %read{331,331} %write{330,330}
temp	float	$tmp180	 %read{330,330} %write{329,329}
temp	float	$tmp181	 %read{329,329} %write{328,328}
temp	int	$tmp182	 %read{334,334} %write{333,333}
temp	float	$tmp183	 %read{339,339} %write{338,338}
temp	float	$tmp184	 %read{338,338} %write{337,337}
temp	vector	$tmp185	 %read{337,337} %write{335,335}
temp	vector	$tmp186	 %read{337,337} %write{336,336}
temp	int	$tmp187	 %read{342,342} %write{341,341}
temp	float	$tmp188	 %read{349,349} %write{345,345}
temp	float	$tmp189	 %read{345,345} %write{344,344}
temp	float	$tmp190	 %read{344,344} %write{343,343}
temp	float	$tmp191	 %read{349,349} %write{348,348}
temp	float	$tmp192	 %read{348,348} %write{347,347}
temp	float	$tmp193	 %read{347,347} %write{346,346}
temp	float	$tmp194	 %read{353,353} %write{349,349}
temp	float	$tmp195	 %read{353,353} %write{352,352}
temp	float	$tmp196	 %read{352,352} %write{351,351}
temp	float	$tmp197	 %read{351,351} %write{350,350}
temp	float	$tmp198	 %read{355,355} %write{353,353}
temp	float	$tmp199	 %read{355,355} %write{354,354}
temp	point	$tmp200	 %read{362,362} %write{361,361}
temp	float	$tmp201	 %read{361,361} %write{358,358}
temp	float	$tmp202	 %read{361,361} %write{359,359}
temp	float	$tmp203	 %read{361,361} %write{360,360}
temp	float	$tmp204	 %read{364,364} %write{363,363}
temp	int	$tmp205	 %read{365,365} %write{364,364}
temp	float	$tmp206	 %read{367,367} %write{366,366}
temp	float	$tmp207	 %read{369,369} %write{368,368}
temp	float	$tmp208	 %read{371,371} %write{370,370}
temp	point	$tmp209	 %read{374,374} %write{373,373}
temp	point	$tmp210	 %read{376,376} %write{375,375}
temp	point	$tmp211	 %read{378,378} %write{377,377}
temp	float	$tmp212	 %read{381,381} %write{380,380}
temp	int	$tmp213	 %read{382,382} %write{381,381}
temp	float	$tmp214	 %read{384,384} %write{383,383}
temp	float	$tmp215	 %read{386,386} %write{385,385}
temp	point	$tmp216	 %read{389,389} %write{388,388}
temp	point	$tmp217	 %read{391,391} %write{390,390}
temp	float	$tmp218	 %read{394,394} %write{393,393}
temp	int	$tmp219	 %read{395,395} %write{394,394}
temp	float	$tmp220	 %read{397,397} %write{396,396}
temp	point	$tmp221	 %read{400,400} %write{399,399}
temp	float	$tmp222	 %read{403,403} %write{402,402}
temp	int	$tmp223	 %read{404,404} %write{403,403}
temp	int	$tmp224	 %read{2147483647,-1} %write{407,407}
temp	int	$tmp225	 %read{2147483647,-1} %write{409,409}
temp	int	$tmp226	 %read{2147483647,-1} %write{411,411}
temp	float	$tmp227	 %read{415,415} %write{414,414}
const	string	$const39	"Voronoi F3"		 %read{417,1544} %write{2147483647,-1}
temp	int	$tmp228	 %read{418,418} %write{417,417}
const	string	$const40	"voronoi_F3S"		 %read{419,1546} %write{2147483647,-1}
temp	float	$tmp229	 %read{594,594} %write{593,593}
const	string	$const41	"voronoi_F3"		 %read{420,1547} %write{2147483647,-1}
temp	float	$tmp230	 %read{425,425} %write{424,424}
temp	float	$tmp231	 %read{424,424} %write{423,423}
temp	float	$tmp232	 %read{428,428} %write{427,427}
temp	float	$tmp233	 %read{427,427} %write{426,426}
temp	float	$tmp234	 %read{431,431} %write{430,430}
temp	float	$tmp235	 %read{430,430} %write{429,429}
temp	int	$tmp236	 %read{439,439} %write{438,438}
temp	int	$tmp237	 %read{436,592} %write{436,592}
temp	int	$tmp238	 %read{443,443} %write{442,442}
temp	int	$tmp239	 %read{440,590} %write{440,590}
temp	int	$tmp240	 %read{447,447} %write{446,446}
temp	int	$tmp241	 %read{444,588} %write{444,588}
temp	float	$tmp242	 %read{451,451} %write{448,448}
temp	float	$tmp243	 %read{451,451} %write{449,449}
temp	float	$tmp244	 %read{451,451} %write{450,450}
temp	color	$tmp245	 %read{465,465} %write{464,464}
temp	point	$tmp246	 %read{458,458} %write{457,457}
temp	float	$tmp247	 %read{457,457} %write{454,454}
temp	float	$tmp248	 %read{457,457} %write{455,455}
temp	float	$tmp249	 %read{457,457} %write{456,456}
temp	point	$tmp250	 %read{463,463} %write{462,462}
temp	float	$tmp251	 %read{462,462} %write{459,459}
temp	float	$tmp252	 %read{462,462} %write{460,460}
temp	float	$tmp253	 %read{462,462} %write{461,461}
temp	point	$tmp254	 %read{467,467} %write{466,466}
temp	int	$tmp255	 %read{470,470} %write{469,469}
temp	int	$tmp256	 %read{474,474} %write{473,473}
temp	int	$tmp257	 %read{478,478} %write{477,477}
temp	float	$tmp258	 %read{483,483} %write{480,480}
temp	float	$tmp259	 %read{480,480} %write{479,479}
temp	float	$tmp260	 %read{483,483} %write{482,482}
temp	float	$tmp261	 %read{482,482} %write{481,481}
temp	float	$tmp262	 %read{486,486} %write{483,483}
temp	float	$tmp263	 %read{486,486} %write{485,485}
temp	float	$tmp264	 %read{485,485} %write{484,484}
temp	int	$tmp265	 %read{489,489} %write{488,488}
temp	float	$tmp266	 %read{497,497} %write{491,491}
temp	float	$tmp267	 %read{491,491} %write{490,490}
temp	float	$tmp268	 %read{497,497} %write{496,496}
temp	float	$tmp269	 %read{496,496} %write{493,493}
temp	float	$tmp270	 %read{493,493} %write{492,492}
temp	float	$tmp271	 %read{496,496} %write{495,495}
temp	float	$tmp272	 %read{495,495} %write{494,494}
temp	int	$tmp273	 %read{500,500} %write{499,499}
temp	float	$tmp274	 %read{507,507} %write{503,503}
temp	float	$tmp275	 %read{503,503} %write{502,502}
temp	float	$tmp276	 %read{502,502} %write{501,501}
temp	float	$tmp277	 %read{507,507} %write{506,506}
temp	float	$tmp278	 %read{506,506} %write{505,505}
temp	float	$tmp279	 %read{505,505} %write{504,504}
temp	float	$tmp280	 %read{511,511} %write{507,507}
temp	float	$tmp281	 %read{511,511} %write{510,510}
temp	float	$tmp282	 %read{510,510} %write{509,509}
temp	float	$tmp283	 %read{509,509} %write{508,508}
temp	int	$tmp284	 %read{514,514} %write{513,513}
temp	float	$tmp285	 %read{519,519} %write{518,518}
temp	float	$tmp286	 %read{518,518} %write{517,517}
temp	vector	$tmp287	 %read{517,517} %write{515,515}
temp	vector	$tmp288	 %read{517,517} %write{516,516}
temp	int	$tmp289	 %read{522,522} %write{521,521}
temp	float	$tmp290	 %read{529,529} %write{525,525}
temp	float	$tmp291	 %read{525,525} %write{524,524}
temp	float	$tmp292	 %read{524,524} %write{523,523}
temp	float	$tmp293	 %read{529,529} %write{528,528}
temp	float	$tmp294	 %read{528,528} %write{527,527}
temp	float	$tmp295	 %read{527,527} %write{526,526}
temp	float	$tmp296	 %read{533,533} %write{529,529}
temp	float	$tmp297	 %read{533,533} %write{532,532}
temp	float	$tmp298	 %read{532,532} %write{531,531}
temp	float	$tmp299	 %read{531,531} %write{530,530}
temp	float	$tmp300	 %read{535,535} %write{533,533}
temp	float	$tmp301	 %read{535,535} %write{534,534}
temp	point	$tmp302	 %read{542,542} %write{541,541}
temp	float	$tmp303	 %read{541,541} %write{538,538}
temp	float	$tmp304	 %read{541,541} %write{539,539}
temp	float	$tmp305	 %read{541,541} %write{540,540}
temp	float	$tmp306	 %read{544,544} %write{543,543}
temp	int	$tmp307	 %read{545,545} %write{544,544}
temp	float	$tmp308	 %read{547,547} %write{546,546}
temp	float	$tmp309	 %read{549,549} %write{548,548}
temp	float	$tmp310	 %read{551,551} %write{550,550}
temp	point	$tmp311	 %read{554,554} %write{553,553}
temp	point	$tmp312	 %read{556,556} %write{555,555}
temp	point	$tmp313	 %read{558,558} %write{557,557}
temp	float	$tmp314	 %read{561,561} %write{560,560}
temp	int	$tmp315	 %read{562,562} %write{561,561}
temp	float	$tmp316	 %read{564,564} %write{563,563}
temp	float	$tmp317	 %read{566,566} %write{565,565}
temp	point	$tmp318	 %read{569,569} %write{568,568}
temp	point	$tmp319	 %read{571,571} %write{570,570}
temp	float	$tmp320	 %read{574,574} %write{573,573}
temp	int	$tmp321	 %read{575,575} %write{574,574}
temp	float	$tmp322	 %read{577,577} %write{576,576}
temp	point	$tmp323	 %read{580,580} %write{579,579}
temp	float	$tmp324	 %read{583,583} %write{582,582}
temp	int	$tmp325	 %read{584,584} %write{583,583}
temp	int	$tmp326	 %read{2147483647,-1} %write{587,587}
temp	int	$tmp327	 %read{2147483647,-1} %write{589,589}
temp	int	$tmp328	 %read{2147483647,-1} %write{591,591}
temp	float	$tmp329	 %read{595,595} %write{594,594}
const	string	$const42	"Voronoi F4"		 %read{597,1724} %write{2147483647,-1}
temp	int	$tmp330	 %read{598,598} %write{597,597}
const	string	$const43	"voronoi_F4S"		 %read{599,1726} %write{2147483647,-1}
temp	float	$tmp331	 %read{774,774} %write{773,773}
const	string	$const44	"voronoi_F4"		 %read{600,1727} %write{2147483647,-1}
temp	float	$tmp332	 %read{605,605} %write{604,604}
temp	float	$tmp333	 %read{604,604} %write{603,603}
temp	float	$tmp334	 %read{608,608} %write{607,607}
temp	float	$tmp335	 %read{607,607} %write{606,606}
temp	float	$tmp336	 %read{611,611} %write{610,610}
temp	float	$tmp337	 %read{610,610} %write{609,609}
temp	int	$tmp338	 %read{619,619} %write{618,618}
temp	int	$tmp339	 %read{616,772} %write{616,772}
temp	int	$tmp340	 %read{623,623} %write{622,622}
temp	int	$tmp341	 %read{620,770} %write{620,770}
temp	int	$tmp342	 %read{627,627} %write{626,626}
temp	int	$tmp343	 %read{624,768} %write{624,768}
temp	float	$tmp344	 %read{631,631} %write{628,628}
temp	float	$tmp345	 %read{631,631} %write{629,629}
temp	float	$tmp346	 %read{631,631} %write{630,630}
temp	color	$tmp347	 %read{645,645} %write{644,644}
temp	point	$tmp348	 %read{638,638} %write{637,637}
temp	float	$tmp349	 %read{637,637} %write{634,634}
temp	float	$tmp350	 %read{637,637} %write{635,635}
temp	float	$tmp351	 %read{637,637} %write{636,636}
temp	point	$tmp352	 %read{643,643} %write{642,642}
temp	float	$tmp353	 %read{642,642} %write{639,639}
temp	float	$tmp354	 %read{642,642} %write{640,640}
temp	float	$tmp355	 %read{642,642} %write{641,641}
temp	point	$tmp356	 %read{647,647} %write{646,646}
temp	int	$tmp357	 %read{650,650} %write{649,649}
temp	int	$tmp358	 %read{654,654} %write{653,653}
temp	int	$tmp359	 %read{658,658} %write{657,657}
temp	float	$tmp360	 %read{663,663} %write{660,660}
temp	float	$tmp361	 %read{660,660} %write{659,659}
temp	float	$tmp362	 %read{663,663} %write{662,662}
temp	float	$tmp363	 %read{662,662} %write{661,661}
temp	float	$tmp364	 %read{666,666} %write{663,663}
temp	float	$tmp365	 %read{666,666} %write{665,665}
temp	float	$tmp366	 %read{665,665} %write{664,664}
temp	int	$tmp367	 %read{669,669} %write{668,668}
temp	float	$tmp368	 %read{677,677} %write{671,671}
temp	float	$tmp369	 %read{671,671} %write{670,670}
temp	float	$tmp370	 %read{677,677} %write{676,676}
temp	float	$tmp371	 %read{676,676} %write{673,673}
temp	float	$tmp372	 %read{673,673} %write{672,672}
temp	float	$tmp373	 %read{676,676} %write{675,675}
temp	float	$tmp374	 %read{675,675} %write{674,674}
temp	int	$tmp375	 %read{680,680} %write{679,679}
temp	float	$tmp376	 %read{687,687} %write{683,683}
temp	float	$tmp377	 %read{683,683} %write{682,682}
temp	float	$tmp378	 %read{682,682} %write{681,681}
temp	float	$tmp379	 %read{687,687} %write{686,686}
temp	float	$tmp380	 %read{686,686} %write{685,685}
temp	float	$tmp381	 %read{685,685} %write{684,684}
temp	float	$tmp382	 %read{691,691} %write{687,687}
temp	float	$tmp383	 %read{691,691} %write{690,690}
temp	float	$tmp384	 %read{690,690} %write{689,689}
temp	float	$tmp385	 %read{689,689} %write{688,688}
temp	int	$tmp386	 %read{694,694} %write{693,693}
temp	float	$tmp387	 %read{699,699} %write{698,698}
temp	float	$tmp388	 %read{698,698} %write{697,697}
temp	vector	$tmp389	 %read{697,697} %write{695,695}
temp	vector	$tmp390	 %read{697,697} %write{696,696}
temp	int	$tmp391	 %read{702,702} %write{701,701}
temp	float	$tmp392	 %read{709,709} %write{705,705}
temp	float	$tmp393	 %read{705,705} %write{704,704}
temp	float	$tmp394	 %read{704,704} %write{703,703}
temp	float	$tmp395	 %read{709,709} %write{708,708}
temp	float	$tmp396	 %read{708,708} %write{707,707}
temp	float	$tmp397	 %read{707,707} %write{706,706}
temp	float	$tmp398	 %read{713,713} %write{709,709}
temp	float	$tmp399	 %read{713,713} %write{712,712}
temp	float	$tmp400	 %read{712,712} %write{711,711}
temp	float	$tmp401	 %read{711,711} %write{710,710}
temp	float	$tmp402	 %read{715,715} %write{713,713}
temp	float	$tmp403	 %read{715,715} %write{714,714}
temp	point	$tmp404	 %read{722,722} %write{721,721}
temp	float	$tmp405	 %read{721,721} %write{718,718}
temp	float	$tmp406	 %read{721,721} %write{719,719}
temp	float	$tmp407	 %read{721,721} %write{720,720}
temp	float	$tmp408	 %read{724,724} %write{723,723}
temp	int	$tmp409	 %read{725,725} %write{724,724}
temp	float	$tmp410	 %read{727,727} %write{726,726}
temp	float	$tmp411	 %read{729,729} %write{728,728}
temp	float	$tmp412	 %read{731,731} %write{730,730}
temp	point	$tmp413	 %read{734,734} %write{733,733}
temp	point	$tmp414	 %read{736,736} %write{735,735}
temp	point	$tmp415	 %read{738,738} %write{737,737}
temp	float	$tmp416	 %read{741,741} %write{740,740}
temp	int	$tmp417	 %read{742,742} %write{741,741}
temp	float	$tmp418	 %read{744,744} %write{743,743}
temp	float	$tmp419	 %read{746,746} %write{745,745}
temp	point	$tmp420	 %read{749,749} %write{748,748}
temp	point	$tmp421	 %read{751,751} %write{750,750}
temp	float	$tmp422	 %read{754,754} %write{753,753}
temp	int	$tmp423	 %read{755,755} %write{754,754}
temp	float	$tmp424	 %read{757,757} %write{756,756}
temp	point	$tmp425	 %read{760,760} %write{759,759}
temp	float	$tmp426	 %read{763,763} %write{762,762}
temp	int	$tmp427	 %read{764,764} %write{763,763}
temp	int	$tmp428	 %read{2147483647,-1} %write{767,767}
temp	int	$tmp429	 %read{2147483647,-1} %write{769,769}
temp	int	$tmp430	 %read{2147483647,-1} %write{771,771}
temp	float	$tmp431	 %read{775,775} %write{774,774}
const	string	$const45	"Voronoi F2-F1"		 %read{777,1904} %write{2147483647,-1}
temp	int	$tmp432	 %read{778,778} %write{777,777}
const	string	$const46	"voronoi_F1F2S"		 %read{779,1906} %write{2147483647,-1}
temp	float	$tmp433	 %read{956,956} %write{955,955}
const	string	$const47	"voronoi_F1F2"		 %read{780,2090} %write{2147483647,-1}
const	string	$const48	"voronoi_FnFn"		 %read{781,2091} %write{2147483647,-1}
temp	float	$tmp434	 %read{785,785} %write{784,784}
temp	float	$tmp435	 %read{784,784} %write{783,783}
temp	float	$tmp436	 %read{788,788} %write{787,787}
temp	float	$tmp437	 %read{787,787} %write{786,786}
temp	float	$tmp438	 %read{791,791} %write{790,790}
temp	float	$tmp439	 %read{790,790} %write{789,789}
temp	int	$tmp440	 %read{799,799} %write{798,798}
temp	int	$tmp441	 %read{796,952} %write{796,952}
temp	int	$tmp442	 %read{803,803} %write{802,802}
temp	int	$tmp443	 %read{800,950} %write{800,950}
temp	int	$tmp444	 %read{807,807} %write{806,806}
temp	int	$tmp445	 %read{804,948} %write{804,948}
temp	float	$tmp446	 %read{811,811} %write{808,808}
temp	float	$tmp447	 %read{811,811} %write{809,809}
temp	float	$tmp448	 %read{811,811} %write{810,810}
temp	color	$tmp449	 %read{825,825} %write{824,824}
temp	point	$tmp450	 %read{818,818} %write{817,817}
temp	float	$tmp451	 %read{817,817} %write{814,814}
temp	float	$tmp452	 %read{817,817} %write{815,815}
temp	float	$tmp453	 %read{817,817} %write{816,816}
temp	point	$tmp454	 %read{823,823} %write{822,822}
temp	float	$tmp455	 %read{822,822} %write{819,819}
temp	float	$tmp456	 %read{822,822} %write{820,820}
temp	float	$tmp457	 %read{822,822} %write{821,821}
temp	point	$tmp458	 %read{827,827} %write{826,826}
temp	int	$tmp459	 %read{830,830} %write{829,829}
temp	int	$tmp460	 %read{834,834} %write{833,833}
temp	int	$tmp461	 %read{838,838} %write{837,837}
temp	float	$tmp462	 %read{843,843} %write{840,840}
temp	float	$tmp463	 %read{840,840} %write{839,839}
temp	float	$tmp464	 %read{843,843} %write{842,842}
temp	float	$tmp465	 %read{842,842} %write{841,841}
temp	float	$tmp466	 %read{846,846} %write{843,843}
temp	float	$tmp467	 %read{846,846} %write{845,845}
temp	float	$tmp468	 %read{845,845} %write{844,844}
temp	int	$tmp469	 %read{849,849} %write{848,848}
temp	float	$tmp470	 %read{857,857} %write{851,851}
temp	float	$tmp471	 %read{851,851} %write{850,850}
temp	float	$tmp472	 %read{857,857} %write{856,856}
temp	float	$tmp473	 %read{856,856} %write{853,853}
temp	float	$tmp474	 %read{853,853} %write{852,852}
temp	float	$tmp475	 %read{856,856} %write{855,855}
temp	float	$tmp476	 %read{855,855} %write{854,854}
temp	int	$tmp477	 %read{860,860} %write{859,859}
temp	float	$tmp478	 %read{867,867} %write{863,863}
temp	float	$tmp479	 %read{863,863} %write{862,862}
temp	float	$tmp480	 %read{862,862} %write{861,861}
temp	float	$tmp481	 %read{867,867} %write{866,866}
temp	float	$tmp482	 %read{866,866} %write{865,865}
temp	float	$tmp483	 %read{865,865} %write{864,864}
temp	float	$tmp484	 %read{871,871} %write{867,867}
temp	float	$tmp485	 %read{871,871} %write{870,870}
temp	float	$tmp486	 %read{870,870} %write{869,869}
temp	float	$tmp487	 %read{869,869} %write{868,868}
temp	int	$tmp488	 %read{874,874} %write{873,873}
temp	float	$tmp489	 %read{879,879} %write{878,878}
temp	float	$tmp490	 %read{878,878} %write{877,877}
temp	vector	$tmp491	 %read{877,877} %write{875,875}
temp	vector	$tmp492	 %read{877,877} %write{876,876}
temp	int	$tmp493	 %read{882,882} %write{881,881}
temp	float	$tmp494	 %read{889,889} %write{885,885}
temp	float	$tmp495	 %read{885,885} %write{884,884}
temp	float	$tmp496	 %read{884,884} %write{883,883}
temp	float	$tmp497	 %read{889,889} %write{888,888}
temp	float	$tmp498	 %read{888,888} %write{887,887}
temp	float	$tmp499	 %read{887,887} %write{886,886}
temp	float	$tmp500	 %read{893,893} %write{889,889}
temp	float	$tmp501	 %read{893,893} %write{892,892}
temp	float	$tmp502	 %read{892,892} %write{891,891}
temp	float	$tmp503	 %read{891,891} %write{890,890}
temp	float	$tmp504	 %read{895,895} %write{893,893}
temp	float	$tmp505	 %read{895,895} %write{894,894}
temp	point	$tmp506	 %read{902,902} %write{901,901}
temp	float	$tmp507	 %read{901,901} %write{898,898}
temp	float	$tmp508	 %read{901,901} %write{899,899}
temp	float	$tmp509	 %read{901,901} %write{900,900}
temp	float	$tmp510	 %read{904,904} %write{903,903}
temp	int	$tmp511	 %read{905,905} %write{904,904}
temp	float	$tmp512	 %read{907,907} %write{906,906}
temp	float	$tmp513	 %read{909,909} %write{908,908}
temp	float	$tmp514	 %read{911,911} %write{910,910}
temp	point	$tmp515	 %read{914,914} %write{913,913}
temp	point	$tmp516	 %read{916,916} %write{915,915}
temp	point	$tmp517	 %read{918,918} %write{917,917}
temp	float	$tmp518	 %read{921,921} %write{920,920}
temp	int	$tmp519	 %read{922,922} %write{921,921}
temp	float	$tmp520	 %read{924,924} %write{923,923}
temp	float	$tmp521	 %read{926,926} %write{925,925}
temp	point	$tmp522	 %read{929,929} %write{928,928}
temp	point	$tmp523	 %read{931,931} %write{930,930}
temp	float	$tmp524	 %read{934,934} %write{933,933}
temp	int	$tmp525	 %read{935,935} %write{934,934}
temp	float	$tmp526	 %read{937,937} %write{936,936}
temp	point	$tmp527	 %read{940,940} %write{939,939}
temp	float	$tmp528	 %read{943,943} %write{942,942}
temp	int	$tmp529	 %read{944,944} %write{943,943}
temp	int	$tmp530	 %read{2147483647,-1} %write{947,947}
temp	int	$tmp531	 %read{2147483647,-1} %write{949,949}
temp	int	$tmp532	 %read{2147483647,-1} %write{951,951}
temp	float	$tmp533	 %read{955,955} %write{953,953}
temp	float	$tmp534	 %read{955,955} %write{954,954}
temp	float	$tmp535	 %read{957,957} %write{956,956}
const	string	$const49	"Voronoi Crackle"		 %read{959,2086} %write{2147483647,-1}
temp	int	$tmp536	 %read{960,960} %write{959,959}
const	string	$const50	"voronoi_CrS"		 %read{961,2088} %write{2147483647,-1}
temp	float	$tmp537	 %read{1145,1145} %write{1142,1143}
const	string	$const51	"voronoi_Cr"		 %read{962,2089} %write{2147483647,-1}
temp	float	$tmp538	 %read{1139,1139} %write{1138,1138}
temp	float	$tmp539	 %read{968,968} %write{967,967}
temp	float	$tmp540	 %read{967,967} %write{966,966}
temp	float	$tmp541	 %read{971,971} %write{970,970}
temp	float	$tmp542	 %read{970,970} %write{969,969}
temp	float	$tmp543	 %read{974,974} %write{973,973}
temp	float	$tmp544	 %read{973,973} %write{972,972}
temp	int	$tmp545	 %read{982,982} %write{981,981}
temp	int	$tmp546	 %read{979,1135} %write{979,1135}
temp	int	$tmp547	 %read{986,986} %write{985,985}
temp	int	$tmp548	 %read{983,1133} %write{983,1133}
temp	int	$tmp549	 %read{990,990} %write{989,989}
temp	int	$tmp550	 %read{987,1131} %write{987,1131}
temp	float	$tmp551	 %read{994,994} %write{991,991}
temp	float	$tmp552	 %read{994,994} %write{992,992}
temp	float	$tmp553	 %read{994,994} %write{993,993}
temp	color	$tmp554	 %read{1008,1008} %write{1007,1007}
temp	point	$tmp555	 %read{1001,1001} %write{1000,1000}
temp	float	$tmp556	 %read{1000,1000} %write{997,997}
temp	float	$tmp557	 %read{1000,1000} %write{998,998}
temp	float	$tmp558	 %read{1000,1000} %write{999,999}
temp	point	$tmp559	 %read{1006,1006} %write{1005,1005}
temp	float	$tmp560	 %read{1005,1005} %write{1002,1002}
temp	float	$tmp561	 %read{1005,1005} %write{1003,1003}
temp	float	$tmp562	 %read{1005,1005} %write{1004,1004}
temp	point	$tmp563	 %read{1010,1010} %write{1009,1009}
temp	int	$tmp564	 %read{1013,1013} %write{1012,1012}
temp	int	$tmp565	 %read{1017,1017} %write{1016,1016}
temp	int	$tmp566	 %read{1021,1021} %write{1020,1020}
temp	float	$tmp567	 %read{1026,1026} %write{1023,1023}
temp	float	$tmp568	 %read{1023,1023} %write{1022,1022}
temp	float	$tmp569	 %read{1026,1026} %write{1025,1025}
temp	float	$tmp570	 %read{1025,1025} %write{1024,1024}
temp	float	$tmp571	 %read{1029,1029} %write{1026,1026}
temp	float	$tmp572	 %read{1029,1029} %write{1028,1028}
temp	float	$tmp573	 %read{1028,1028} %write{1027,1027}
temp	int	$tmp574	 %read{1032,1032} %write{1031,1031}
temp	float	$tmp575	 %read{1040,1040} %write{1034,1034}
temp	float	$tmp576	 %read{1034,1034} %write{1033,1033}
temp	float	$tmp577	 %read{1040,1040} %write{1039,1039}
temp	float	$tmp578	 %read{1039,1039} %write{1036,1036}
temp	float	$tmp579	 %read{1036,1036} %write{1035,1035}
temp	float	$tmp580	 %read{1039,1039} %write{1038,1038}
temp	float	$tmp581	 %read{1038,1038} %write{1037,1037}
temp	int	$tmp582	 %read{1043,1043} %write{1042,1042}
temp	float	$tmp583	 %read{1050,1050} %write{1046,1046}
temp	float	$tmp584	 %read{1046,1046} %write{1045,1045}
temp	float	$tmp585	 %read{1045,1045} %write{1044,1044}
temp	float	$tmp586	 %read{1050,1050} %write{1049,1049}
temp	float	$tmp587	 %read{1049,1049} %write{1048,1048}
temp	float	$tmp588	 %read{1048,1048} %write{1047,1047}
temp	float	$tmp589	 %read{1054,1054} %write{1050,1050}
temp	float	$tmp590	 %read{1054,1054} %write{1053,1053}
temp	float	$tmp591	 %read{1053,1053} %write{1052,1052}
temp	float	$tmp592	 %read{1052,1052} %write{1051,1051}
temp	int	$tmp593	 %read{1057,1057} %write{1056,1056}
temp	float	$tmp594	 %read{1062,1062} %write{1061,1061}
temp	float	$tmp595	 %read{1061,1061} %write{1060,1060}
temp	vector	$tmp596	 %read{1060,1060} %write{1058,1058}
temp	vector	$tmp597	 %read{1060,1060} %write{1059,1059}
temp	int	$tmp598	 %read{1065,1065} %write{1064,1064}
temp	float	$tmp599	 %read{1072,1072} %write{1068,1068}
temp	float	$tmp600	 %read{1068,1068} %write{1067,1067}
temp	float	$tmp601	 %read{1067,1067} %write{1066,1066}
temp	float	$tmp602	 %read{1072,1072} %write{1071,1071}
temp	float	$tmp603	 %read{1071,1071} %write{1070,1070}
temp	float	$tmp604	 %read{1070,1070} %write{1069,1069}
temp	float	$tmp605	 %read{1076,1076} %write{1072,1072}
temp	float	$tmp606	 %read{1076,1076} %write{1075,1075}
temp	float	$tmp607	 %read{1075,1075} %write{1074,1074}
temp	float	$tmp608	 %read{1074,1074} %write{1073,1073}
temp	float	$tmp609	 %read{1078,1078} %write{1076,1076}
temp	float	$tmp610	 %read{1078,1078} %write{1077,1077}
temp	point	$tmp611	 %read{1085,1085} %write{1084,1084}
temp	float	$tmp612	 %read{1084,1084} %write{1081,1081}
temp	float	$tmp613	 %read{1084,1084} %write{1082,1082}
temp	float	$tmp614	 %read{1084,1084} %write{1083,1083}
temp	float	$tmp615	 %read{1087,1087} %write{1086,1086}
temp	int	$tmp616	 %read{1088,1088} %write{1087,1087}
temp	float	$tmp617	 %read{1090,1090} %write{1089,1089}
temp	float	$tmp618	 %read{1092,1092} %write{1091,1091}
temp	float	$tmp619	 %read{1094,1094} %write{1093,1093}
temp	point	$tmp620	 %read{1097,1097} %write{1096,1096}
temp	point	$tmp621	 %read{1099,1099} %write{1098,1098}
temp	point	$tmp622	 %read{1101,1101} %write{1100,1100}
temp	float	$tmp623	 %read{1104,1104} %write{1103,1103}
temp	int	$tmp624	 %read{1105,1105} %write{1104,1104}
temp	float	$tmp625	 %read{1107,1107} %write{1106,1106}
temp	float	$tmp626	 %read{1109,1109} %write{1108,1108}
temp	point	$tmp627	 %read{1112,1112} %write{1111,1111}
temp	point	$tmp628	 %read{1114,1114} %write{1113,1113}
temp	float	$tmp629	 %read{1117,1117} %write{1116,1116}
temp	int	$tmp630	 %read{1118,1118} %write{1117,1117}
temp	float	$tmp631	 %read{1120,1120} %write{1119,1119}
temp	point	$tmp632	 %read{1123,1123} %write{1122,1122}
temp	float	$tmp633	 %read{1126,1126} %write{1125,1125}
temp	int	$tmp634	 %read{1127,1127} %write{1126,1126}
temp	int	$tmp635	 %read{2147483647,-1} %write{1130,1130}
temp	int	$tmp636	 %read{2147483647,-1} %write{1132,1132}
temp	int	$tmp637	 %read{2147483647,-1} %write{1134,1134}
temp	float	$tmp638	 %read{1138,1138} %write{1136,1136}
temp	float	$tmp639	 %read{1138,1138} %write{1137,1137}
temp	int	$tmp640	 %read{1141,1141} %write{1140,1140}
temp	float	$tmp641	 %read{1146,1146} %write{1145,1145}
const	string	$const52	"Cell Noise"		 %read{1148,2275} %write{2147483647,-1}
temp	int	$tmp642	 %read{1149,1149} %write{1148,1148}
temp	float	$tmp643	 %read{1155,1155} %write{1154,1154}
temp	float	$tmp644	 %read{1156,1156} %write{1155,1155}
temp	float	$tmp645	 %read{1158,1158} %write{1157,1157}
temp	int	$tmp646	 %read{2147483647,-1} %write{1161,1161}
temp	float	$tmp647	 %read{1164,1164} %write{1163,1163}
temp	int	$tmp648	 %read{1166,1166} %write{1165,1165}
temp	point	$tmp649	 %read{1175,2277} %write{1167,2262}
temp	int	$tmp650	 %read{1170,1170} %write{1169,1169}
temp	int	$tmp651	 %read{1174,1174} %write{1173,1173}
temp	int	$tmp652	 %read{1178,1178} %write{1177,1177}
temp	int	$tmp653	 %read{1179,1179} %write{1178,1178}
temp	int	$tmp654	 %read{1185,1185} %write{1184,1184}
temp	float	$tmp655	 %read{1361,1361} %write{1360,1360}
temp	float	$tmp656	 %read{1192,1192} %write{1191,1191}
temp	float	$tmp657	 %read{1191,1191} %write{1190,1190}
temp	float	$tmp658	 %read{1195,1195} %write{1194,1194}
temp	float	$tmp659	 %read{1194,1194} %write{1193,1193}
temp	float	$tmp660	 %read{1198,1198} %write{1197,1197}
temp	float	$tmp661	 %read{1197,1197} %write{1196,1196}
temp	int	$tmp662	 %read{1206,1206} %write{1205,1205}
temp	int	$tmp663	 %read{1203,1359} %write{1203,1359}
temp	int	$tmp664	 %read{1210,1210} %write{1209,1209}
temp	int	$tmp665	 %read{1207,1357} %write{1207,1357}
temp	int	$tmp666	 %read{1214,1214} %write{1213,1213}
temp	int	$tmp667	 %read{1211,1355} %write{1211,1355}
temp	float	$tmp668	 %read{1218,1218} %write{1215,1215}
temp	float	$tmp669	 %read{1218,1218} %write{1216,1216}
temp	float	$tmp670	 %read{1218,1218} %write{1217,1217}
temp	color	$tmp671	 %read{1232,1232} %write{1231,1231}
temp	point	$tmp672	 %read{1225,1225} %write{1224,1224}
temp	float	$tmp673	 %read{1224,1224} %write{1221,1221}
temp	float	$tmp674	 %read{1224,1224} %write{1222,1222}
temp	float	$tmp675	 %read{1224,1224} %write{1223,1223}
temp	point	$tmp676	 %read{1230,1230} %write{1229,1229}
temp	float	$tmp677	 %read{1229,1229} %write{1226,1226}
temp	float	$tmp678	 %read{1229,1229} %write{1227,1227}
temp	float	$tmp679	 %read{1229,1229} %write{1228,1228}
temp	point	$tmp680	 %read{1234,1234} %write{1233,1233}
temp	int	$tmp681	 %read{1237,1237} %write{1236,1236}
temp	int	$tmp682	 %read{1241,1241} %write{1240,1240}
temp	int	$tmp683	 %read{1245,1245} %write{1244,1244}
temp	float	$tmp684	 %read{1250,1250} %write{1247,1247}
temp	float	$tmp685	 %read{1247,1247} %write{1246,1246}
temp	float	$tmp686	 %read{1250,1250} %write{1249,1249}
temp	float	$tmp687	 %read{1249,1249} %write{1248,1248}
temp	float	$tmp688	 %read{1253,1253} %write{1250,1250}
temp	float	$tmp689	 %read{1253,1253} %write{1252,1252}
temp	float	$tmp690	 %read{1252,1252} %write{1251,1251}
temp	int	$tmp691	 %read{1256,1256} %write{1255,1255}
temp	float	$tmp692	 %read{1264,1264} %write{1258,1258}
temp	float	$tmp693	 %read{1258,1258} %write{1257,1257}
temp	float	$tmp694	 %read{1264,1264} %write{1263,1263}
temp	float	$tmp695	 %read{1263,1263} %write{1260,1260}
temp	float	$tmp696	 %read{1260,1260} %write{1259,1259}
temp	float	$tmp697	 %read{1263,1263} %write{1262,1262}
temp	float	$tmp698	 %read{1262,1262} %write{1261,1261}
temp	int	$tmp699	 %read{1267,1267} %write{1266,1266}
temp	float	$tmp700	 %read{1274,1274} %write{1270,1270}
temp	float	$tmp701	 %read{1270,1270} %write{1269,1269}
temp	float	$tmp702	 %read{1269,1269} %write{1268,1268}
temp	float	$tmp703	 %read{1274,1274} %write{1273,1273}
temp	float	$tmp704	 %read{1273,1273} %write{1272,1272}
temp	float	$tmp705	 %read{1272,1272} %write{1271,1271}
temp	float	$tmp706	 %read{1278,1278} %write{1274,1274}
temp	float	$tmp707	 %read{1278,1278} %write{1277,1277}
temp	float	$tmp708	 %read{1277,1277} %write{1276,1276}
temp	float	$tmp709	 %read{1276,1276} %write{1275,1275}
temp	int	$tmp710	 %read{1281,1281} %write{1280,1280}
temp	float	$tmp711	 %read{1286,1286} %write{1285,1285}
temp	float	$tmp712	 %read{1285,1285} %write{1284,1284}
temp	vector	$tmp713	 %read{1284,1284} %write{1282,1282}
temp	vector	$tmp714	 %read{1284,1284} %write{1283,1283}
temp	int	$tmp715	 %read{1289,1289} %write{1288,1288}
temp	float	$tmp716	 %read{1296,1296} %write{1292,1292}
temp	float	$tmp717	 %read{1292,1292} %write{1291,1291}
temp	float	$tmp718	 %read{1291,1291} %write{1290,1290}
temp	float	$tmp719	 %read{1296,1296} %write{1295,1295}
temp	float	$tmp720	 %read{1295,1295} %write{1294,1294}
temp	float	$tmp721	 %read{1294,1294} %write{1293,1293}
temp	float	$tmp722	 %read{1300,1300} %write{1296,1296}
temp	float	$tmp723	 %read{1300,1300} %write{1299,1299}
temp	float	$tmp724	 %read{1299,1299} %write{1298,1298}
temp	float	$tmp725	 %read{1298,1298} %write{1297,1297}
temp	float	$tmp726	 %read{1302,1302} %write{1300,1300}
temp	float	$tmp727	 %read{1302,1302} %write{1301,1301}
temp	point	$tmp728	 %read{1309,1309} %write{1308,1308}
temp	float	$tmp729	 %read{1308,1308} %write{1305,1305}
temp	float	$tmp730	 %read{1308,1308} %write{1306,1306}
temp	float	$tmp731	 %read{1308,1308} %write{1307,1307}
temp	float	$tmp732	 %read{1311,1311} %write{1310,1310}
temp	int	$tmp733	 %read{1312,1312} %write{1311,1311}
temp	float	$tmp734	 %read{1314,1314} %write{1313,1313}
temp	float	$tmp735	 %read{1316,1316} %write{1315,1315}
temp	float	$tmp736	 %read{1318,1318} %write{1317,1317}
temp	point	$tmp737	 %read{1321,1321} %write{1320,1320}
temp	point	$tmp738	 %read{1323,1323} %write{1322,1322}
temp	point	$tmp739	 %read{1325,1325} %write{1324,1324}
temp	float	$tmp740	 %read{1328,1328} %write{1327,1327}
temp	int	$tmp741	 %read{1329,1329} %write{1328,1328}
temp	float	$tmp742	 %read{1331,1331} %write{1330,1330}
temp	float	$tmp743	 %read{1333,1333} %write{1332,1332}
temp	point	$tmp744	 %read{1336,1336} %write{1335,1335}
temp	point	$tmp745	 %read{1338,1338} %write{1337,1337}
temp	float	$tmp746	 %read{1341,1341} %write{1340,1340}
temp	int	$tmp747	 %read{1342,1342} %write{1341,1341}
temp	float	$tmp748	 %read{1344,1344} %write{1343,1343}
temp	point	$tmp749	 %read{1347,1347} %write{1346,1346}
temp	float	$tmp750	 %read{1350,1350} %write{1349,1349}
temp	int	$tmp751	 %read{1351,1351} %write{1350,1350}
temp	int	$tmp752	 %read{2147483647,-1} %write{1354,1354}
temp	int	$tmp753	 %read{2147483647,-1} %write{1356,1356}
temp	int	$tmp754	 %read{2147483647,-1} %write{1358,1358}
temp	float	$tmp755	 %read{1362,1362} %write{1361,1361}
temp	int	$tmp756	 %read{1365,1365} %write{1364,1364}
temp	float	$tmp757	 %read{1541,1541} %write{1540,1540}
temp	float	$tmp758	 %read{1372,1372} %write{1371,1371}
temp	float	$tmp759	 %read{1371,1371} %write{1370,1370}
temp	float	$tmp760	 %read{1375,1375} %write{1374,1374}
temp	float	$tmp761	 %read{1374,1374} %write{1373,1373}
temp	float	$tmp762	 %read{1378,1378} %write{1377,1377}
temp	float	$tmp763	 %read{1377,1377} %write{1376,1376}
temp	int	$tmp764	 %read{1386,1386} %write{1385,1385}
temp	int	$tmp765	 %read{1383,1539} %write{1383,1539}
temp	int	$tmp766	 %read{1390,1390} %write{1389,1389}
temp	int	$tmp767	 %read{1387,1537} %write{1387,1537}
temp	int	$tmp768	 %read{1394,1394} %write{1393,1393}
temp	int	$tmp769	 %read{1391,1535} %write{1391,1535}
temp	float	$tmp770	 %read{1398,1398} %write{1395,1395}
temp	float	$tmp771	 %read{1398,1398} %write{1396,1396}
temp	float	$tmp772	 %read{1398,1398} %write{1397,1397}
temp	color	$tmp773	 %read{1412,1412} %write{1411,1411}
temp	point	$tmp774	 %read{1405,1405} %write{1404,1404}
temp	float	$tmp775	 %read{1404,1404} %write{1401,1401}
temp	float	$tmp776	 %read{1404,1404} %write{1402,1402}
temp	float	$tmp777	 %read{1404,1404} %write{1403,1403}
temp	point	$tmp778	 %read{1410,1410} %write{1409,1409}
temp	float	$tmp779	 %read{1409,1409} %write{1406,1406}
temp	float	$tmp780	 %read{1409,1409} %write{1407,1407}
temp	float	$tmp781	 %read{1409,1409} %write{1408,1408}
temp	point	$tmp782	 %read{1414,1414} %write{1413,1413}
temp	int	$tmp783	 %read{1417,1417} %write{1416,1416}
temp	int	$tmp784	 %read{1421,1421} %write{1420,1420}
temp	int	$tmp785	 %read{1425,1425} %write{1424,1424}
temp	float	$tmp786	 %read{1430,1430} %write{1427,1427}
temp	float	$tmp787	 %read{1427,1427} %write{1426,1426}
temp	float	$tmp788	 %read{1430,1430} %write{1429,1429}
temp	float	$tmp789	 %read{1429,1429} %write{1428,1428}
temp	float	$tmp790	 %read{1433,1433} %write{1430,1430}
temp	float	$tmp791	 %read{1433,1433} %write{1432,1432}
temp	float	$tmp792	 %read{1432,1432} %write{1431,1431}
temp	int	$tmp793	 %read{1436,1436} %write{1435,1435}
temp	float	$tmp794	 %read{1444,1444} %write{1438,1438}
temp	float	$tmp795	 %read{1438,1438} %write{1437,1437}
temp	float	$tmp796	 %read{1444,1444} %write{1443,1443}
temp	float	$tmp797	 %read{1443,1443} %write{1440,1440}
temp	float	$tmp798	 %read{1440,1440} %write{1439,1439}
temp	float	$tmp799	 %read{1443,1443} %write{1442,1442}
temp	float	$tmp800	 %read{1442,1442} %write{1441,1441}
temp	int	$tmp801	 %read{1447,1447} %write{1446,1446}
temp	float	$tmp802	 %read{1454,1454} %write{1450,1450}
temp	float	$tmp803	 %read{1450,1450} %write{1449,1449}
temp	float	$tmp804	 %read{1449,1449} %write{1448,1448}
temp	float	$tmp805	 %read{1454,1454} %write{1453,1453}
temp	float	$tmp806	 %read{1453,1453} %write{1452,1452}
temp	float	$tmp807	 %read{1452,1452} %write{1451,1451}
temp	float	$tmp808	 %read{1458,1458} %write{1454,1454}
temp	float	$tmp809	 %read{1458,1458} %write{1457,1457}
temp	float	$tmp810	 %read{1457,1457} %write{1456,1456}
temp	float	$tmp811	 %read{1456,1456} %write{1455,1455}
temp	int	$tmp812	 %read{1461,1461} %write{1460,1460}
temp	float	$tmp813	 %read{1466,1466} %write{1465,1465}
temp	float	$tmp814	 %read{1465,1465} %write{1464,1464}
temp	vector	$tmp815	 %read{1464,1464} %write{1462,1462}
temp	vector	$tmp816	 %read{1464,1464} %write{1463,1463}
temp	int	$tmp817	 %read{1469,1469} %write{1468,1468}
temp	float	$tmp818	 %read{1476,1476} %write{1472,1472}
temp	float	$tmp819	 %read{1472,1472} %write{1471,1471}
temp	float	$tmp820	 %read{1471,1471} %write{1470,1470}
temp	float	$tmp821	 %read{1476,1476} %write{1475,1475}
temp	float	$tmp822	 %read{1475,1475} %write{1474,1474}
temp	float	$tmp823	 %read{1474,1474} %write{1473,1473}
temp	float	$tmp824	 %read{1480,1480} %write{1476,1476}
temp	float	$tmp825	 %read{1480,1480} %write{1479,1479}
temp	float	$tmp826	 %read{1479,1479} %write{1478,1478}
temp	float	$tmp827	 %read{1478,1478} %write{1477,1477}
temp	float	$tmp828	 %read{1482,1482} %write{1480,1480}
temp	float	$tmp829	 %read{1482,1482} %write{1481,1481}
temp	point	$tmp830	 %read{1489,1489} %write{1488,1488}
temp	float	$tmp831	 %read{1488,1488} %write{1485,1485}
temp	float	$tmp832	 %read{1488,1488} %write{1486,1486}
temp	float	$tmp833	 %read{1488,1488} %write{1487,1487}
temp	float	$tmp834	 %read{1491,1491} %write{1490,1490}
temp	int	$tmp835	 %read{1492,1492} %write{1491,1491}
temp	float	$tmp836	 %read{1494,1494} %write{1493,1493}
temp	float	$tmp837	 %read{1496,1496} %write{1495,1495}
temp	float	$tmp838	 %read{1498,1498} %write{1497,1497}
temp	point	$tmp839	 %read{1501,1501} %write{1500,1500}
temp	point	$tmp840	 %read{1503,1503} %write{1502,1502}
temp	point	$tmp841	 %read{1505,1505} %write{1504,1504}
temp	float	$tmp842	 %read{1508,1508} %write{1507,1507}
temp	int	$tmp843	 %read{1509,1509} %write{1508,1508}
temp	float	$tmp844	 %read{1511,1511} %write{1510,1510}
temp	float	$tmp845	 %read{1513,1513} %write{1512,1512}
temp	point	$tmp846	 %read{1516,1516} %write{1515,1515}
temp	point	$tmp847	 %read{1518,1518} %write{1517,1517}
temp	float	$tmp848	 %read{1521,1521} %write{1520,1520}
temp	int	$tmp849	 %read{1522,1522} %write{1521,1521}
temp	float	$tmp850	 %read{1524,1524} %write{1523,1523}
temp	point	$tmp851	 %read{1527,1527} %write{1526,1526}
temp	float	$tmp852	 %read{1530,1530} %write{1529,1529}
temp	int	$tmp853	 %read{1531,1531} %write{1530,1530}
temp	int	$tmp854	 %read{2147483647,-1} %write{1534,1534}
temp	int	$tmp855	 %read{2147483647,-1} %write{1536,1536}
temp	int	$tmp856	 %read{2147483647,-1} %write{1538,1538}
temp	float	$tmp857	 %read{1542,1542} %write{1541,1541}
temp	int	$tmp858	 %read{1545,1545} %write{1544,1544}
temp	float	$tmp859	 %read{1721,1721} %write{1720,1720}
temp	float	$tmp860	 %read{1552,1552} %write{1551,1551}
temp	float	$tmp861	 %read{1551,1551} %write{1550,1550}
temp	float	$tmp862	 %read{1555,1555} %write{1554,1554}
temp	float	$tmp863	 %read{1554,1554} %write{1553,1553}
temp	float	$tmp864	 %read{1558,1558} %write{1557,1557}
temp	float	$tmp865	 %read{1557,1557} %write{1556,1556}
temp	int	$tmp866	 %read{1566,1566} %write{1565,1565}
temp	int	$tmp867	 %read{1563,1719} %write{1563,1719}
temp	int	$tmp868	 %read{1570,1570} %write{1569,1569}
temp	int	$tmp869	 %read{1567,1717} %write{1567,1717}
temp	int	$tmp870	 %read{1574,1574} %write{1573,1573}
temp	int	$tmp871	 %read{1571,1715} %write{1571,1715}
temp	float	$tmp872	 %read{1578,1578} %write{1575,1575}
temp	float	$tmp873	 %read{1578,1578} %write{1576,1576}
temp	float	$tmp874	 %read{1578,1578} %write{1577,1577}
temp	color	$tmp875	 %read{1592,1592} %write{1591,1591}
temp	point	$tmp876	 %read{1585,1585} %write{1584,1584}
temp	float	$tmp877	 %read{1584,1584} %write{1581,1581}
temp	float	$tmp878	 %read{1584,1584} %write{1582,1582}
temp	float	$tmp879	 %read{1584,1584} %write{1583,1583}
temp	point	$tmp880	 %read{1590,1590} %write{1589,1589}
temp	float	$tmp881	 %read{1589,1589} %write{1586,1586}
temp	float	$tmp882	 %read{1589,1589} %write{1587,1587}
temp	float	$tmp883	 %read{1589,1589} %write{1588,1588}
temp	point	$tmp884	 %read{1594,1594} %write{1593,1593}
temp	int	$tmp885	 %read{1597,1597} %write{1596,1596}
temp	int	$tmp886	 %read{1601,1601} %write{1600,1600}
temp	int	$tmp887	 %read{1605,1605} %write{1604,1604}
temp	float	$tmp888	 %read{1610,1610} %write{1607,1607}
temp	float	$tmp889	 %read{1607,1607} %write{1606,1606}
temp	float	$tmp890	 %read{1610,1610} %write{1609,1609}
temp	float	$tmp891	 %read{1609,1609} %write{1608,1608}
temp	float	$tmp892	 %read{1613,1613} %write{1610,1610}
temp	float	$tmp893	 %read{1613,1613} %write{1612,1612}
temp	float	$tmp894	 %read{1612,1612} %write{1611,1611}
temp	int	$tmp895	 %read{1616,1616} %write{1615,1615}
temp	float	$tmp896	 %read{1624,1624} %write{1618,1618}
temp	float	$tmp897	 %read{1618,1618} %write{1617,1617}
temp	float	$tmp898	 %read{1624,1624} %write{1623,1623}
temp	float	$tmp899	 %read{1623,1623} %write{1620,1620}
temp	float	$tmp900	 %read{1620,1620} %write{1619,1619}
temp	float	$tmp901	 %read{1623,1623} %write{1622,1622}
temp	float	$tmp902	 %read{1622,1622} %write{1621,1621}
temp	int	$tmp903	 %read{1627,1627} %write{1626,1626}
temp	float	$tmp904	 %read{1634,1634} %write{1630,1630}
temp	float	$tmp905	 %read{1630,1630} %write{1629,1629}
temp	float	$tmp906	 %read{1629,1629} %write{1628,1628}
temp	float	$tmp907	 %read{1634,1634} %write{1633,1633}
temp	float	$tmp908	 %read{1633,1633} %write{1632,1632}
temp	float	$tmp909	 %read{1632,1632} %write{1631,1631}
temp	float	$tmp910	 %read{1638,1638} %write{1634,1634}
temp	float	$tmp911	 %read{1638,1638} %write{1637,1637}
temp	float	$tmp912	 %read{1637,1637} %write{1636,1636}
temp	float	$tmp913	 %read{1636,1636} %write{1635,1635}
temp	int	$tmp914	 %read{1641,1641} %write{1640,1640}
temp	float	$tmp915	 %read{1646,1646} %write{1645,1645}
temp	float	$tmp916	 %read{1645,1645} %write{1644,1644}
temp	vector	$tmp917	 %read{1644,1644} %write{1642,1642}
temp	vector	$tmp918	 %read{1644,1644} %write{1643,1643}
temp	int	$tmp919	 %read{1649,1649} %write{1648,1648}
temp	float	$tmp920	 %read{1656,1656} %write{1652,1652}
temp	float	$tmp921	 %read{1652,1652} %write{1651,1651}
temp	float	$tmp922	 %read{1651,1651} %write{1650,1650}
temp	float	$tmp923	 %read{1656,1656} %write{1655,1655}
temp	float	$tmp924	 %read{1655,1655} %write{1654,1654}
temp	float	$tmp925	 %read{1654,1654} %write{1653,1653}
temp	float	$tmp926	 %read{1660,1660} %write{1656,1656}
temp	float	$tmp927	 %read{1660,1660} %write{1659,1659}
temp	float	$tmp928	 %read{1659,1659} %write{1658,1658}
temp	float	$tmp929	 %read{1658,1658} %write{1657,1657}
temp	float	$tmp930	 %read{1662,1662} %write{1660,1660}
temp	float	$tmp931	 %read{1662,1662} %write{1661,1661}
temp	point	$tmp932	 %read{1669,1669} %write{1668,1668}
temp	float	$tmp933	 %read{1668,1668} %write{1665,1665}
temp	float	$tmp934	 %read{1668,1668} %write{1666,1666}
temp	float	$tmp935	 %read{1668,1668} %write{1667,1667}
temp	float	$tmp936	 %read{1671,1671} %write{1670,1670}
temp	int	$tmp937	 %read{1672,1672} %write{1671,1671}
temp	float	$tmp938	 %read{1674,1674} %write{1673,1673}
temp	float	$tmp939	 %read{1676,1676} %write{1675,1675}
temp	float	$tmp940	 %read{1678,1678} %write{1677,1677}
temp	point	$tmp941	 %read{1681,1681} %write{1680,1680}
temp	point	$tmp942	 %read{1683,1683} %write{1682,1682}
temp	point	$tmp943	 %read{1685,1685} %write{1684,1684}
temp	float	$tmp944	 %read{1688,1688} %write{1687,1687}
temp	int	$tmp945	 %read{1689,1689} %write{1688,1688}
temp	float	$tmp946	 %read{1691,1691} %write{1690,1690}
temp	float	$tmp947	 %read{1693,1693} %write{1692,1692}
temp	point	$tmp948	 %read{1696,1696} %write{1695,1695}
temp	point	$tmp949	 %read{1698,1698} %write{1697,1697}
temp	float	$tmp950	 %read{1701,1701} %write{1700,1700}
temp	int	$tmp951	 %read{1702,1702} %write{1701,1701}
temp	float	$tmp952	 %read{1704,1704} %write{1703,1703}
temp	point	$tmp953	 %read{1707,1707} %write{1706,1706}
temp	float	$tmp954	 %read{1710,1710} %write{1709,1709}
temp	int	$tmp955	 %read{1711,1711} %write{1710,1710}
temp	int	$tmp956	 %read{2147483647,-1} %write{1714,1714}
temp	int	$tmp957	 %read{2147483647,-1} %write{1716,1716}
temp	int	$tmp958	 %read{2147483647,-1} %write{1718,1718}
temp	float	$tmp959	 %read{1722,1722} %write{1721,1721}
temp	int	$tmp960	 %read{1725,1725} %write{1724,1724}
temp	float	$tmp961	 %read{1901,1901} %write{1900,1900}
temp	float	$tmp962	 %read{1732,1732} %write{1731,1731}
temp	float	$tmp963	 %read{1731,1731} %write{1730,1730}
temp	float	$tmp964	 %read{1735,1735} %write{1734,1734}
temp	float	$tmp965	 %read{1734,1734} %write{1733,1733}
temp	float	$tmp966	 %read{1738,1738} %write{1737,1737}
temp	float	$tmp967	 %read{1737,1737} %write{1736,1736}
temp	int	$tmp968	 %read{1746,1746} %write{1745,1745}
temp	int	$tmp969	 %read{1743,1899} %write{1743,1899}
temp	int	$tmp970	 %read{1750,1750} %write{1749,1749}
temp	int	$tmp971	 %read{1747,1897} %write{1747,1897}
temp	int	$tmp972	 %read{1754,1754} %write{1753,1753}
temp	int	$tmp973	 %read{1751,1895} %write{1751,1895}
temp	float	$tmp974	 %read{1758,1758} %write{1755,1755}
temp	float	$tmp975	 %read{1758,1758} %write{1756,1756}
temp	float	$tmp976	 %read{1758,1758} %write{1757,1757}
temp	color	$tmp977	 %read{1772,1772} %write{1771,1771}
temp	point	$tmp978	 %read{1765,1765} %write{1764,1764}
temp	float	$tmp979	 %read{1764,1764} %write{1761,1761}
temp	float	$tmp980	 %read{1764,1764} %write{1762,1762}
temp	float	$tmp981	 %read{1764,1764} %write{1763,1763}
temp	point	$tmp982	 %read{1770,1770} %write{1769,1769}
temp	float	$tmp983	 %read{1769,1769} %write{1766,1766}
temp	float	$tmp984	 %read{1769,1769} %write{1767,1767}
temp	float	$tmp985	 %read{1769,1769} %write{1768,1768}
temp	point	$tmp986	 %read{1774,1774} %write{1773,1773}
temp	int	$tmp987	 %read{1777,1777} %write{1776,1776}
temp	int	$tmp988	 %read{1781,1781} %write{1780,1780}
temp	int	$tmp989	 %read{1785,1785} %write{1784,1784}
temp	float	$tmp990	 %read{1790,1790} %write{1787,1787}
temp	float	$tmp991	 %read{1787,1787} %write{1786,1786}
temp	float	$tmp992	 %read{1790,1790} %write{1789,1789}
temp	float	$tmp993	 %read{1789,1789} %write{1788,1788}
temp	float	$tmp994	 %read{1793,1793} %write{1790,1790}
temp	float	$tmp995	 %read{1793,1793} %write{1792,1792}
temp	float	$tmp996	 %read{1792,1792} %write{1791,1791}
temp	int	$tmp997	 %read{1796,1796} %write{1795,1795}
temp	float	$tmp998	 %read{1804,1804} %write{1798,1798}
temp	float	$tmp999	 %read{1798,1798} %write{1797,1797}
temp	float	$tmp1000	 %read{1804,1804} %write{1803,1803}
temp	float	$tmp1001	 %read{1803,1803} %write{1800,1800}
temp	float	$tmp1002	 %read{1800,1800} %write{1799,1799}
temp	float	$tmp1003	 %read{1803,1803} %write{1802,1802}
temp	float	$tmp1004	 %read{1802,1802} %write{1801,1801}
temp	int	$tmp1005	 %read{1807,1807} %write{1806,1806}
temp	float	$tmp1006	 %read{1814,1814} %write{1810,1810}
temp	float	$tmp1007	 %read{1810,1810} %write{1809,1809}
temp	float	$tmp1008	 %read{1809,1809} %write{1808,1808}
temp	float	$tmp1009	 %read{1814,1814} %write{1813,1813}
temp	float	$tmp1010	 %read{1813,1813} %write{1812,1812}
temp	float	$tmp1011	 %read{1812,1812} %write{1811,1811}
temp	float	$tmp1012	 %read{1818,1818} %write{1814,1814}
temp	float	$tmp1013	 %read{1818,1818} %write{1817,1817}
temp	float	$tmp1014	 %read{1817,1817} %write{1816,1816}
temp	float	$tmp1015	 %read{1816,1816} %write{1815,1815}
temp	int	$tmp1016	 %read{1821,1821} %write{1820,1820}
temp	float	$tmp1017	 %read{1826,1826} %write{1825,1825}
temp	float	$tmp1018	 %read{1825,1825} %write{1824,1824}
temp	vector	$tmp1019	 %read{1824,1824} %write{1822,1822}
temp	vector	$tmp1020	 %read{1824,1824} %write{1823,1823}
temp	int	$tmp1021	 %read{1829,1829} %write{1828,1828}
temp	float	$tmp1022	 %read{1836,1836} %write{1832,1832}
temp	float	$tmp1023	 %read{1832,1832} %write{1831,1831}
temp	float	$tmp1024	 %read{1831,1831} %write{1830,1830}
temp	float	$tmp1025	 %read{1836,1836} %write{1835,1835}
temp	float	$tmp1026	 %read{1835,1835} %write{1834,1834}
temp	float	$tmp1027	 %read{1834,1834} %write{1833,1833}
temp	float	$tmp1028	 %read{1840,1840} %write{1836,1836}
temp	float	$tmp1029	 %read{1840,1840} %write{1839,1839}
temp	float	$tmp1030	 %read{1839,1839} %write{1838,1838}
temp	float	$tmp1031	 %read{1838,1838} %write{1837,1837}
temp	float	$tmp1032	 %read{1842,1842} %write{1840,1840}
temp	float	$tmp1033	 %read{1842,1842} %write{1841,1841}
temp	point	$tmp1034	 %read{1849,1849} %write{1848,1848}
temp	float	$tmp1035	 %read{1848,1848} %write{1845,1845}
temp	float	$tmp1036	 %read{1848,1848} %write{1846,1846}
temp	float	$tmp1037	 %read{1848,1848} %write{1847,1847}
temp	float	$tmp1038	 %read{1851,1851} %write{1850,1850}
temp	int	$tmp1039	 %read{1852,1852} %write{1851,1851}
temp	float	$tmp1040	 %read{1854,1854} %write{1853,1853}
temp	float	$tmp1041	 %read{1856,1856} %write{1855,1855}
temp	float	$tmp1042	 %read{1858,1858} %write{1857,1857}
temp	point	$tmp1043	 %read{1861,1861} %write{1860,1860}
temp	point	$tmp1044	 %read{1863,1863} %write{1862,1862}
temp	point	$tmp1045	 %read{1865,1865} %write{1864,1864}
temp	float	$tmp1046	 %read{1868,1868} %write{1867,1867}
temp	int	$tmp1047	 %read{1869,1869} %write{1868,1868}
temp	float	$tmp1048	 %read{1871,1871} %write{1870,1870}
temp	float	$tmp1049	 %read{1873,1873} %write{1872,1872}
temp	point	$tmp1050	 %read{1876,1876} %write{1875,1875}
temp	point	$tmp1051	 %read{1878,1878} %write{1877,1877}
temp	float	$tmp1052	 %read{1881,1881} %write{1880,1880}
temp	int	$tmp1053	 %read{1882,1882} %write{1881,1881}
temp	float	$tmp1054	 %read{1884,1884} %write{1883,1883}
temp	point	$tmp1055	 %read{1887,1887} %write{1886,1886}
temp	float	$tmp1056	 %read{1890,1890} %write{1889,1889}
temp	int	$tmp1057	 %read{1891,1891} %write{1890,1890}
temp	int	$tmp1058	 %read{2147483647,-1} %write{1894,1894}
temp	int	$tmp1059	 %read{2147483647,-1} %write{1896,1896}
temp	int	$tmp1060	 %read{2147483647,-1} %write{1898,1898}
temp	float	$tmp1061	 %read{1902,1902} %write{1901,1901}
temp	int	$tmp1062	 %read{1905,1905} %write{1904,1904}
temp	float	$tmp1063	 %read{2083,2083} %write{2082,2082}
temp	float	$tmp1064	 %read{1912,1912} %write{1911,1911}
temp	float	$tmp1065	 %read{1911,1911} %write{1910,1910}
temp	float	$tmp1066	 %read{1915,1915} %write{1914,1914}
temp	float	$tmp1067	 %read{1914,1914} %write{1913,1913}
temp	float	$tmp1068	 %read{1918,1918} %write{1917,1917}
temp	float	$tmp1069	 %read{1917,1917} %write{1916,1916}
temp	int	$tmp1070	 %read{1926,1926} %write{1925,1925}
temp	int	$tmp1071	 %read{1923,2079} %write{1923,2079}
temp	int	$tmp1072	 %read{1930,1930} %write{1929,1929}
temp	int	$tmp1073	 %read{1927,2077} %write{1927,2077}
temp	int	$tmp1074	 %read{1934,1934} %write{1933,1933}
temp	int	$tmp1075	 %read{1931,2075} %write{1931,2075}
temp	float	$tmp1076	 %read{1938,1938} %write{1935,1935}
temp	float	$tmp1077	 %read{1938,1938} %write{1936,1936}
temp	float	$tmp1078	 %read{1938,1938} %write{1937,1937}
temp	color	$tmp1079	 %read{1952,1952} %write{1951,1951}
temp	point	$tmp1080	 %read{1945,1945} %write{1944,1944}
temp	float	$tmp1081	 %read{1944,1944} %write{1941,1941}
temp	float	$tmp1082	 %read{1944,1944} %write{1942,1942}
temp	float	$tmp1083	 %read{1944,1944} %write{1943,1943}
temp	point	$tmp1084	 %read{1950,1950} %write{1949,1949}
temp	float	$tmp1085	 %read{1949,1949} %write{1946,1946}
temp	float	$tmp1086	 %read{1949,1949} %write{1947,1947}
temp	float	$tmp1087	 %read{1949,1949} %write{1948,1948}
temp	point	$tmp1088	 %read{1954,1954} %write{1953,1953}
temp	int	$tmp1089	 %read{1957,1957} %write{1956,1956}
temp	int	$tmp1090	 %read{1961,1961} %write{1960,1960}
temp	int	$tmp1091	 %read{1965,1965} %write{1964,1964}
temp	float	$tmp1092	 %read{1970,1970} %write{1967,1967}
temp	float	$tmp1093	 %read{1967,1967} %write{1966,1966}
temp	float	$tmp1094	 %read{1970,1970} %write{1969,1969}
temp	float	$tmp1095	 %read{1969,1969} %write{1968,1968}
temp	float	$tmp1096	 %read{1973,1973} %write{1970,1970}
temp	float	$tmp1097	 %read{1973,1973} %write{1972,1972}
temp	float	$tmp1098	 %read{1972,1972} %write{1971,1971}
temp	int	$tmp1099	 %read{1976,1976} %write{1975,1975}
temp	float	$tmp1100	 %read{1984,1984} %write{1978,1978}
temp	float	$tmp1101	 %read{1978,1978} %write{1977,1977}
temp	float	$tmp1102	 %read{1984,1984} %write{1983,1983}
temp	float	$tmp1103	 %read{1983,1983} %write{1980,1980}
temp	float	$tmp1104	 %read{1980,1980} %write{1979,1979}
temp	float	$tmp1105	 %read{1983,1983} %write{1982,1982}
temp	float	$tmp1106	 %read{1982,1982} %write{1981,1981}
temp	int	$tmp1107	 %read{1987,1987} %write{1986,1986}
temp	float	$tmp1108	 %read{1994,1994} %write{1990,1990}
temp	float	$tmp1109	 %read{1990,1990} %write{1989,1989}
temp	float	$tmp1110	 %read{1989,1989} %write{1988,1988}
temp	float	$tmp1111	 %read{1994,1994} %write{1993,1993}
temp	float	$tmp1112	 %read{1993,1993} %write{1992,1992}
temp	float	$tmp1113	 %read{1992,1992} %write{1991,1991}
temp	float	$tmp1114	 %read{1998,1998} %write{1994,1994}
temp	float	$tmp1115	 %read{1998,1998} %write{1997,1997}
temp	float	$tmp1116	 %read{1997,1997} %write{1996,1996}
temp	float	$tmp1117	 %read{1996,1996} %write{1995,1995}
temp	int	$tmp1118	 %read{2001,2001} %write{2000,2000}
temp	float	$tmp1119	 %read{2006,2006} %write{2005,2005}
temp	float	$tmp1120	 %read{2005,2005} %write{2004,2004}
temp	vector	$tmp1121	 %read{2004,2004} %write{2002,2002}
temp	vector	$tmp1122	 %read{2004,2004} %write{2003,2003}
temp	int	$tmp1123	 %read{2009,2009} %write{2008,2008}
temp	float	$tmp1124	 %read{2016,2016} %write{2012,2012}
temp	float	$tmp1125	 %read{2012,2012} %write{2011,2011}
temp	float	$tmp1126	 %read{2011,2011} %write{2010,2010}
temp	float	$tmp1127	 %read{2016,2016} %write{2015,2015}
temp	float	$tmp1128	 %read{2015,2015} %write{2014,2014}
temp	float	$tmp1129	 %read{2014,2014} %write{2013,2013}
temp	float	$tmp1130	 %read{2020,2020} %write{2016,2016}
temp	float	$tmp1131	 %read{2020,2020} %write{2019,2019}
temp	float	$tmp1132	 %read{2019,2019} %write{2018,2018}
temp	float	$tmp1133	 %read{2018,2018} %write{2017,2017}
temp	float	$tmp1134	 %read{2022,2022} %write{2020,2020}
temp	float	$tmp1135	 %read{2022,2022} %write{2021,2021}
temp	point	$tmp1136	 %read{2029,2029} %write{2028,2028}
temp	float	$tmp1137	 %read{2028,2028} %write{2025,2025}
temp	float	$tmp1138	 %read{2028,2028} %write{2026,2026}
temp	float	$tmp1139	 %read{2028,2028} %write{2027,2027}
temp	float	$tmp1140	 %read{2031,2031} %write{2030,2030}
temp	int	$tmp1141	 %read{2032,2032} %write{2031,2031}
temp	float	$tmp1142	 %read{2034,2034} %write{2033,2033}
temp	float	$tmp1143	 %read{2036,2036} %write{2035,2035}
temp	float	$tmp1144	 %read{2038,2038} %write{2037,2037}
temp	point	$tmp1145	 %read{2041,2041} %write{2040,2040}
temp	point	$tmp1146	 %read{2043,2043} %write{2042,2042}
temp	point	$tmp1147	 %read{2045,2045} %write{2044,2044}
temp	float	$tmp1148	 %read{2048,2048} %write{2047,2047}
temp	int	$tmp1149	 %read{2049,2049} %write{2048,2048}
temp	float	$tmp1150	 %read{2051,2051} %write{2050,2050}
temp	float	$tmp1151	 %read{2053,2053} %write{2052,2052}
temp	point	$tmp1152	 %read{2056,2056} %write{2055,2055}
temp	point	$tmp1153	 %read{2058,2058} %write{2057,2057}
temp	float	$tmp1154	 %read{2061,2061} %write{2060,2060}
temp	int	$tmp1155	 %read{2062,2062} %write{2061,2061}
temp	float	$tmp1156	 %read{2064,2064} %write{2063,2063}
temp	point	$tmp1157	 %read{2067,2067} %write{2066,2066}
temp	float	$tmp1158	 %read{2070,2070} %write{2069,2069}
temp	int	$tmp1159	 %read{2071,2071} %write{2070,2070}
temp	int	$tmp1160	 %read{2147483647,-1} %write{2074,2074}
temp	int	$tmp1161	 %read{2147483647,-1} %write{2076,2076}
temp	int	$tmp1162	 %read{2147483647,-1} %write{2078,2078}
temp	float	$tmp1163	 %read{2082,2082} %write{2080,2080}
temp	float	$tmp1164	 %read{2082,2082} %write{2081,2081}
temp	float	$tmp1165	 %read{2084,2084} %write{2083,2083}
temp	int	$tmp1166	 %read{2087,2087} %write{2086,2086}
temp	float	$tmp1167	 %read{2272,2272} %write{2269,2270}
temp	float	$tmp1168	 %read{2266,2266} %write{2265,2265}
temp	float	$tmp1169	 %read{2095,2095} %write{2094,2094}
temp	float	$tmp1170	 %read{2094,2094} %write{2093,2093}
temp	float	$tmp1171	 %read{2098,2098} %write{2097,2097}
temp	float	$tmp1172	 %read{2097,2097} %write{2096,2096}
temp	float	$tmp1173	 %read{2101,2101} %write{2100,2100}
temp	float	$tmp1174	 %read{2100,2100} %write{2099,2099}
temp	int	$tmp1175	 %read{2109,2109} %write{2108,2108}
temp	int	$tmp1176	 %read{2106,2262} %write{2106,2262}
temp	int	$tmp1177	 %read{2113,2113} %write{2112,2112}
temp	int	$tmp1178	 %read{2110,2260} %write{2110,2260}
temp	int	$tmp1179	 %read{2117,2117} %write{2116,2116}
temp	int	$tmp1180	 %read{2114,2258} %write{2114,2258}
temp	float	$tmp1181	 %read{2121,2121} %write{2118,2118}
temp	float	$tmp1182	 %read{2121,2121} %write{2119,2119}
temp	float	$tmp1183	 %read{2121,2121} %write{2120,2120}
temp	color	$tmp1184	 %read{2135,2135} %write{2134,2134}
temp	point	$tmp1185	 %read{2128,2128} %write{2127,2127}
temp	float	$tmp1186	 %read{2127,2127} %write{2124,2124}
temp	float	$tmp1187	 %read{2127,2127} %write{2125,2125}
temp	float	$tmp1188	 %read{2127,2127} %write{2126,2126}
temp	point	$tmp1189	 %read{2133,2133} %write{2132,2132}
temp	float	$tmp1190	 %read{2132,2132} %write{2129,2129}
temp	float	$tmp1191	 %read{2132,2132} %write{2130,2130}
temp	float	$tmp1192	 %read{2132,2132} %write{2131,2131}
temp	point	$tmp1193	 %read{2137,2137} %write{2136,2136}
temp	int	$tmp1194	 %read{2140,2140} %write{2139,2139}
temp	int	$tmp1195	 %read{2144,2144} %write{2143,2143}
temp	int	$tmp1196	 %read{2148,2148} %write{2147,2147}
temp	float	$tmp1197	 %read{2153,2153} %write{2150,2150}
temp	float	$tmp1198	 %read{2150,2150} %write{2149,2149}
temp	float	$tmp1199	 %read{2153,2153} %write{2152,2152}
temp	float	$tmp1200	 %read{2152,2152} %write{2151,2151}
temp	float	$tmp1201	 %read{2156,2156} %write{2153,2153}
temp	float	$tmp1202	 %read{2156,2156} %write{2155,2155}
temp	float	$tmp1203	 %read{2155,2155} %write{2154,2154}
temp	int	$tmp1204	 %read{2159,2159} %write{2158,2158}
temp	float	$tmp1205	 %read{2167,2167} %write{2161,2161}
temp	float	$tmp1206	 %read{2161,2161} %write{2160,2160}
temp	float	$tmp1207	 %read{2167,2167} %write{2166,2166}
temp	float	$tmp1208	 %read{2166,2166} %write{2163,2163}
temp	float	$tmp1209	 %read{2163,2163} %write{2162,2162}
temp	float	$tmp1210	 %read{2166,2166} %write{2165,2165}
temp	float	$tmp1211	 %read{2165,2165} %write{2164,2164}
temp	int	$tmp1212	 %read{2170,2170} %write{2169,2169}
temp	float	$tmp1213	 %read{2177,2177} %write{2173,2173}
temp	float	$tmp1214	 %read{2173,2173} %write{2172,2172}
temp	float	$tmp1215	 %read{2172,2172} %write{2171,2171}
temp	float	$tmp1216	 %read{2177,2177} %write{2176,2176}
temp	float	$tmp1217	 %read{2176,2176} %write{2175,2175}
temp	float	$tmp1218	 %read{2175,2175} %write{2174,2174}
temp	float	$tmp1219	 %read{2181,2181} %write{2177,2177}
temp	float	$tmp1220	 %read{2181,2181} %write{2180,2180}
temp	float	$tmp1221	 %read{2180,2180} %write{2179,2179}
temp	float	$tmp1222	 %read{2179,2179} %write{2178,2178}
temp	int	$tmp1223	 %read{2184,2184} %write{2183,2183}
temp	float	$tmp1224	 %read{2189,2189} %write{2188,2188}
temp	float	$tmp1225	 %read{2188,2188} %write{2187,2187}
temp	vector	$tmp1226	 %read{2187,2187} %write{2185,2185}
temp	vector	$tmp1227	 %read{2187,2187} %write{2186,2186}
temp	int	$tmp1228	 %read{2192,2192} %write{2191,2191}
temp	float	$tmp1229	 %read{2199,2199} %write{2195,2195}
temp	float	$tmp1230	 %read{2195,2195} %write{2194,2194}
temp	float	$tmp1231	 %read{2194,2194} %write{2193,2193}
temp	float	$tmp1232	 %read{2199,2199} %write{2198,2198}
temp	float	$tmp1233	 %read{2198,2198} %write{2197,2197}
temp	float	$tmp1234	 %read{2197,2197} %write{2196,2196}
temp	float	$tmp1235	 %read{2203,2203} %write{2199,2199}
temp	float	$tmp1236	 %read{2203,2203} %write{2202,2202}
temp	float	$tmp1237	 %read{2202,2202} %write{2201,2201}
temp	float	$tmp1238	 %read{2201,2201} %write{2200,2200}
temp	float	$tmp1239	 %read{2205,2205} %write{2203,2203}
temp	float	$tmp1240	 %read{2205,2205} %write{2204,2204}
temp	point	$tmp1241	 %read{2212,2212} %write{2211,2211}
temp	float	$tmp1242	 %read{2211,2211} %write{2208,2208}
temp	float	$tmp1243	 %read{2211,2211} %write{2209,2209}
temp	float	$tmp1244	 %read{2211,2211} %write{2210,2210}
temp	float	$tmp1245	 %read{2214,2214} %write{2213,2213}
temp	int	$tmp1246	 %read{2215,2215} %write{2214,2214}
temp	float	$tmp1247	 %read{2217,2217} %write{2216,2216}
temp	float	$tmp1248	 %read{2219,2219} %write{2218,2218}
temp	float	$tmp1249	 %read{2221,2221} %write{2220,2220}
temp	point	$tmp1250	 %read{2224,2224} %write{2223,2223}
temp	point	$tmp1251	 %read{2226,2226} %write{2225,2225}
temp	point	$tmp1252	 %read{2228,2228} %write{2227,2227}
temp	float	$tmp1253	 %read{2231,2231} %write{2230,2230}
temp	int	$tmp1254	 %read{2232,2232} %write{2231,2231}
temp	float	$tmp1255	 %read{2234,2234} %write{2233,2233}
temp	float	$tmp1256	 %read{2236,2236} %write{2235,2235}
temp	point	$tmp1257	 %read{2239,2239} %write{2238,2238}
temp	point	$tmp1258	 %read{2241,2241} %write{2240,2240}
temp	float	$tmp1259	 %read{2244,2244} %write{2243,2243}
temp	int	$tmp1260	 %read{2245,2245} %write{2244,2244}
temp	float	$tmp1261	 %read{2247,2247} %write{2246,2246}
temp	point	$tmp1262	 %read{2250,2250} %write{2249,2249}
temp	float	$tmp1263	 %read{2253,2253} %write{2252,2252}
temp	int	$tmp1264	 %read{2254,2254} %write{2253,2253}
temp	int	$tmp1265	 %read{2147483647,-1} %write{2257,2257}
temp	int	$tmp1266	 %read{2147483647,-1} %write{2259,2259}
temp	int	$tmp1267	 %read{2147483647,-1} %write{2261,2261}
temp	float	$tmp1268	 %read{2265,2265} %write{2263,2263}
temp	float	$tmp1269	 %read{2265,2265} %write{2264,2264}
temp	int	$tmp1270	 %read{2268,2268} %write{2267,2267}
temp	float	$tmp1271	 %read{2273,2273} %write{2272,2272}
temp	int	$tmp1272	 %read{2276,2276} %write{2275,2275}
temp	float	$tmp1273	 %read{2282,2282} %write{2281,2281}
temp	float	$tmp1274	 %read{2283,2283} %write{2282,2282}
temp	float	$tmp1275	 %read{2285,2285} %write{2284,2284}
temp	int	$tmp1276	 %read{2287,2287} %write{2286,2286}
temp	float	$tmp1277	 %read{2292,2292} %write{2287,2287}
temp	int	$tmp1278	 %read{2289,2289} %write{2288,2288}
temp	int	$tmp1279	 %read{2290,2290} %write{2289,2289}
temp	int	$tmp1280	 %read{2291,2291} %write{2290,2290}
temp	float	$tmp1281	 %read{2292,2292} %write{2291,2291}
temp	float	$tmp1282	 %read{2293,2293} %write{2292,2292}
temp	int	$tmp1283	 %read{2295,2295} %write{2294,2294}
temp	int	$tmp1284	 %read{2296,2296} %write{2295,2295}
temp	float	$tmp1285	 %read{2301,2301} %write{2296,2296}
temp	int	$tmp1286	 %read{2298,2298} %write{2297,2297}
temp	int	$tmp1287	 %read{2299,2299} %write{2298,2298}
temp	int	$tmp1288	 %read{2300,2300} %write{2299,2299}
temp	float	$tmp1289	 %read{2301,2301} %write{2300,2300}
temp	float	$tmp1290	 %read{2302,2302} %write{2301,2301}
temp	float	$tmp1291	 %read{2304,2304} %write{2303,2303}
temp	float	$tmp1292	 %read{2306,2306} %write{2304,2304}
temp	float	$tmp1293	 %read{2306,2306} %write{2305,2305}
temp	int	$tmp1294	 %read{2309,2309} %write{2308,2308}
temp	float	$tmp1295	 %read{2314,2314} %write{2309,2309}
temp	int	$tmp1296	 %read{2311,2311} %write{2310,2310}
temp	int	$tmp1297	 %read{2312,2312} %write{2311,2311}
temp	int	$tmp1298	 %read{2313,2313} %write{2312,2312}
temp	float	$tmp1299	 %read{2314,2314} %write{2313,2313}
temp	float	$tmp1300	 %read{2315,2315} %write{2314,2314}
temp	float	$tmp1301	 %read{2319,2319} %write{2318,2318}
const	string	$const53	"Sine"		 %read{2321,2340} %write{2147483647,-1}
const	string	$const54	"noise_wave"		 %read{2320,2320} %write{2147483647,-1}
temp	int	$tmp1302	 %read{2322,2322} %write{2321,2321}
temp	float	$tmp1303	 %read{2324,2324} %write{2323,2323}
temp	float	$tmp1304	 %read{2325,2325} %write{2324,2324}
const	string	$const55	"Saw"		 %read{2327,2327} %write{2147483647,-1}
temp	int	$tmp1305	 %read{2328,2328} %write{2327,2327}
const	float	$const56	3.1415927		 %read{2329,2342} %write{2147483647,-1}
temp	float	$tmp1306	 %read{2331,2331} %write{2330,2330}
temp	float	$tmp1307	 %read{2334,2334} %write{2333,2333}
temp	float	$tmp1308	 %read{2333,2333} %write{2332,2332}
temp	int	$tmp1309	 %read{2336,2336} %write{2335,2335}
const	string	$const57	"Tri"		 %read{2340,2340} %write{2147483647,-1}
temp	int	$tmp1310	 %read{2341,2341} %write{2340,2340}
temp	float	$tmp1311	 %read{2352,2352} %write{2351,2351}
temp	float	$tmp1312	 %read{2350,2350} %write{2347,2347}
temp	float	$tmp1313	 %read{2345,2345} %write{2344,2344}
temp	float	$tmp1314	 %read{2346,2346} %write{2345,2345}
temp	float	$tmp1315	 %read{2347,2347} %write{2346,2346}
temp	float	$tmp1316	 %read{2349,2349} %write{2348,2348}
temp	float	$tmp1317	 %read{2350,2350} %write{2349,2349}
temp	float	$tmp1318	 %read{2351,2351} %write{2350,2350}
temp	float	$tmp1319	 %read{2353,2353} %write{2352,2352}
code Vector
# intern/cycles/kernel/shaders/node_wave_texture.osl:53
# 	point Vector = P,
	assign		Vector P 	%filename{"intern/cycles/kernel/shaders/node_wave_texture.osl"} %line{53} %argrw{"wr"}
code ___main___
# intern/cycles/kernel/shaders/node_wave_texture.osl:57
# 	point p = Vector;
	assign		p Vector 	%filename{"intern/cycles/kernel/shaders/node_wave_texture.osl"} %line{57} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:59
# 	if (use_mapping)
	if		use_mapping 4 4 	%line{59} %argrw{"r"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:60
# 		p = transform(mapping, p);
	transform	p mapping p 	%line{60} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:62
# 	Fac = wave(p, Scale, Type, Detail, Distortion, DetailScale);
	functioncall	$const1 2356 	%line{62} %argrw{"r"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:26
# 	float x = p[0] * scale;
	compref		$tmp1 p $const2 	%line{26} %argrw{"wrr"}
	mul		___646_x $tmp1 Scale 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:27
# 	float y = p[1] * scale;
	compref		$tmp2 p $const3 	%line{27} %argrw{"wrr"}
	mul		___646_y $tmp2 Scale 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:28
# 	float z = p[2] * scale;
	compref		$tmp3 p $const4 	%line{28} %argrw{"wrr"}
	mul		___646_z $tmp3 Scale 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:30
# 	float n = 0.0;
	assign		___646_n $const5 	%line{30} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:32
# 	if (type == "Bands") {
	eq		$tmp4 Type $const6 	%line{32} %argrw{"wrr"}
	if		$tmp4 17 26 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:33
# 		n = (x + y + z) * 10.0;
	add		$tmp5 ___646_x ___646_y 	%line{33} %argrw{"wrr"}
	add		$tmp6 $tmp5 ___646_z 	%argrw{"wrr"}
	mul		___646_n $tmp6 $const7 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:35
# 	else if (type == "Rings") {
	eq		$tmp7 Type $const8 	%line{35} %argrw{"wrr"}
	if		$tmp7 26 26 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:36
# 		n = (sqrt(x * x + y * y + z * z) * 20.0);
	mul		$tmp9 ___646_x ___646_x 	%line{36} %argrw{"wrr"}
	mul		$tmp10 ___646_y ___646_y 	%argrw{"wrr"}
	add		$tmp11 $tmp9 $tmp10 	%argrw{"wrr"}
	mul		$tmp12 ___646_z ___646_z 	%argrw{"wrr"}
	add		$tmp13 $tmp11 $tmp12 	%argrw{"wrr"}
	sqrt		$tmp8 $tmp13 	%argrw{"wr"}
	mul		___646_n $tmp8 $const9 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:39
# 	if (distortion != 0.0) {
	neq		$tmp14 Distortion $const5 	%line{39} %argrw{"wrr"}
	if		$tmp14 2320 2320 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:40
# 		n = n + (distortion * noise_turbulence(p * dscale, "Perlin", detail, 0));
	mul		$tmp16 p DetailScale 	%line{40} %argrw{"wrr"}
	functioncall	$const11 2318 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:230
# 	return 0.0;
	assign		___640_fscale $const12 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{230} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:231
# }
	assign		___640_amp $const12 	%line{231} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:232
# 
	assign		___640_sum $const5 	%line{232} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:235
# float noise_basis_hard(point p, string basis, int hard)
	functioncall	$const14 36 	%line{235} %argrw{"r"}
# intern/cycles/kernel/shaders/stdosl.h:142
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp17 Detail $const13 	%filename{"intern/cycles/kernel/shaders/stdosl.h"} %line{142} %argrw{"wrr"}
	max		___640_octaves $tmp17 $const5 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:236
# 				else if (d < da[2]) {
	assign		___640_n ___640_octaves 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{236} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:238
# 					da[2] = d;
	for		$tmp18 39 40 1161 1163 	%line{238} %argrw{"r"}
	assign		___640_i $const2 	%argrw{"wr"}
	le		$tmp18 ___640_i ___640_n 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:239
# 
	mul		$tmp19 ___640_fscale $tmp16 	%line{239} %argrw{"wrr"}
	functioncall	$const15 1153 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:173
# 	if (basis == "Perlin")
	eq		$tmp20 $const10 $const10 	%line{173} %argrw{"wrr"}
	if		$tmp20 57 57 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:174
# 		return safe_noise(p, 1);
	functioncall	$const16 56 	%line{174} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:154
# 	float f = 0.0;
	assign		___633_f $const5 	%line{154} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:157
# 	if (type == 0)
	eq		$tmp21 $const3 $const2 	%line{157} %argrw{"wrr"}
	if		$tmp21 49 50 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:158
# 		f = noise("perlin", p);
	noise		___633_f $const17 $tmp19 	%line{158} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:162
# 		f = noise(p);
	noise		___633_f $tmp19 	%line{162} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:165
# 	if (!isfinite(f))
	isfinite	$tmp22 ___633_f 	%line{165} %argrw{"wr"}
	eq		$tmp23 $tmp22 $const2 	%argrw{"wrr"}
	if		$tmp23 55 55 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:166
# 		return 0.5;
	assign		___642_t $const18 	%line{166} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:168
# 	return f;
	assign		___642_t ___633_f 	%line{168} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:174
# 		return safe_noise(p, 1);
	return	%line{174}
# intern/cycles/kernel/shaders/node_texture.h:175
# 	if (basis == "Voronoi F1")
	eq		$tmp24 $const10 $const19 	%line{175} %argrw{"wrr"}
	if		$tmp24 237 237 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:176
# 		return voronoi_F1S(p);
	functioncall	$const20 236 	%line{176} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:143
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	functioncall	$const22 234 	%line{143} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:130
# float voronoi_F1(point p) { return voronoi_Fn(p, 0); }
	functioncall	$const23 234 	%line{130} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:115
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const25 233 	%line{115} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:55
# 	xi = (int)floor(p[0]);
	compref		$tmp27 $tmp19 $const2 	%line{55} %argrw{"wrr"}
	floor		$tmp26 $tmp27 	%argrw{"wr"}
	assign		___608_xi $tmp26 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:56
# 	yi = (int)floor(p[1]);
	compref		$tmp29 $tmp19 $const3 	%line{56} %argrw{"wrr"}
	floor		$tmp28 $tmp29 	%argrw{"wr"}
	assign		___608_yi $tmp28 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	zi = (int)floor(p[2]);
	compref		$tmp31 $tmp19 $const4 	%line{57} %argrw{"wrr"}
	floor		$tmp30 $tmp31 	%argrw{"wr"}
	assign		___608_zi $tmp30 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	da[0] = 1e10;
	aassign		___619_da $const2 $const26 	%line{59} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:60
# 	da[1] = 1e10;
	aassign		___619_da $const3 $const26 	%line{60} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[2] = 1e10;
	aassign		___619_da $const4 $const26 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[3] = 1e10;
	aassign		___619_da $const27 $const26 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp33 78 80 231 233 	%line{64} %argrw{"r"}
	sub		___608_xx ___608_xi $const3 	%argrw{"wrr"}
	add		$tmp32 ___608_xi $const3 	%argrw{"wrr"}
	le		$tmp33 ___608_xx $tmp32 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp35 82 84 229 231 	%line{65} %argrw{"r"}
	sub		___608_yy ___608_yi $const3 	%argrw{"wrr"}
	add		$tmp34 ___608_yi $const3 	%argrw{"wrr"}
	le		$tmp35 ___608_yy $tmp34 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp37 86 88 227 229 	%line{66} %argrw{"r"}
	sub		___608_zz ___608_zi $const3 	%argrw{"wrr"}
	add		$tmp36 ___608_zi $const3 	%argrw{"wrr"}
	le		$tmp37 ___608_zz $tmp36 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 				point ip = point(xx, yy, zz);
	assign		$tmp38 ___608_xx 	%line{67} %argrw{"wr"}
	assign		$tmp39 ___608_yy 	%argrw{"wr"}
	assign		$tmp40 ___608_zz 	%argrw{"wr"}
	point		___614_ip $tmp38 $tmp39 $tmp40 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const28 105 	%line{68} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:43
# 	float r = cellnoise(p);
	cellnoise	___607_r ___614_ip 	%line{43} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:44
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp43 ___614_ip $const3 	%line{44} %argrw{"wrr"}
	compref		$tmp44 ___614_ip $const2 	%argrw{"wrr"}
	compref		$tmp45 ___614_ip $const4 	%argrw{"wrr"}
	point		$tmp42 $tmp43 $tmp44 $tmp45 	%argrw{"wrrr"}
	cellnoise	___607_g $tmp42 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp47 ___614_ip $const3 	%line{45} %argrw{"wrr"}
	compref		$tmp48 ___614_ip $const4 	%argrw{"wrr"}
	compref		$tmp49 ___614_ip $const2 	%argrw{"wrr"}
	point		$tmp46 $tmp47 $tmp48 $tmp49 	%argrw{"wrrr"}
	cellnoise	___607_b $tmp46 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	return color(r, g, b);
	color		$tmp41 ___607_r ___607_g ___607_b 	%line{47} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	assign		___614_vp $tmp41 	%line{68} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point pd = p - (vp + ip);
	add		$tmp50 ___614_vp ___614_ip 	%line{69} %argrw{"wrr"}
	sub		___614_pd $tmp19 $tmp50 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const29 178 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	if (distance_metric == "Distance Squared")
	eq		$tmp51 $const24 $const24 	%line{21} %argrw{"wrr"}
	if		$tmp51 113 113 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:22
# 		return dot(d, d);
	dot		___614_d ___614_pd ___614_pd 	%line{22} %argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Actual Distance")
	eq		$tmp52 $const24 $const30 	%line{23} %argrw{"wrr"}
	if		$tmp52 117 117 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		return length(d);
	length		___614_d ___614_pd 	%line{24} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Manhattan")
	eq		$tmp53 $const24 $const31 	%line{25} %argrw{"wrr"}
	if		$tmp53 128 128 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		return fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp55 ___614_pd $const2 	%line{26} %argrw{"wrr"}
	fabs		$tmp54 $tmp55 	%argrw{"wr"}
	compref		$tmp57 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp56 $tmp57 	%argrw{"wr"}
	add		$tmp58 $tmp54 $tmp56 	%argrw{"wrr"}
	compref		$tmp60 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp59 $tmp60 	%argrw{"wr"}
	add		___614_d $tmp58 $tmp59 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Chebychev")
	eq		$tmp61 $const24 $const32 	%line{27} %argrw{"wrr"}
	if		$tmp61 139 139 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		return max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp63 ___614_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp62 $tmp63 	%argrw{"wr"}
	compref		$tmp66 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp65 $tmp66 	%argrw{"wr"}
	compref		$tmp68 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp67 $tmp68 	%argrw{"wr"}
	max		$tmp64 $tmp65 $tmp67 	%argrw{"wrr"}
	max		___614_d $tmp62 $tmp64 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp69 $const24 $const33 	%line{29} %argrw{"wrr"}
	if		$tmp69 153 153 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		return sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp72 ___614_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp71 $tmp72 	%argrw{"wr"}
	sqrt		$tmp70 $tmp71 	%argrw{"wr"}
	compref		$tmp75 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp74 $tmp75 	%argrw{"wr"}
	sqrt		$tmp73 $tmp74 	%argrw{"wr"}
	add		$tmp76 $tmp70 $tmp73 	%argrw{"wrr"}
	compref		$tmp79 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp78 $tmp79 	%argrw{"wr"}
	sqrt		$tmp77 $tmp78 	%argrw{"wr"}
	add		___614_d $tmp76 $tmp77 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp80 $const24 $const34 	%line{31} %argrw{"wrr"}
	if		$tmp80 161 161 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		return sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp83 ___614_pd ___614_pd 	%line{32} %argrw{"wrr"}
	mul		$tmp84 ___614_pd ___614_pd 	%argrw{"wrr"}
	dot		$tmp82 $tmp83 $tmp84 	%argrw{"wrr"}
	sqrt		$tmp81 $tmp82 	%argrw{"wr"}
	sqrt		___614_d $tmp81 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky")
	eq		$tmp85 $const24 $const35 	%line{33} %argrw{"wrr"}
	if		$tmp85 177 177 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		return pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp88 ___614_pd $const2 	%line{34} %argrw{"wrr"}
	fabs		$tmp87 $tmp88 	%argrw{"wr"}
	pow		$tmp86 $tmp87 $const5 	%argrw{"wrr"}
	compref		$tmp91 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp90 $tmp91 	%argrw{"wr"}
	pow		$tmp89 $tmp90 $const5 	%argrw{"wrr"}
	add		$tmp92 $tmp86 $tmp89 	%argrw{"wrr"}
	compref		$tmp95 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp94 $tmp95 	%argrw{"wr"}
	pow		$tmp93 $tmp94 $const5 	%argrw{"wrr"}
	add		$tmp96 $tmp92 $tmp93 	%argrw{"wrr"}
	div		$tmp97 $const12 $const5 	%argrw{"wrr"}
	pow		___614_d $tmp96 $tmp97 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:36
# 	return 0.0;
	assign		___614_d $const5 	%line{36} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				vp += point(xx, yy, zz);
	assign		$tmp99 ___608_xx 	%line{72} %argrw{"wr"}
	assign		$tmp100 ___608_yy 	%argrw{"wr"}
	assign		$tmp101 ___608_zz 	%argrw{"wr"}
	point		$tmp98 $tmp99 $tmp100 $tmp101 	%argrw{"wrrr"}
	add		___614_vp ___614_vp $tmp98 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				if (d < da[0]) {
	aref		$tmp102 ___619_da $const2 	%line{74} %argrw{"wrr"}
	lt		$tmp103 ___614_d $tmp102 	%argrw{"wrr"}
	if		$tmp103 200 227 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:75
# 					da[3] = da[2];
	aref		$tmp104 ___619_da $const4 	%line{75} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp104 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 					da[2] = da[1];
	aref		$tmp105 ___619_da $const3 	%line{76} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp105 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[1] = da[0];
	aref		$tmp106 ___619_da $const2 	%line{77} %argrw{"wrr"}
	aassign		___619_da $const3 $tmp106 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[0] = d;
	aassign		___619_da $const2 ___614_d 	%line{78} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					pa[3] = pa[2];
	aref		$tmp107 ___619_pa $const4 	%line{80} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp107 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:81
# 					pa[2] = pa[1];
	aref		$tmp108 ___619_pa $const3 	%line{81} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp108 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[1] = pa[0];
	aref		$tmp109 ___619_pa $const2 	%line{82} %argrw{"wrr"}
	aassign		___619_pa $const3 $tmp109 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[0] = vp;
	aassign		___619_pa $const2 ___614_vp 	%line{83} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 				else if (d < da[1]) {
	aref		$tmp110 ___619_da $const3 	%line{85} %argrw{"wrr"}
	lt		$tmp111 ___614_d $tmp110 	%argrw{"wrr"}
	if		$tmp111 213 227 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:86
# 					da[3] = da[2];
	aref		$tmp112 ___619_da $const4 	%line{86} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp112 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 					da[2] = da[1];
	aref		$tmp113 ___619_da $const3 	%line{87} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp113 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[1] = d;
	aassign		___619_da $const3 ___614_d 	%line{88} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					pa[3] = pa[2];
	aref		$tmp114 ___619_pa $const4 	%line{90} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp114 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:91
# 					pa[2] = pa[1];
	aref		$tmp115 ___619_pa $const3 	%line{91} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp115 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[1] = vp;
	aassign		___619_pa $const3 ___614_vp 	%line{92} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 				else if (d < da[2]) {
	aref		$tmp116 ___619_da $const4 	%line{94} %argrw{"wrr"}
	lt		$tmp117 ___614_d $tmp116 	%argrw{"wrr"}
	if		$tmp117 222 227 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:95
# 					da[3] = da[2];
	aref		$tmp118 ___619_da $const4 	%line{95} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp118 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 					da[2] = d;
	aassign		___619_da $const4 ___614_d 	%line{96} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					pa[3] = pa[2];
	aref		$tmp119 ___619_pa $const4 	%line{98} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp119 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:99
# 					pa[2] = vp;
	aassign		___619_pa $const4 ___614_vp 	%line{99} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 				else if (d < da[3]) {
	aref		$tmp120 ___619_da $const27 	%line{101} %argrw{"wrr"}
	lt		$tmp121 ___614_d $tmp120 	%argrw{"wrr"}
	if		$tmp121 227 227 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:102
# 					da[3] = d;
	aassign		___619_da $const27 ___614_d 	%line{102} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 					pa[3] = vp;
	aassign		___619_pa $const27 ___614_vp 	%line{103} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp122 ___608_zz 	%line{66} %argrw{"wr"}
	add		___608_zz ___608_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp123 ___608_yy 	%line{65} %argrw{"wr"}
	add		___608_yy ___608_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp124 ___608_xx 	%line{64} %argrw{"wr"}
	add		___608_xx ___608_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	return da[n];
	aref		$tmp25 ___619_da $const2 	%line{117} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:143
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	mul		$tmp125 $const21 $tmp25 	%line{143} %argrw{"wrr"}
	sub		___642_t $tmp125 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:176
# 		return voronoi_F1S(p);
	return	%line{176}
# intern/cycles/kernel/shaders/node_texture.h:177
# 	if (basis == "Voronoi F2")
	eq		$tmp126 $const10 $const36 	%line{177} %argrw{"wrr"}
	if		$tmp126 417 417 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:178
# 		return voronoi_F2S(p);
	functioncall	$const37 416 	%line{178} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:144
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	functioncall	$const38 414 	%line{144} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:131
# float voronoi_F2(point p) { return voronoi_Fn(p, 1); }
	functioncall	$const23 414 	%line{131} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:115
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const25 413 	%line{115} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:55
# 	xi = (int)floor(p[0]);
	compref		$tmp129 $tmp19 $const2 	%line{55} %argrw{"wrr"}
	floor		$tmp128 $tmp129 	%argrw{"wr"}
	assign		___608_xi $tmp128 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:56
# 	yi = (int)floor(p[1]);
	compref		$tmp131 $tmp19 $const3 	%line{56} %argrw{"wrr"}
	floor		$tmp130 $tmp131 	%argrw{"wr"}
	assign		___608_yi $tmp130 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	zi = (int)floor(p[2]);
	compref		$tmp133 $tmp19 $const4 	%line{57} %argrw{"wrr"}
	floor		$tmp132 $tmp133 	%argrw{"wr"}
	assign		___608_zi $tmp132 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	da[0] = 1e10;
	aassign		___619_da $const2 $const26 	%line{59} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:60
# 	da[1] = 1e10;
	aassign		___619_da $const3 $const26 	%line{60} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[2] = 1e10;
	aassign		___619_da $const4 $const26 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[3] = 1e10;
	aassign		___619_da $const27 $const26 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp135 258 260 411 413 	%line{64} %argrw{"r"}
	sub		___608_xx ___608_xi $const3 	%argrw{"wrr"}
	add		$tmp134 ___608_xi $const3 	%argrw{"wrr"}
	le		$tmp135 ___608_xx $tmp134 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp137 262 264 409 411 	%line{65} %argrw{"r"}
	sub		___608_yy ___608_yi $const3 	%argrw{"wrr"}
	add		$tmp136 ___608_yi $const3 	%argrw{"wrr"}
	le		$tmp137 ___608_yy $tmp136 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp139 266 268 407 409 	%line{66} %argrw{"r"}
	sub		___608_zz ___608_zi $const3 	%argrw{"wrr"}
	add		$tmp138 ___608_zi $const3 	%argrw{"wrr"}
	le		$tmp139 ___608_zz $tmp138 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 				point ip = point(xx, yy, zz);
	assign		$tmp140 ___608_xx 	%line{67} %argrw{"wr"}
	assign		$tmp141 ___608_yy 	%argrw{"wr"}
	assign		$tmp142 ___608_zz 	%argrw{"wr"}
	point		___614_ip $tmp140 $tmp141 $tmp142 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const28 285 	%line{68} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:43
# 	float r = cellnoise(p);
	cellnoise	___607_r ___614_ip 	%line{43} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:44
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp145 ___614_ip $const3 	%line{44} %argrw{"wrr"}
	compref		$tmp146 ___614_ip $const2 	%argrw{"wrr"}
	compref		$tmp147 ___614_ip $const4 	%argrw{"wrr"}
	point		$tmp144 $tmp145 $tmp146 $tmp147 	%argrw{"wrrr"}
	cellnoise	___607_g $tmp144 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp149 ___614_ip $const3 	%line{45} %argrw{"wrr"}
	compref		$tmp150 ___614_ip $const4 	%argrw{"wrr"}
	compref		$tmp151 ___614_ip $const2 	%argrw{"wrr"}
	point		$tmp148 $tmp149 $tmp150 $tmp151 	%argrw{"wrrr"}
	cellnoise	___607_b $tmp148 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	return color(r, g, b);
	color		$tmp143 ___607_r ___607_g ___607_b 	%line{47} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	assign		___614_vp $tmp143 	%line{68} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point pd = p - (vp + ip);
	add		$tmp152 ___614_vp ___614_ip 	%line{69} %argrw{"wrr"}
	sub		___614_pd $tmp19 $tmp152 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const29 358 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	if (distance_metric == "Distance Squared")
	eq		$tmp153 $const24 $const24 	%line{21} %argrw{"wrr"}
	if		$tmp153 293 293 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:22
# 		return dot(d, d);
	dot		___614_d ___614_pd ___614_pd 	%line{22} %argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Actual Distance")
	eq		$tmp154 $const24 $const30 	%line{23} %argrw{"wrr"}
	if		$tmp154 297 297 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		return length(d);
	length		___614_d ___614_pd 	%line{24} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Manhattan")
	eq		$tmp155 $const24 $const31 	%line{25} %argrw{"wrr"}
	if		$tmp155 308 308 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		return fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp157 ___614_pd $const2 	%line{26} %argrw{"wrr"}
	fabs		$tmp156 $tmp157 	%argrw{"wr"}
	compref		$tmp159 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp158 $tmp159 	%argrw{"wr"}
	add		$tmp160 $tmp156 $tmp158 	%argrw{"wrr"}
	compref		$tmp162 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp161 $tmp162 	%argrw{"wr"}
	add		___614_d $tmp160 $tmp161 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Chebychev")
	eq		$tmp163 $const24 $const32 	%line{27} %argrw{"wrr"}
	if		$tmp163 319 319 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		return max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp165 ___614_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp164 $tmp165 	%argrw{"wr"}
	compref		$tmp168 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp167 $tmp168 	%argrw{"wr"}
	compref		$tmp170 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp169 $tmp170 	%argrw{"wr"}
	max		$tmp166 $tmp167 $tmp169 	%argrw{"wrr"}
	max		___614_d $tmp164 $tmp166 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp171 $const24 $const33 	%line{29} %argrw{"wrr"}
	if		$tmp171 333 333 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		return sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp174 ___614_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp173 $tmp174 	%argrw{"wr"}
	sqrt		$tmp172 $tmp173 	%argrw{"wr"}
	compref		$tmp177 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp176 $tmp177 	%argrw{"wr"}
	sqrt		$tmp175 $tmp176 	%argrw{"wr"}
	add		$tmp178 $tmp172 $tmp175 	%argrw{"wrr"}
	compref		$tmp181 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp180 $tmp181 	%argrw{"wr"}
	sqrt		$tmp179 $tmp180 	%argrw{"wr"}
	add		___614_d $tmp178 $tmp179 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp182 $const24 $const34 	%line{31} %argrw{"wrr"}
	if		$tmp182 341 341 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		return sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp185 ___614_pd ___614_pd 	%line{32} %argrw{"wrr"}
	mul		$tmp186 ___614_pd ___614_pd 	%argrw{"wrr"}
	dot		$tmp184 $tmp185 $tmp186 	%argrw{"wrr"}
	sqrt		$tmp183 $tmp184 	%argrw{"wr"}
	sqrt		___614_d $tmp183 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky")
	eq		$tmp187 $const24 $const35 	%line{33} %argrw{"wrr"}
	if		$tmp187 357 357 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		return pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp190 ___614_pd $const2 	%line{34} %argrw{"wrr"}
	fabs		$tmp189 $tmp190 	%argrw{"wr"}
	pow		$tmp188 $tmp189 $const5 	%argrw{"wrr"}
	compref		$tmp193 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp192 $tmp193 	%argrw{"wr"}
	pow		$tmp191 $tmp192 $const5 	%argrw{"wrr"}
	add		$tmp194 $tmp188 $tmp191 	%argrw{"wrr"}
	compref		$tmp197 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp196 $tmp197 	%argrw{"wr"}
	pow		$tmp195 $tmp196 $const5 	%argrw{"wrr"}
	add		$tmp198 $tmp194 $tmp195 	%argrw{"wrr"}
	div		$tmp199 $const12 $const5 	%argrw{"wrr"}
	pow		___614_d $tmp198 $tmp199 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:36
# 	return 0.0;
	assign		___614_d $const5 	%line{36} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				vp += point(xx, yy, zz);
	assign		$tmp201 ___608_xx 	%line{72} %argrw{"wr"}
	assign		$tmp202 ___608_yy 	%argrw{"wr"}
	assign		$tmp203 ___608_zz 	%argrw{"wr"}
	point		$tmp200 $tmp201 $tmp202 $tmp203 	%argrw{"wrrr"}
	add		___614_vp ___614_vp $tmp200 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				if (d < da[0]) {
	aref		$tmp204 ___619_da $const2 	%line{74} %argrw{"wrr"}
	lt		$tmp205 ___614_d $tmp204 	%argrw{"wrr"}
	if		$tmp205 380 407 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:75
# 					da[3] = da[2];
	aref		$tmp206 ___619_da $const4 	%line{75} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp206 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 					da[2] = da[1];
	aref		$tmp207 ___619_da $const3 	%line{76} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp207 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[1] = da[0];
	aref		$tmp208 ___619_da $const2 	%line{77} %argrw{"wrr"}
	aassign		___619_da $const3 $tmp208 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[0] = d;
	aassign		___619_da $const2 ___614_d 	%line{78} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					pa[3] = pa[2];
	aref		$tmp209 ___619_pa $const4 	%line{80} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp209 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:81
# 					pa[2] = pa[1];
	aref		$tmp210 ___619_pa $const3 	%line{81} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp210 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[1] = pa[0];
	aref		$tmp211 ___619_pa $const2 	%line{82} %argrw{"wrr"}
	aassign		___619_pa $const3 $tmp211 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[0] = vp;
	aassign		___619_pa $const2 ___614_vp 	%line{83} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 				else if (d < da[1]) {
	aref		$tmp212 ___619_da $const3 	%line{85} %argrw{"wrr"}
	lt		$tmp213 ___614_d $tmp212 	%argrw{"wrr"}
	if		$tmp213 393 407 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:86
# 					da[3] = da[2];
	aref		$tmp214 ___619_da $const4 	%line{86} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp214 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 					da[2] = da[1];
	aref		$tmp215 ___619_da $const3 	%line{87} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp215 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[1] = d;
	aassign		___619_da $const3 ___614_d 	%line{88} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					pa[3] = pa[2];
	aref		$tmp216 ___619_pa $const4 	%line{90} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp216 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:91
# 					pa[2] = pa[1];
	aref		$tmp217 ___619_pa $const3 	%line{91} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp217 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[1] = vp;
	aassign		___619_pa $const3 ___614_vp 	%line{92} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 				else if (d < da[2]) {
	aref		$tmp218 ___619_da $const4 	%line{94} %argrw{"wrr"}
	lt		$tmp219 ___614_d $tmp218 	%argrw{"wrr"}
	if		$tmp219 402 407 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:95
# 					da[3] = da[2];
	aref		$tmp220 ___619_da $const4 	%line{95} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp220 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 					da[2] = d;
	aassign		___619_da $const4 ___614_d 	%line{96} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					pa[3] = pa[2];
	aref		$tmp221 ___619_pa $const4 	%line{98} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp221 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:99
# 					pa[2] = vp;
	aassign		___619_pa $const4 ___614_vp 	%line{99} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 				else if (d < da[3]) {
	aref		$tmp222 ___619_da $const27 	%line{101} %argrw{"wrr"}
	lt		$tmp223 ___614_d $tmp222 	%argrw{"wrr"}
	if		$tmp223 407 407 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:102
# 					da[3] = d;
	aassign		___619_da $const27 ___614_d 	%line{102} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 					pa[3] = vp;
	aassign		___619_pa $const27 ___614_vp 	%line{103} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp224 ___608_zz 	%line{66} %argrw{"wr"}
	add		___608_zz ___608_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp225 ___608_yy 	%line{65} %argrw{"wr"}
	add		___608_yy ___608_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp226 ___608_xx 	%line{64} %argrw{"wr"}
	add		___608_xx ___608_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	return da[n];
	aref		$tmp127 ___619_da $const3 	%line{117} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:144
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	mul		$tmp227 $const21 $tmp127 	%line{144} %argrw{"wrr"}
	sub		___642_t $tmp227 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:178
# 		return voronoi_F2S(p);
	return	%line{178}
# intern/cycles/kernel/shaders/node_texture.h:179
# 	if (basis == "Voronoi F3")
	eq		$tmp228 $const10 $const39 	%line{179} %argrw{"wrr"}
	if		$tmp228 597 597 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:180
# 		return voronoi_F3S(p);
	functioncall	$const40 596 	%line{180} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	functioncall	$const41 594 	%line{145} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:132
# float voronoi_F3(point p) { return voronoi_Fn(p, 2); }
	functioncall	$const23 594 	%line{132} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:115
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const25 593 	%line{115} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:55
# 	xi = (int)floor(p[0]);
	compref		$tmp231 $tmp19 $const2 	%line{55} %argrw{"wrr"}
	floor		$tmp230 $tmp231 	%argrw{"wr"}
	assign		___608_xi $tmp230 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:56
# 	yi = (int)floor(p[1]);
	compref		$tmp233 $tmp19 $const3 	%line{56} %argrw{"wrr"}
	floor		$tmp232 $tmp233 	%argrw{"wr"}
	assign		___608_yi $tmp232 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	zi = (int)floor(p[2]);
	compref		$tmp235 $tmp19 $const4 	%line{57} %argrw{"wrr"}
	floor		$tmp234 $tmp235 	%argrw{"wr"}
	assign		___608_zi $tmp234 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	da[0] = 1e10;
	aassign		___619_da $const2 $const26 	%line{59} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:60
# 	da[1] = 1e10;
	aassign		___619_da $const3 $const26 	%line{60} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[2] = 1e10;
	aassign		___619_da $const4 $const26 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[3] = 1e10;
	aassign		___619_da $const27 $const26 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp237 438 440 591 593 	%line{64} %argrw{"r"}
	sub		___608_xx ___608_xi $const3 	%argrw{"wrr"}
	add		$tmp236 ___608_xi $const3 	%argrw{"wrr"}
	le		$tmp237 ___608_xx $tmp236 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp239 442 444 589 591 	%line{65} %argrw{"r"}
	sub		___608_yy ___608_yi $const3 	%argrw{"wrr"}
	add		$tmp238 ___608_yi $const3 	%argrw{"wrr"}
	le		$tmp239 ___608_yy $tmp238 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp241 446 448 587 589 	%line{66} %argrw{"r"}
	sub		___608_zz ___608_zi $const3 	%argrw{"wrr"}
	add		$tmp240 ___608_zi $const3 	%argrw{"wrr"}
	le		$tmp241 ___608_zz $tmp240 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 				point ip = point(xx, yy, zz);
	assign		$tmp242 ___608_xx 	%line{67} %argrw{"wr"}
	assign		$tmp243 ___608_yy 	%argrw{"wr"}
	assign		$tmp244 ___608_zz 	%argrw{"wr"}
	point		___614_ip $tmp242 $tmp243 $tmp244 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const28 465 	%line{68} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:43
# 	float r = cellnoise(p);
	cellnoise	___607_r ___614_ip 	%line{43} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:44
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp247 ___614_ip $const3 	%line{44} %argrw{"wrr"}
	compref		$tmp248 ___614_ip $const2 	%argrw{"wrr"}
	compref		$tmp249 ___614_ip $const4 	%argrw{"wrr"}
	point		$tmp246 $tmp247 $tmp248 $tmp249 	%argrw{"wrrr"}
	cellnoise	___607_g $tmp246 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp251 ___614_ip $const3 	%line{45} %argrw{"wrr"}
	compref		$tmp252 ___614_ip $const4 	%argrw{"wrr"}
	compref		$tmp253 ___614_ip $const2 	%argrw{"wrr"}
	point		$tmp250 $tmp251 $tmp252 $tmp253 	%argrw{"wrrr"}
	cellnoise	___607_b $tmp250 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	return color(r, g, b);
	color		$tmp245 ___607_r ___607_g ___607_b 	%line{47} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	assign		___614_vp $tmp245 	%line{68} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point pd = p - (vp + ip);
	add		$tmp254 ___614_vp ___614_ip 	%line{69} %argrw{"wrr"}
	sub		___614_pd $tmp19 $tmp254 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const29 538 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	if (distance_metric == "Distance Squared")
	eq		$tmp255 $const24 $const24 	%line{21} %argrw{"wrr"}
	if		$tmp255 473 473 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:22
# 		return dot(d, d);
	dot		___614_d ___614_pd ___614_pd 	%line{22} %argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Actual Distance")
	eq		$tmp256 $const24 $const30 	%line{23} %argrw{"wrr"}
	if		$tmp256 477 477 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		return length(d);
	length		___614_d ___614_pd 	%line{24} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Manhattan")
	eq		$tmp257 $const24 $const31 	%line{25} %argrw{"wrr"}
	if		$tmp257 488 488 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		return fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp259 ___614_pd $const2 	%line{26} %argrw{"wrr"}
	fabs		$tmp258 $tmp259 	%argrw{"wr"}
	compref		$tmp261 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp260 $tmp261 	%argrw{"wr"}
	add		$tmp262 $tmp258 $tmp260 	%argrw{"wrr"}
	compref		$tmp264 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp263 $tmp264 	%argrw{"wr"}
	add		___614_d $tmp262 $tmp263 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Chebychev")
	eq		$tmp265 $const24 $const32 	%line{27} %argrw{"wrr"}
	if		$tmp265 499 499 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		return max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp267 ___614_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp266 $tmp267 	%argrw{"wr"}
	compref		$tmp270 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp269 $tmp270 	%argrw{"wr"}
	compref		$tmp272 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp271 $tmp272 	%argrw{"wr"}
	max		$tmp268 $tmp269 $tmp271 	%argrw{"wrr"}
	max		___614_d $tmp266 $tmp268 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp273 $const24 $const33 	%line{29} %argrw{"wrr"}
	if		$tmp273 513 513 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		return sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp276 ___614_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp275 $tmp276 	%argrw{"wr"}
	sqrt		$tmp274 $tmp275 	%argrw{"wr"}
	compref		$tmp279 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp278 $tmp279 	%argrw{"wr"}
	sqrt		$tmp277 $tmp278 	%argrw{"wr"}
	add		$tmp280 $tmp274 $tmp277 	%argrw{"wrr"}
	compref		$tmp283 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp282 $tmp283 	%argrw{"wr"}
	sqrt		$tmp281 $tmp282 	%argrw{"wr"}
	add		___614_d $tmp280 $tmp281 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp284 $const24 $const34 	%line{31} %argrw{"wrr"}
	if		$tmp284 521 521 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		return sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp287 ___614_pd ___614_pd 	%line{32} %argrw{"wrr"}
	mul		$tmp288 ___614_pd ___614_pd 	%argrw{"wrr"}
	dot		$tmp286 $tmp287 $tmp288 	%argrw{"wrr"}
	sqrt		$tmp285 $tmp286 	%argrw{"wr"}
	sqrt		___614_d $tmp285 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky")
	eq		$tmp289 $const24 $const35 	%line{33} %argrw{"wrr"}
	if		$tmp289 537 537 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		return pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp292 ___614_pd $const2 	%line{34} %argrw{"wrr"}
	fabs		$tmp291 $tmp292 	%argrw{"wr"}
	pow		$tmp290 $tmp291 $const5 	%argrw{"wrr"}
	compref		$tmp295 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp294 $tmp295 	%argrw{"wr"}
	pow		$tmp293 $tmp294 $const5 	%argrw{"wrr"}
	add		$tmp296 $tmp290 $tmp293 	%argrw{"wrr"}
	compref		$tmp299 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp298 $tmp299 	%argrw{"wr"}
	pow		$tmp297 $tmp298 $const5 	%argrw{"wrr"}
	add		$tmp300 $tmp296 $tmp297 	%argrw{"wrr"}
	div		$tmp301 $const12 $const5 	%argrw{"wrr"}
	pow		___614_d $tmp300 $tmp301 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:36
# 	return 0.0;
	assign		___614_d $const5 	%line{36} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				vp += point(xx, yy, zz);
	assign		$tmp303 ___608_xx 	%line{72} %argrw{"wr"}
	assign		$tmp304 ___608_yy 	%argrw{"wr"}
	assign		$tmp305 ___608_zz 	%argrw{"wr"}
	point		$tmp302 $tmp303 $tmp304 $tmp305 	%argrw{"wrrr"}
	add		___614_vp ___614_vp $tmp302 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				if (d < da[0]) {
	aref		$tmp306 ___619_da $const2 	%line{74} %argrw{"wrr"}
	lt		$tmp307 ___614_d $tmp306 	%argrw{"wrr"}
	if		$tmp307 560 587 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:75
# 					da[3] = da[2];
	aref		$tmp308 ___619_da $const4 	%line{75} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp308 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 					da[2] = da[1];
	aref		$tmp309 ___619_da $const3 	%line{76} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp309 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[1] = da[0];
	aref		$tmp310 ___619_da $const2 	%line{77} %argrw{"wrr"}
	aassign		___619_da $const3 $tmp310 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[0] = d;
	aassign		___619_da $const2 ___614_d 	%line{78} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					pa[3] = pa[2];
	aref		$tmp311 ___619_pa $const4 	%line{80} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp311 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:81
# 					pa[2] = pa[1];
	aref		$tmp312 ___619_pa $const3 	%line{81} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp312 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[1] = pa[0];
	aref		$tmp313 ___619_pa $const2 	%line{82} %argrw{"wrr"}
	aassign		___619_pa $const3 $tmp313 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[0] = vp;
	aassign		___619_pa $const2 ___614_vp 	%line{83} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 				else if (d < da[1]) {
	aref		$tmp314 ___619_da $const3 	%line{85} %argrw{"wrr"}
	lt		$tmp315 ___614_d $tmp314 	%argrw{"wrr"}
	if		$tmp315 573 587 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:86
# 					da[3] = da[2];
	aref		$tmp316 ___619_da $const4 	%line{86} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp316 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 					da[2] = da[1];
	aref		$tmp317 ___619_da $const3 	%line{87} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp317 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[1] = d;
	aassign		___619_da $const3 ___614_d 	%line{88} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					pa[3] = pa[2];
	aref		$tmp318 ___619_pa $const4 	%line{90} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp318 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:91
# 					pa[2] = pa[1];
	aref		$tmp319 ___619_pa $const3 	%line{91} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp319 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[1] = vp;
	aassign		___619_pa $const3 ___614_vp 	%line{92} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 				else if (d < da[2]) {
	aref		$tmp320 ___619_da $const4 	%line{94} %argrw{"wrr"}
	lt		$tmp321 ___614_d $tmp320 	%argrw{"wrr"}
	if		$tmp321 582 587 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:95
# 					da[3] = da[2];
	aref		$tmp322 ___619_da $const4 	%line{95} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp322 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 					da[2] = d;
	aassign		___619_da $const4 ___614_d 	%line{96} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					pa[3] = pa[2];
	aref		$tmp323 ___619_pa $const4 	%line{98} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp323 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:99
# 					pa[2] = vp;
	aassign		___619_pa $const4 ___614_vp 	%line{99} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 				else if (d < da[3]) {
	aref		$tmp324 ___619_da $const27 	%line{101} %argrw{"wrr"}
	lt		$tmp325 ___614_d $tmp324 	%argrw{"wrr"}
	if		$tmp325 587 587 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:102
# 					da[3] = d;
	aassign		___619_da $const27 ___614_d 	%line{102} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 					pa[3] = vp;
	aassign		___619_pa $const27 ___614_vp 	%line{103} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp326 ___608_zz 	%line{66} %argrw{"wr"}
	add		___608_zz ___608_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp327 ___608_yy 	%line{65} %argrw{"wr"}
	add		___608_yy ___608_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp328 ___608_xx 	%line{64} %argrw{"wr"}
	add		___608_xx ___608_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	return da[n];
	aref		$tmp229 ___619_da $const4 	%line{117} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	mul		$tmp329 $const21 $tmp229 	%line{145} %argrw{"wrr"}
	sub		___642_t $tmp329 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:180
# 		return voronoi_F3S(p);
	return	%line{180}
# intern/cycles/kernel/shaders/node_texture.h:181
# 	if (basis == "Voronoi F4")
	eq		$tmp330 $const10 $const42 	%line{181} %argrw{"wrr"}
	if		$tmp330 777 777 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:182
# 		return voronoi_F4S(p);
	functioncall	$const43 776 	%line{182} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	functioncall	$const44 774 	%line{146} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:133
# float voronoi_F4(point p) { return voronoi_Fn(p, 3); }
	functioncall	$const23 774 	%line{133} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:115
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const25 773 	%line{115} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:55
# 	xi = (int)floor(p[0]);
	compref		$tmp333 $tmp19 $const2 	%line{55} %argrw{"wrr"}
	floor		$tmp332 $tmp333 	%argrw{"wr"}
	assign		___608_xi $tmp332 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:56
# 	yi = (int)floor(p[1]);
	compref		$tmp335 $tmp19 $const3 	%line{56} %argrw{"wrr"}
	floor		$tmp334 $tmp335 	%argrw{"wr"}
	assign		___608_yi $tmp334 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	zi = (int)floor(p[2]);
	compref		$tmp337 $tmp19 $const4 	%line{57} %argrw{"wrr"}
	floor		$tmp336 $tmp337 	%argrw{"wr"}
	assign		___608_zi $tmp336 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	da[0] = 1e10;
	aassign		___619_da $const2 $const26 	%line{59} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:60
# 	da[1] = 1e10;
	aassign		___619_da $const3 $const26 	%line{60} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[2] = 1e10;
	aassign		___619_da $const4 $const26 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[3] = 1e10;
	aassign		___619_da $const27 $const26 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp339 618 620 771 773 	%line{64} %argrw{"r"}
	sub		___608_xx ___608_xi $const3 	%argrw{"wrr"}
	add		$tmp338 ___608_xi $const3 	%argrw{"wrr"}
	le		$tmp339 ___608_xx $tmp338 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp341 622 624 769 771 	%line{65} %argrw{"r"}
	sub		___608_yy ___608_yi $const3 	%argrw{"wrr"}
	add		$tmp340 ___608_yi $const3 	%argrw{"wrr"}
	le		$tmp341 ___608_yy $tmp340 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp343 626 628 767 769 	%line{66} %argrw{"r"}
	sub		___608_zz ___608_zi $const3 	%argrw{"wrr"}
	add		$tmp342 ___608_zi $const3 	%argrw{"wrr"}
	le		$tmp343 ___608_zz $tmp342 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 				point ip = point(xx, yy, zz);
	assign		$tmp344 ___608_xx 	%line{67} %argrw{"wr"}
	assign		$tmp345 ___608_yy 	%argrw{"wr"}
	assign		$tmp346 ___608_zz 	%argrw{"wr"}
	point		___614_ip $tmp344 $tmp345 $tmp346 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const28 645 	%line{68} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:43
# 	float r = cellnoise(p);
	cellnoise	___607_r ___614_ip 	%line{43} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:44
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp349 ___614_ip $const3 	%line{44} %argrw{"wrr"}
	compref		$tmp350 ___614_ip $const2 	%argrw{"wrr"}
	compref		$tmp351 ___614_ip $const4 	%argrw{"wrr"}
	point		$tmp348 $tmp349 $tmp350 $tmp351 	%argrw{"wrrr"}
	cellnoise	___607_g $tmp348 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp353 ___614_ip $const3 	%line{45} %argrw{"wrr"}
	compref		$tmp354 ___614_ip $const4 	%argrw{"wrr"}
	compref		$tmp355 ___614_ip $const2 	%argrw{"wrr"}
	point		$tmp352 $tmp353 $tmp354 $tmp355 	%argrw{"wrrr"}
	cellnoise	___607_b $tmp352 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	return color(r, g, b);
	color		$tmp347 ___607_r ___607_g ___607_b 	%line{47} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	assign		___614_vp $tmp347 	%line{68} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point pd = p - (vp + ip);
	add		$tmp356 ___614_vp ___614_ip 	%line{69} %argrw{"wrr"}
	sub		___614_pd $tmp19 $tmp356 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const29 718 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	if (distance_metric == "Distance Squared")
	eq		$tmp357 $const24 $const24 	%line{21} %argrw{"wrr"}
	if		$tmp357 653 653 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:22
# 		return dot(d, d);
	dot		___614_d ___614_pd ___614_pd 	%line{22} %argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Actual Distance")
	eq		$tmp358 $const24 $const30 	%line{23} %argrw{"wrr"}
	if		$tmp358 657 657 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		return length(d);
	length		___614_d ___614_pd 	%line{24} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Manhattan")
	eq		$tmp359 $const24 $const31 	%line{25} %argrw{"wrr"}
	if		$tmp359 668 668 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		return fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp361 ___614_pd $const2 	%line{26} %argrw{"wrr"}
	fabs		$tmp360 $tmp361 	%argrw{"wr"}
	compref		$tmp363 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp362 $tmp363 	%argrw{"wr"}
	add		$tmp364 $tmp360 $tmp362 	%argrw{"wrr"}
	compref		$tmp366 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp365 $tmp366 	%argrw{"wr"}
	add		___614_d $tmp364 $tmp365 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Chebychev")
	eq		$tmp367 $const24 $const32 	%line{27} %argrw{"wrr"}
	if		$tmp367 679 679 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		return max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp369 ___614_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp368 $tmp369 	%argrw{"wr"}
	compref		$tmp372 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp371 $tmp372 	%argrw{"wr"}
	compref		$tmp374 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp373 $tmp374 	%argrw{"wr"}
	max		$tmp370 $tmp371 $tmp373 	%argrw{"wrr"}
	max		___614_d $tmp368 $tmp370 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp375 $const24 $const33 	%line{29} %argrw{"wrr"}
	if		$tmp375 693 693 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		return sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp378 ___614_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp377 $tmp378 	%argrw{"wr"}
	sqrt		$tmp376 $tmp377 	%argrw{"wr"}
	compref		$tmp381 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp380 $tmp381 	%argrw{"wr"}
	sqrt		$tmp379 $tmp380 	%argrw{"wr"}
	add		$tmp382 $tmp376 $tmp379 	%argrw{"wrr"}
	compref		$tmp385 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp384 $tmp385 	%argrw{"wr"}
	sqrt		$tmp383 $tmp384 	%argrw{"wr"}
	add		___614_d $tmp382 $tmp383 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp386 $const24 $const34 	%line{31} %argrw{"wrr"}
	if		$tmp386 701 701 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		return sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp389 ___614_pd ___614_pd 	%line{32} %argrw{"wrr"}
	mul		$tmp390 ___614_pd ___614_pd 	%argrw{"wrr"}
	dot		$tmp388 $tmp389 $tmp390 	%argrw{"wrr"}
	sqrt		$tmp387 $tmp388 	%argrw{"wr"}
	sqrt		___614_d $tmp387 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky")
	eq		$tmp391 $const24 $const35 	%line{33} %argrw{"wrr"}
	if		$tmp391 717 717 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		return pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp394 ___614_pd $const2 	%line{34} %argrw{"wrr"}
	fabs		$tmp393 $tmp394 	%argrw{"wr"}
	pow		$tmp392 $tmp393 $const5 	%argrw{"wrr"}
	compref		$tmp397 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp396 $tmp397 	%argrw{"wr"}
	pow		$tmp395 $tmp396 $const5 	%argrw{"wrr"}
	add		$tmp398 $tmp392 $tmp395 	%argrw{"wrr"}
	compref		$tmp401 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp400 $tmp401 	%argrw{"wr"}
	pow		$tmp399 $tmp400 $const5 	%argrw{"wrr"}
	add		$tmp402 $tmp398 $tmp399 	%argrw{"wrr"}
	div		$tmp403 $const12 $const5 	%argrw{"wrr"}
	pow		___614_d $tmp402 $tmp403 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:36
# 	return 0.0;
	assign		___614_d $const5 	%line{36} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				vp += point(xx, yy, zz);
	assign		$tmp405 ___608_xx 	%line{72} %argrw{"wr"}
	assign		$tmp406 ___608_yy 	%argrw{"wr"}
	assign		$tmp407 ___608_zz 	%argrw{"wr"}
	point		$tmp404 $tmp405 $tmp406 $tmp407 	%argrw{"wrrr"}
	add		___614_vp ___614_vp $tmp404 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				if (d < da[0]) {
	aref		$tmp408 ___619_da $const2 	%line{74} %argrw{"wrr"}
	lt		$tmp409 ___614_d $tmp408 	%argrw{"wrr"}
	if		$tmp409 740 767 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:75
# 					da[3] = da[2];
	aref		$tmp410 ___619_da $const4 	%line{75} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp410 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 					da[2] = da[1];
	aref		$tmp411 ___619_da $const3 	%line{76} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp411 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[1] = da[0];
	aref		$tmp412 ___619_da $const2 	%line{77} %argrw{"wrr"}
	aassign		___619_da $const3 $tmp412 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[0] = d;
	aassign		___619_da $const2 ___614_d 	%line{78} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					pa[3] = pa[2];
	aref		$tmp413 ___619_pa $const4 	%line{80} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp413 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:81
# 					pa[2] = pa[1];
	aref		$tmp414 ___619_pa $const3 	%line{81} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp414 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[1] = pa[0];
	aref		$tmp415 ___619_pa $const2 	%line{82} %argrw{"wrr"}
	aassign		___619_pa $const3 $tmp415 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[0] = vp;
	aassign		___619_pa $const2 ___614_vp 	%line{83} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 				else if (d < da[1]) {
	aref		$tmp416 ___619_da $const3 	%line{85} %argrw{"wrr"}
	lt		$tmp417 ___614_d $tmp416 	%argrw{"wrr"}
	if		$tmp417 753 767 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:86
# 					da[3] = da[2];
	aref		$tmp418 ___619_da $const4 	%line{86} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp418 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 					da[2] = da[1];
	aref		$tmp419 ___619_da $const3 	%line{87} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp419 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[1] = d;
	aassign		___619_da $const3 ___614_d 	%line{88} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					pa[3] = pa[2];
	aref		$tmp420 ___619_pa $const4 	%line{90} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp420 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:91
# 					pa[2] = pa[1];
	aref		$tmp421 ___619_pa $const3 	%line{91} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp421 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[1] = vp;
	aassign		___619_pa $const3 ___614_vp 	%line{92} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 				else if (d < da[2]) {
	aref		$tmp422 ___619_da $const4 	%line{94} %argrw{"wrr"}
	lt		$tmp423 ___614_d $tmp422 	%argrw{"wrr"}
	if		$tmp423 762 767 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:95
# 					da[3] = da[2];
	aref		$tmp424 ___619_da $const4 	%line{95} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp424 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 					da[2] = d;
	aassign		___619_da $const4 ___614_d 	%line{96} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					pa[3] = pa[2];
	aref		$tmp425 ___619_pa $const4 	%line{98} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp425 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:99
# 					pa[2] = vp;
	aassign		___619_pa $const4 ___614_vp 	%line{99} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 				else if (d < da[3]) {
	aref		$tmp426 ___619_da $const27 	%line{101} %argrw{"wrr"}
	lt		$tmp427 ___614_d $tmp426 	%argrw{"wrr"}
	if		$tmp427 767 767 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:102
# 					da[3] = d;
	aassign		___619_da $const27 ___614_d 	%line{102} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 					pa[3] = vp;
	aassign		___619_pa $const27 ___614_vp 	%line{103} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp428 ___608_zz 	%line{66} %argrw{"wr"}
	add		___608_zz ___608_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp429 ___608_yy 	%line{65} %argrw{"wr"}
	add		___608_yy ___608_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp430 ___608_xx 	%line{64} %argrw{"wr"}
	add		___608_xx ___608_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	return da[n];
	aref		$tmp331 ___619_da $const27 	%line{117} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	mul		$tmp431 $const21 $tmp331 	%line{146} %argrw{"wrr"}
	sub		___642_t $tmp431 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:182
# 		return voronoi_F4S(p);
	return	%line{182}
# intern/cycles/kernel/shaders/node_texture.h:183
# 	if (basis == "Voronoi F2-F1")
	eq		$tmp432 $const10 $const45 	%line{183} %argrw{"wrr"}
	if		$tmp432 959 959 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:184
# 		return voronoi_F1F2S(p);
	functioncall	$const46 958 	%line{184} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	functioncall	$const47 956 	%line{147} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const48 956 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:125
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const25 953 	%line{125} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:55
# 	xi = (int)floor(p[0]);
	compref		$tmp435 $tmp19 $const2 	%line{55} %argrw{"wrr"}
	floor		$tmp434 $tmp435 	%argrw{"wr"}
	assign		___608_xi $tmp434 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:56
# 	yi = (int)floor(p[1]);
	compref		$tmp437 $tmp19 $const3 	%line{56} %argrw{"wrr"}
	floor		$tmp436 $tmp437 	%argrw{"wr"}
	assign		___608_yi $tmp436 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	zi = (int)floor(p[2]);
	compref		$tmp439 $tmp19 $const4 	%line{57} %argrw{"wrr"}
	floor		$tmp438 $tmp439 	%argrw{"wr"}
	assign		___608_zi $tmp438 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	da[0] = 1e10;
	aassign		___620_da $const2 $const26 	%line{59} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:60
# 	da[1] = 1e10;
	aassign		___620_da $const3 $const26 	%line{60} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[2] = 1e10;
	aassign		___620_da $const4 $const26 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[3] = 1e10;
	aassign		___620_da $const27 $const26 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp441 798 800 951 953 	%line{64} %argrw{"r"}
	sub		___608_xx ___608_xi $const3 	%argrw{"wrr"}
	add		$tmp440 ___608_xi $const3 	%argrw{"wrr"}
	le		$tmp441 ___608_xx $tmp440 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp443 802 804 949 951 	%line{65} %argrw{"r"}
	sub		___608_yy ___608_yi $const3 	%argrw{"wrr"}
	add		$tmp442 ___608_yi $const3 	%argrw{"wrr"}
	le		$tmp443 ___608_yy $tmp442 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp445 806 808 947 949 	%line{66} %argrw{"r"}
	sub		___608_zz ___608_zi $const3 	%argrw{"wrr"}
	add		$tmp444 ___608_zi $const3 	%argrw{"wrr"}
	le		$tmp445 ___608_zz $tmp444 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 				point ip = point(xx, yy, zz);
	assign		$tmp446 ___608_xx 	%line{67} %argrw{"wr"}
	assign		$tmp447 ___608_yy 	%argrw{"wr"}
	assign		$tmp448 ___608_zz 	%argrw{"wr"}
	point		___614_ip $tmp446 $tmp447 $tmp448 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const28 825 	%line{68} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:43
# 	float r = cellnoise(p);
	cellnoise	___607_r ___614_ip 	%line{43} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:44
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp451 ___614_ip $const3 	%line{44} %argrw{"wrr"}
	compref		$tmp452 ___614_ip $const2 	%argrw{"wrr"}
	compref		$tmp453 ___614_ip $const4 	%argrw{"wrr"}
	point		$tmp450 $tmp451 $tmp452 $tmp453 	%argrw{"wrrr"}
	cellnoise	___607_g $tmp450 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp455 ___614_ip $const3 	%line{45} %argrw{"wrr"}
	compref		$tmp456 ___614_ip $const4 	%argrw{"wrr"}
	compref		$tmp457 ___614_ip $const2 	%argrw{"wrr"}
	point		$tmp454 $tmp455 $tmp456 $tmp457 	%argrw{"wrrr"}
	cellnoise	___607_b $tmp454 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	return color(r, g, b);
	color		$tmp449 ___607_r ___607_g ___607_b 	%line{47} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	assign		___614_vp $tmp449 	%line{68} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point pd = p - (vp + ip);
	add		$tmp458 ___614_vp ___614_ip 	%line{69} %argrw{"wrr"}
	sub		___614_pd $tmp19 $tmp458 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const29 898 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	if (distance_metric == "Distance Squared")
	eq		$tmp459 $const24 $const24 	%line{21} %argrw{"wrr"}
	if		$tmp459 833 833 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:22
# 		return dot(d, d);
	dot		___614_d ___614_pd ___614_pd 	%line{22} %argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Actual Distance")
	eq		$tmp460 $const24 $const30 	%line{23} %argrw{"wrr"}
	if		$tmp460 837 837 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		return length(d);
	length		___614_d ___614_pd 	%line{24} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Manhattan")
	eq		$tmp461 $const24 $const31 	%line{25} %argrw{"wrr"}
	if		$tmp461 848 848 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		return fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp463 ___614_pd $const2 	%line{26} %argrw{"wrr"}
	fabs		$tmp462 $tmp463 	%argrw{"wr"}
	compref		$tmp465 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp464 $tmp465 	%argrw{"wr"}
	add		$tmp466 $tmp462 $tmp464 	%argrw{"wrr"}
	compref		$tmp468 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp467 $tmp468 	%argrw{"wr"}
	add		___614_d $tmp466 $tmp467 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Chebychev")
	eq		$tmp469 $const24 $const32 	%line{27} %argrw{"wrr"}
	if		$tmp469 859 859 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		return max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp471 ___614_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp470 $tmp471 	%argrw{"wr"}
	compref		$tmp474 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp473 $tmp474 	%argrw{"wr"}
	compref		$tmp476 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp475 $tmp476 	%argrw{"wr"}
	max		$tmp472 $tmp473 $tmp475 	%argrw{"wrr"}
	max		___614_d $tmp470 $tmp472 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp477 $const24 $const33 	%line{29} %argrw{"wrr"}
	if		$tmp477 873 873 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		return sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp480 ___614_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp479 $tmp480 	%argrw{"wr"}
	sqrt		$tmp478 $tmp479 	%argrw{"wr"}
	compref		$tmp483 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp482 $tmp483 	%argrw{"wr"}
	sqrt		$tmp481 $tmp482 	%argrw{"wr"}
	add		$tmp484 $tmp478 $tmp481 	%argrw{"wrr"}
	compref		$tmp487 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp486 $tmp487 	%argrw{"wr"}
	sqrt		$tmp485 $tmp486 	%argrw{"wr"}
	add		___614_d $tmp484 $tmp485 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp488 $const24 $const34 	%line{31} %argrw{"wrr"}
	if		$tmp488 881 881 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		return sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp491 ___614_pd ___614_pd 	%line{32} %argrw{"wrr"}
	mul		$tmp492 ___614_pd ___614_pd 	%argrw{"wrr"}
	dot		$tmp490 $tmp491 $tmp492 	%argrw{"wrr"}
	sqrt		$tmp489 $tmp490 	%argrw{"wr"}
	sqrt		___614_d $tmp489 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky")
	eq		$tmp493 $const24 $const35 	%line{33} %argrw{"wrr"}
	if		$tmp493 897 897 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		return pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp496 ___614_pd $const2 	%line{34} %argrw{"wrr"}
	fabs		$tmp495 $tmp496 	%argrw{"wr"}
	pow		$tmp494 $tmp495 $const5 	%argrw{"wrr"}
	compref		$tmp499 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp498 $tmp499 	%argrw{"wr"}
	pow		$tmp497 $tmp498 $const5 	%argrw{"wrr"}
	add		$tmp500 $tmp494 $tmp497 	%argrw{"wrr"}
	compref		$tmp503 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp502 $tmp503 	%argrw{"wr"}
	pow		$tmp501 $tmp502 $const5 	%argrw{"wrr"}
	add		$tmp504 $tmp500 $tmp501 	%argrw{"wrr"}
	div		$tmp505 $const12 $const5 	%argrw{"wrr"}
	pow		___614_d $tmp504 $tmp505 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:36
# 	return 0.0;
	assign		___614_d $const5 	%line{36} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				vp += point(xx, yy, zz);
	assign		$tmp507 ___608_xx 	%line{72} %argrw{"wr"}
	assign		$tmp508 ___608_yy 	%argrw{"wr"}
	assign		$tmp509 ___608_zz 	%argrw{"wr"}
	point		$tmp506 $tmp507 $tmp508 $tmp509 	%argrw{"wrrr"}
	add		___614_vp ___614_vp $tmp506 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				if (d < da[0]) {
	aref		$tmp510 ___620_da $const2 	%line{74} %argrw{"wrr"}
	lt		$tmp511 ___614_d $tmp510 	%argrw{"wrr"}
	if		$tmp511 920 947 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:75
# 					da[3] = da[2];
	aref		$tmp512 ___620_da $const4 	%line{75} %argrw{"wrr"}
	aassign		___620_da $const27 $tmp512 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 					da[2] = da[1];
	aref		$tmp513 ___620_da $const3 	%line{76} %argrw{"wrr"}
	aassign		___620_da $const4 $tmp513 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[1] = da[0];
	aref		$tmp514 ___620_da $const2 	%line{77} %argrw{"wrr"}
	aassign		___620_da $const3 $tmp514 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[0] = d;
	aassign		___620_da $const2 ___614_d 	%line{78} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					pa[3] = pa[2];
	aref		$tmp515 ___620_pa $const4 	%line{80} %argrw{"wrr"}
	aassign		___620_pa $const27 $tmp515 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:81
# 					pa[2] = pa[1];
	aref		$tmp516 ___620_pa $const3 	%line{81} %argrw{"wrr"}
	aassign		___620_pa $const4 $tmp516 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[1] = pa[0];
	aref		$tmp517 ___620_pa $const2 	%line{82} %argrw{"wrr"}
	aassign		___620_pa $const3 $tmp517 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[0] = vp;
	aassign		___620_pa $const2 ___614_vp 	%line{83} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 				else if (d < da[1]) {
	aref		$tmp518 ___620_da $const3 	%line{85} %argrw{"wrr"}
	lt		$tmp519 ___614_d $tmp518 	%argrw{"wrr"}
	if		$tmp519 933 947 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:86
# 					da[3] = da[2];
	aref		$tmp520 ___620_da $const4 	%line{86} %argrw{"wrr"}
	aassign		___620_da $const27 $tmp520 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 					da[2] = da[1];
	aref		$tmp521 ___620_da $const3 	%line{87} %argrw{"wrr"}
	aassign		___620_da $const4 $tmp521 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[1] = d;
	aassign		___620_da $const3 ___614_d 	%line{88} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					pa[3] = pa[2];
	aref		$tmp522 ___620_pa $const4 	%line{90} %argrw{"wrr"}
	aassign		___620_pa $const27 $tmp522 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:91
# 					pa[2] = pa[1];
	aref		$tmp523 ___620_pa $const3 	%line{91} %argrw{"wrr"}
	aassign		___620_pa $const4 $tmp523 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[1] = vp;
	aassign		___620_pa $const3 ___614_vp 	%line{92} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 				else if (d < da[2]) {
	aref		$tmp524 ___620_da $const4 	%line{94} %argrw{"wrr"}
	lt		$tmp525 ___614_d $tmp524 	%argrw{"wrr"}
	if		$tmp525 942 947 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:95
# 					da[3] = da[2];
	aref		$tmp526 ___620_da $const4 	%line{95} %argrw{"wrr"}
	aassign		___620_da $const27 $tmp526 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 					da[2] = d;
	aassign		___620_da $const4 ___614_d 	%line{96} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					pa[3] = pa[2];
	aref		$tmp527 ___620_pa $const4 	%line{98} %argrw{"wrr"}
	aassign		___620_pa $const27 $tmp527 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:99
# 					pa[2] = vp;
	aassign		___620_pa $const4 ___614_vp 	%line{99} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 				else if (d < da[3]) {
	aref		$tmp528 ___620_da $const27 	%line{101} %argrw{"wrr"}
	lt		$tmp529 ___614_d $tmp528 	%argrw{"wrr"}
	if		$tmp529 947 947 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:102
# 					da[3] = d;
	aassign		___620_da $const27 ___614_d 	%line{102} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 					pa[3] = vp;
	aassign		___620_pa $const27 ___614_vp 	%line{103} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp530 ___608_zz 	%line{66} %argrw{"wr"}
	add		___608_zz ___608_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp531 ___608_yy 	%line{65} %argrw{"wr"}
	add		___608_yy ___608_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp532 ___608_xx 	%line{64} %argrw{"wr"}
	add		___608_xx ___608_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	return da[n2] - da[n1];
	aref		$tmp533 ___620_da $const3 	%line{127} %argrw{"wrr"}
	aref		$tmp534 ___620_da $const2 	%argrw{"wrr"}
	sub		$tmp433 $tmp533 $tmp534 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	mul		$tmp535 $const21 $tmp433 	%line{147} %argrw{"wrr"}
	sub		___642_t $tmp535 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:184
# 		return voronoi_F1F2S(p);
	return	%line{184}
# intern/cycles/kernel/shaders/node_texture.h:185
# 	if (basis == "Voronoi Crackle")
	eq		$tmp536 $const10 $const49 	%line{185} %argrw{"wrr"}
	if		$tmp536 1148 1148 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:186
# 		return voronoi_CrS(p);
	functioncall	$const50 1147 	%line{186} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	functioncall	$const51 1145 	%line{148} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:139
# 	float t = 10.0 * voronoi_F1F2(p);
	functioncall	$const47 1139 	%line{139} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const48 1139 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:125
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const25 1136 	%line{125} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:55
# 	xi = (int)floor(p[0]);
	compref		$tmp540 $tmp19 $const2 	%line{55} %argrw{"wrr"}
	floor		$tmp539 $tmp540 	%argrw{"wr"}
	assign		___608_xi $tmp539 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:56
# 	yi = (int)floor(p[1]);
	compref		$tmp542 $tmp19 $const3 	%line{56} %argrw{"wrr"}
	floor		$tmp541 $tmp542 	%argrw{"wr"}
	assign		___608_yi $tmp541 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	zi = (int)floor(p[2]);
	compref		$tmp544 $tmp19 $const4 	%line{57} %argrw{"wrr"}
	floor		$tmp543 $tmp544 	%argrw{"wr"}
	assign		___608_zi $tmp543 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	da[0] = 1e10;
	aassign		___620_da $const2 $const26 	%line{59} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:60
# 	da[1] = 1e10;
	aassign		___620_da $const3 $const26 	%line{60} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[2] = 1e10;
	aassign		___620_da $const4 $const26 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[3] = 1e10;
	aassign		___620_da $const27 $const26 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp546 981 983 1134 1136 	%line{64} %argrw{"r"}
	sub		___608_xx ___608_xi $const3 	%argrw{"wrr"}
	add		$tmp545 ___608_xi $const3 	%argrw{"wrr"}
	le		$tmp546 ___608_xx $tmp545 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp548 985 987 1132 1134 	%line{65} %argrw{"r"}
	sub		___608_yy ___608_yi $const3 	%argrw{"wrr"}
	add		$tmp547 ___608_yi $const3 	%argrw{"wrr"}
	le		$tmp548 ___608_yy $tmp547 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp550 989 991 1130 1132 	%line{66} %argrw{"r"}
	sub		___608_zz ___608_zi $const3 	%argrw{"wrr"}
	add		$tmp549 ___608_zi $const3 	%argrw{"wrr"}
	le		$tmp550 ___608_zz $tmp549 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 				point ip = point(xx, yy, zz);
	assign		$tmp551 ___608_xx 	%line{67} %argrw{"wr"}
	assign		$tmp552 ___608_yy 	%argrw{"wr"}
	assign		$tmp553 ___608_zz 	%argrw{"wr"}
	point		___614_ip $tmp551 $tmp552 $tmp553 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const28 1008 	%line{68} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:43
# 	float r = cellnoise(p);
	cellnoise	___607_r ___614_ip 	%line{43} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:44
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp556 ___614_ip $const3 	%line{44} %argrw{"wrr"}
	compref		$tmp557 ___614_ip $const2 	%argrw{"wrr"}
	compref		$tmp558 ___614_ip $const4 	%argrw{"wrr"}
	point		$tmp555 $tmp556 $tmp557 $tmp558 	%argrw{"wrrr"}
	cellnoise	___607_g $tmp555 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp560 ___614_ip $const3 	%line{45} %argrw{"wrr"}
	compref		$tmp561 ___614_ip $const4 	%argrw{"wrr"}
	compref		$tmp562 ___614_ip $const2 	%argrw{"wrr"}
	point		$tmp559 $tmp560 $tmp561 $tmp562 	%argrw{"wrrr"}
	cellnoise	___607_b $tmp559 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	return color(r, g, b);
	color		$tmp554 ___607_r ___607_g ___607_b 	%line{47} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	assign		___614_vp $tmp554 	%line{68} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point pd = p - (vp + ip);
	add		$tmp563 ___614_vp ___614_ip 	%line{69} %argrw{"wrr"}
	sub		___614_pd $tmp19 $tmp563 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const29 1081 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	if (distance_metric == "Distance Squared")
	eq		$tmp564 $const24 $const24 	%line{21} %argrw{"wrr"}
	if		$tmp564 1016 1016 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:22
# 		return dot(d, d);
	dot		___614_d ___614_pd ___614_pd 	%line{22} %argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Actual Distance")
	eq		$tmp565 $const24 $const30 	%line{23} %argrw{"wrr"}
	if		$tmp565 1020 1020 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		return length(d);
	length		___614_d ___614_pd 	%line{24} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Manhattan")
	eq		$tmp566 $const24 $const31 	%line{25} %argrw{"wrr"}
	if		$tmp566 1031 1031 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		return fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp568 ___614_pd $const2 	%line{26} %argrw{"wrr"}
	fabs		$tmp567 $tmp568 	%argrw{"wr"}
	compref		$tmp570 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp569 $tmp570 	%argrw{"wr"}
	add		$tmp571 $tmp567 $tmp569 	%argrw{"wrr"}
	compref		$tmp573 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp572 $tmp573 	%argrw{"wr"}
	add		___614_d $tmp571 $tmp572 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Chebychev")
	eq		$tmp574 $const24 $const32 	%line{27} %argrw{"wrr"}
	if		$tmp574 1042 1042 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		return max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp576 ___614_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp575 $tmp576 	%argrw{"wr"}
	compref		$tmp579 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp578 $tmp579 	%argrw{"wr"}
	compref		$tmp581 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp580 $tmp581 	%argrw{"wr"}
	max		$tmp577 $tmp578 $tmp580 	%argrw{"wrr"}
	max		___614_d $tmp575 $tmp577 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp582 $const24 $const33 	%line{29} %argrw{"wrr"}
	if		$tmp582 1056 1056 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		return sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp585 ___614_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp584 $tmp585 	%argrw{"wr"}
	sqrt		$tmp583 $tmp584 	%argrw{"wr"}
	compref		$tmp588 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp587 $tmp588 	%argrw{"wr"}
	sqrt		$tmp586 $tmp587 	%argrw{"wr"}
	add		$tmp589 $tmp583 $tmp586 	%argrw{"wrr"}
	compref		$tmp592 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp591 $tmp592 	%argrw{"wr"}
	sqrt		$tmp590 $tmp591 	%argrw{"wr"}
	add		___614_d $tmp589 $tmp590 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp593 $const24 $const34 	%line{31} %argrw{"wrr"}
	if		$tmp593 1064 1064 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		return sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp596 ___614_pd ___614_pd 	%line{32} %argrw{"wrr"}
	mul		$tmp597 ___614_pd ___614_pd 	%argrw{"wrr"}
	dot		$tmp595 $tmp596 $tmp597 	%argrw{"wrr"}
	sqrt		$tmp594 $tmp595 	%argrw{"wr"}
	sqrt		___614_d $tmp594 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky")
	eq		$tmp598 $const24 $const35 	%line{33} %argrw{"wrr"}
	if		$tmp598 1080 1080 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		return pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp601 ___614_pd $const2 	%line{34} %argrw{"wrr"}
	fabs		$tmp600 $tmp601 	%argrw{"wr"}
	pow		$tmp599 $tmp600 $const5 	%argrw{"wrr"}
	compref		$tmp604 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp603 $tmp604 	%argrw{"wr"}
	pow		$tmp602 $tmp603 $const5 	%argrw{"wrr"}
	add		$tmp605 $tmp599 $tmp602 	%argrw{"wrr"}
	compref		$tmp608 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp607 $tmp608 	%argrw{"wr"}
	pow		$tmp606 $tmp607 $const5 	%argrw{"wrr"}
	add		$tmp609 $tmp605 $tmp606 	%argrw{"wrr"}
	div		$tmp610 $const12 $const5 	%argrw{"wrr"}
	pow		___614_d $tmp609 $tmp610 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:36
# 	return 0.0;
	assign		___614_d $const5 	%line{36} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				vp += point(xx, yy, zz);
	assign		$tmp612 ___608_xx 	%line{72} %argrw{"wr"}
	assign		$tmp613 ___608_yy 	%argrw{"wr"}
	assign		$tmp614 ___608_zz 	%argrw{"wr"}
	point		$tmp611 $tmp612 $tmp613 $tmp614 	%argrw{"wrrr"}
	add		___614_vp ___614_vp $tmp611 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				if (d < da[0]) {
	aref		$tmp615 ___620_da $const2 	%line{74} %argrw{"wrr"}
	lt		$tmp616 ___614_d $tmp615 	%argrw{"wrr"}
	if		$tmp616 1103 1130 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:75
# 					da[3] = da[2];
	aref		$tmp617 ___620_da $const4 	%line{75} %argrw{"wrr"}
	aassign		___620_da $const27 $tmp617 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 					da[2] = da[1];
	aref		$tmp618 ___620_da $const3 	%line{76} %argrw{"wrr"}
	aassign		___620_da $const4 $tmp618 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[1] = da[0];
	aref		$tmp619 ___620_da $const2 	%line{77} %argrw{"wrr"}
	aassign		___620_da $const3 $tmp619 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[0] = d;
	aassign		___620_da $const2 ___614_d 	%line{78} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					pa[3] = pa[2];
	aref		$tmp620 ___620_pa $const4 	%line{80} %argrw{"wrr"}
	aassign		___620_pa $const27 $tmp620 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:81
# 					pa[2] = pa[1];
	aref		$tmp621 ___620_pa $const3 	%line{81} %argrw{"wrr"}
	aassign		___620_pa $const4 $tmp621 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[1] = pa[0];
	aref		$tmp622 ___620_pa $const2 	%line{82} %argrw{"wrr"}
	aassign		___620_pa $const3 $tmp622 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[0] = vp;
	aassign		___620_pa $const2 ___614_vp 	%line{83} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 				else if (d < da[1]) {
	aref		$tmp623 ___620_da $const3 	%line{85} %argrw{"wrr"}
	lt		$tmp624 ___614_d $tmp623 	%argrw{"wrr"}
	if		$tmp624 1116 1130 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:86
# 					da[3] = da[2];
	aref		$tmp625 ___620_da $const4 	%line{86} %argrw{"wrr"}
	aassign		___620_da $const27 $tmp625 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 					da[2] = da[1];
	aref		$tmp626 ___620_da $const3 	%line{87} %argrw{"wrr"}
	aassign		___620_da $const4 $tmp626 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[1] = d;
	aassign		___620_da $const3 ___614_d 	%line{88} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					pa[3] = pa[2];
	aref		$tmp627 ___620_pa $const4 	%line{90} %argrw{"wrr"}
	aassign		___620_pa $const27 $tmp627 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:91
# 					pa[2] = pa[1];
	aref		$tmp628 ___620_pa $const3 	%line{91} %argrw{"wrr"}
	aassign		___620_pa $const4 $tmp628 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[1] = vp;
	aassign		___620_pa $const3 ___614_vp 	%line{92} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 				else if (d < da[2]) {
	aref		$tmp629 ___620_da $const4 	%line{94} %argrw{"wrr"}
	lt		$tmp630 ___614_d $tmp629 	%argrw{"wrr"}
	if		$tmp630 1125 1130 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:95
# 					da[3] = da[2];
	aref		$tmp631 ___620_da $const4 	%line{95} %argrw{"wrr"}
	aassign		___620_da $const27 $tmp631 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 					da[2] = d;
	aassign		___620_da $const4 ___614_d 	%line{96} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					pa[3] = pa[2];
	aref		$tmp632 ___620_pa $const4 	%line{98} %argrw{"wrr"}
	aassign		___620_pa $const27 $tmp632 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:99
# 					pa[2] = vp;
	aassign		___620_pa $const4 ___614_vp 	%line{99} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 				else if (d < da[3]) {
	aref		$tmp633 ___620_da $const27 	%line{101} %argrw{"wrr"}
	lt		$tmp634 ___614_d $tmp633 	%argrw{"wrr"}
	if		$tmp634 1130 1130 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:102
# 					da[3] = d;
	aassign		___620_da $const27 ___614_d 	%line{102} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 					pa[3] = vp;
	aassign		___620_pa $const27 ___614_vp 	%line{103} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp635 ___608_zz 	%line{66} %argrw{"wr"}
	add		___608_zz ___608_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp636 ___608_yy 	%line{65} %argrw{"wr"}
	add		___608_yy ___608_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp637 ___608_xx 	%line{64} %argrw{"wr"}
	add		___608_xx ___608_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	return da[n2] - da[n1];
	aref		$tmp638 ___620_da $const3 	%line{127} %argrw{"wrr"}
	aref		$tmp639 ___620_da $const2 	%argrw{"wrr"}
	sub		$tmp538 $tmp638 $tmp639 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:139
# 	float t = 10.0 * voronoi_F1F2(p);
	mul		___626_t $const7 $tmp538 	%line{139} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:140
# 	return (t > 1.0) ? 1.0 : t;
	gt		$tmp640 ___626_t $const12 	%line{140} %argrw{"wrr"}
	if		$tmp640 1143 1144 	%argrw{"r"}
	assign		$tmp537 $const12 	%argrw{"wr"}
	assign		$tmp537 ___626_t 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	mul		$tmp641 $const21 $tmp537 	%line{148} %argrw{"wrr"}
	sub		___642_t $tmp641 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:186
# 		return voronoi_CrS(p);
	return	%line{186}
# intern/cycles/kernel/shaders/node_texture.h:187
# 	if (basis == "Cell Noise")
	eq		$tmp642 $const10 $const52 	%line{187} %argrw{"wrr"}
	if		$tmp642 1152 1152 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:188
# 		return cellnoise(p);
	cellnoise	___642_t $tmp19 	%line{188} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:190
# 	return 0.0;
	assign		___642_t $const5 	%line{190} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:241
# 		if (hard)
	if		$const2 1157 1157 	%line{241} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:242
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp643 $const21 ___642_t 	%line{242} %argrw{"wrr"}
	sub		$tmp644 $tmp643 $const12 	%argrw{"wrr"}
	fabs		___642_t $tmp644 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:244
# 		sum += t * amp;
	mul		$tmp645 ___642_t ___640_amp 	%line{244} %argrw{"wrr"}
	add		___640_sum ___640_sum $tmp645 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:245
# 		amp *= 0.5;
	mul		___640_amp ___640_amp $const18 	%line{245} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:246
# 		fscale *= 2.0;
	mul		___640_fscale ___640_fscale $const21 	%line{246} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:238
# 	for (i = 0; i <= n; i++) {
	assign		$tmp646 ___640_i 	%line{238} %argrw{"wr"}
	add		___640_i ___640_i $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:249
# 	float rmd = octaves - floor(octaves);
	floor		$tmp647 ___640_octaves 	%line{249} %argrw{"wr"}
	sub		___640_rmd ___640_octaves $tmp647 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:251
# 	if (rmd != 0.0) {
	neq		$tmp648 ___640_rmd $const5 	%line{251} %argrw{"wrr"}
	if		$tmp648 2308 2318 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:252
# 		float t = noise_basis(fscale * p, basis);
	mul		$tmp649 ___640_fscale $tmp16 	%line{252} %argrw{"wrr"}
	functioncall	$const15 2280 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:173
# 	if (basis == "Perlin")
	eq		$tmp650 $const10 $const10 	%line{173} %argrw{"wrr"}
	if		$tmp650 1184 1184 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:174
# 		return safe_noise(p, 1);
	functioncall	$const16 1183 	%line{174} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:154
# 	float f = 0.0;
	assign		___633_f $const5 	%line{154} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:157
# 	if (type == 0)
	eq		$tmp651 $const3 $const2 	%line{157} %argrw{"wrr"}
	if		$tmp651 1176 1177 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:158
# 		f = noise("perlin", p);
	noise		___633_f $const17 $tmp649 	%line{158} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:162
# 		f = noise(p);
	noise		___633_f $tmp649 	%line{162} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:165
# 	if (!isfinite(f))
	isfinite	$tmp652 ___633_f 	%line{165} %argrw{"wr"}
	eq		$tmp653 $tmp652 $const2 	%argrw{"wrr"}
	if		$tmp653 1182 1182 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:166
# 		return 0.5;
	assign		___643_t $const18 	%line{166} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:168
# 	return f;
	assign		___643_t ___633_f 	%line{168} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:174
# 		return safe_noise(p, 1);
	return	%line{174}
# intern/cycles/kernel/shaders/node_texture.h:175
# 	if (basis == "Voronoi F1")
	eq		$tmp654 $const10 $const19 	%line{175} %argrw{"wrr"}
	if		$tmp654 1364 1364 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:176
# 		return voronoi_F1S(p);
	functioncall	$const20 1363 	%line{176} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:143
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	functioncall	$const22 1361 	%line{143} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:130
# float voronoi_F1(point p) { return voronoi_Fn(p, 0); }
	functioncall	$const23 1361 	%line{130} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:115
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const25 1360 	%line{115} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:55
# 	xi = (int)floor(p[0]);
	compref		$tmp657 $tmp649 $const2 	%line{55} %argrw{"wrr"}
	floor		$tmp656 $tmp657 	%argrw{"wr"}
	assign		___608_xi $tmp656 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:56
# 	yi = (int)floor(p[1]);
	compref		$tmp659 $tmp649 $const3 	%line{56} %argrw{"wrr"}
	floor		$tmp658 $tmp659 	%argrw{"wr"}
	assign		___608_yi $tmp658 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	zi = (int)floor(p[2]);
	compref		$tmp661 $tmp649 $const4 	%line{57} %argrw{"wrr"}
	floor		$tmp660 $tmp661 	%argrw{"wr"}
	assign		___608_zi $tmp660 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	da[0] = 1e10;
	aassign		___619_da $const2 $const26 	%line{59} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:60
# 	da[1] = 1e10;
	aassign		___619_da $const3 $const26 	%line{60} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[2] = 1e10;
	aassign		___619_da $const4 $const26 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[3] = 1e10;
	aassign		___619_da $const27 $const26 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp663 1205 1207 1358 1360 	%line{64} %argrw{"r"}
	sub		___608_xx ___608_xi $const3 	%argrw{"wrr"}
	add		$tmp662 ___608_xi $const3 	%argrw{"wrr"}
	le		$tmp663 ___608_xx $tmp662 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp665 1209 1211 1356 1358 	%line{65} %argrw{"r"}
	sub		___608_yy ___608_yi $const3 	%argrw{"wrr"}
	add		$tmp664 ___608_yi $const3 	%argrw{"wrr"}
	le		$tmp665 ___608_yy $tmp664 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp667 1213 1215 1354 1356 	%line{66} %argrw{"r"}
	sub		___608_zz ___608_zi $const3 	%argrw{"wrr"}
	add		$tmp666 ___608_zi $const3 	%argrw{"wrr"}
	le		$tmp667 ___608_zz $tmp666 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 				point ip = point(xx, yy, zz);
	assign		$tmp668 ___608_xx 	%line{67} %argrw{"wr"}
	assign		$tmp669 ___608_yy 	%argrw{"wr"}
	assign		$tmp670 ___608_zz 	%argrw{"wr"}
	point		___614_ip $tmp668 $tmp669 $tmp670 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const28 1232 	%line{68} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:43
# 	float r = cellnoise(p);
	cellnoise	___607_r ___614_ip 	%line{43} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:44
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp673 ___614_ip $const3 	%line{44} %argrw{"wrr"}
	compref		$tmp674 ___614_ip $const2 	%argrw{"wrr"}
	compref		$tmp675 ___614_ip $const4 	%argrw{"wrr"}
	point		$tmp672 $tmp673 $tmp674 $tmp675 	%argrw{"wrrr"}
	cellnoise	___607_g $tmp672 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp677 ___614_ip $const3 	%line{45} %argrw{"wrr"}
	compref		$tmp678 ___614_ip $const4 	%argrw{"wrr"}
	compref		$tmp679 ___614_ip $const2 	%argrw{"wrr"}
	point		$tmp676 $tmp677 $tmp678 $tmp679 	%argrw{"wrrr"}
	cellnoise	___607_b $tmp676 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	return color(r, g, b);
	color		$tmp671 ___607_r ___607_g ___607_b 	%line{47} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	assign		___614_vp $tmp671 	%line{68} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point pd = p - (vp + ip);
	add		$tmp680 ___614_vp ___614_ip 	%line{69} %argrw{"wrr"}
	sub		___614_pd $tmp649 $tmp680 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const29 1305 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	if (distance_metric == "Distance Squared")
	eq		$tmp681 $const24 $const24 	%line{21} %argrw{"wrr"}
	if		$tmp681 1240 1240 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:22
# 		return dot(d, d);
	dot		___614_d ___614_pd ___614_pd 	%line{22} %argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Actual Distance")
	eq		$tmp682 $const24 $const30 	%line{23} %argrw{"wrr"}
	if		$tmp682 1244 1244 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		return length(d);
	length		___614_d ___614_pd 	%line{24} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Manhattan")
	eq		$tmp683 $const24 $const31 	%line{25} %argrw{"wrr"}
	if		$tmp683 1255 1255 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		return fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp685 ___614_pd $const2 	%line{26} %argrw{"wrr"}
	fabs		$tmp684 $tmp685 	%argrw{"wr"}
	compref		$tmp687 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp686 $tmp687 	%argrw{"wr"}
	add		$tmp688 $tmp684 $tmp686 	%argrw{"wrr"}
	compref		$tmp690 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp689 $tmp690 	%argrw{"wr"}
	add		___614_d $tmp688 $tmp689 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Chebychev")
	eq		$tmp691 $const24 $const32 	%line{27} %argrw{"wrr"}
	if		$tmp691 1266 1266 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		return max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp693 ___614_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp692 $tmp693 	%argrw{"wr"}
	compref		$tmp696 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp695 $tmp696 	%argrw{"wr"}
	compref		$tmp698 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp697 $tmp698 	%argrw{"wr"}
	max		$tmp694 $tmp695 $tmp697 	%argrw{"wrr"}
	max		___614_d $tmp692 $tmp694 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp699 $const24 $const33 	%line{29} %argrw{"wrr"}
	if		$tmp699 1280 1280 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		return sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp702 ___614_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp701 $tmp702 	%argrw{"wr"}
	sqrt		$tmp700 $tmp701 	%argrw{"wr"}
	compref		$tmp705 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp704 $tmp705 	%argrw{"wr"}
	sqrt		$tmp703 $tmp704 	%argrw{"wr"}
	add		$tmp706 $tmp700 $tmp703 	%argrw{"wrr"}
	compref		$tmp709 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp708 $tmp709 	%argrw{"wr"}
	sqrt		$tmp707 $tmp708 	%argrw{"wr"}
	add		___614_d $tmp706 $tmp707 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp710 $const24 $const34 	%line{31} %argrw{"wrr"}
	if		$tmp710 1288 1288 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		return sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp713 ___614_pd ___614_pd 	%line{32} %argrw{"wrr"}
	mul		$tmp714 ___614_pd ___614_pd 	%argrw{"wrr"}
	dot		$tmp712 $tmp713 $tmp714 	%argrw{"wrr"}
	sqrt		$tmp711 $tmp712 	%argrw{"wr"}
	sqrt		___614_d $tmp711 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky")
	eq		$tmp715 $const24 $const35 	%line{33} %argrw{"wrr"}
	if		$tmp715 1304 1304 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		return pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp718 ___614_pd $const2 	%line{34} %argrw{"wrr"}
	fabs		$tmp717 $tmp718 	%argrw{"wr"}
	pow		$tmp716 $tmp717 $const5 	%argrw{"wrr"}
	compref		$tmp721 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp720 $tmp721 	%argrw{"wr"}
	pow		$tmp719 $tmp720 $const5 	%argrw{"wrr"}
	add		$tmp722 $tmp716 $tmp719 	%argrw{"wrr"}
	compref		$tmp725 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp724 $tmp725 	%argrw{"wr"}
	pow		$tmp723 $tmp724 $const5 	%argrw{"wrr"}
	add		$tmp726 $tmp722 $tmp723 	%argrw{"wrr"}
	div		$tmp727 $const12 $const5 	%argrw{"wrr"}
	pow		___614_d $tmp726 $tmp727 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:36
# 	return 0.0;
	assign		___614_d $const5 	%line{36} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				vp += point(xx, yy, zz);
	assign		$tmp729 ___608_xx 	%line{72} %argrw{"wr"}
	assign		$tmp730 ___608_yy 	%argrw{"wr"}
	assign		$tmp731 ___608_zz 	%argrw{"wr"}
	point		$tmp728 $tmp729 $tmp730 $tmp731 	%argrw{"wrrr"}
	add		___614_vp ___614_vp $tmp728 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				if (d < da[0]) {
	aref		$tmp732 ___619_da $const2 	%line{74} %argrw{"wrr"}
	lt		$tmp733 ___614_d $tmp732 	%argrw{"wrr"}
	if		$tmp733 1327 1354 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:75
# 					da[3] = da[2];
	aref		$tmp734 ___619_da $const4 	%line{75} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp734 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 					da[2] = da[1];
	aref		$tmp735 ___619_da $const3 	%line{76} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp735 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[1] = da[0];
	aref		$tmp736 ___619_da $const2 	%line{77} %argrw{"wrr"}
	aassign		___619_da $const3 $tmp736 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[0] = d;
	aassign		___619_da $const2 ___614_d 	%line{78} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					pa[3] = pa[2];
	aref		$tmp737 ___619_pa $const4 	%line{80} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp737 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:81
# 					pa[2] = pa[1];
	aref		$tmp738 ___619_pa $const3 	%line{81} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp738 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[1] = pa[0];
	aref		$tmp739 ___619_pa $const2 	%line{82} %argrw{"wrr"}
	aassign		___619_pa $const3 $tmp739 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[0] = vp;
	aassign		___619_pa $const2 ___614_vp 	%line{83} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 				else if (d < da[1]) {
	aref		$tmp740 ___619_da $const3 	%line{85} %argrw{"wrr"}
	lt		$tmp741 ___614_d $tmp740 	%argrw{"wrr"}
	if		$tmp741 1340 1354 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:86
# 					da[3] = da[2];
	aref		$tmp742 ___619_da $const4 	%line{86} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp742 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 					da[2] = da[1];
	aref		$tmp743 ___619_da $const3 	%line{87} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp743 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[1] = d;
	aassign		___619_da $const3 ___614_d 	%line{88} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					pa[3] = pa[2];
	aref		$tmp744 ___619_pa $const4 	%line{90} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp744 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:91
# 					pa[2] = pa[1];
	aref		$tmp745 ___619_pa $const3 	%line{91} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp745 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[1] = vp;
	aassign		___619_pa $const3 ___614_vp 	%line{92} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 				else if (d < da[2]) {
	aref		$tmp746 ___619_da $const4 	%line{94} %argrw{"wrr"}
	lt		$tmp747 ___614_d $tmp746 	%argrw{"wrr"}
	if		$tmp747 1349 1354 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:95
# 					da[3] = da[2];
	aref		$tmp748 ___619_da $const4 	%line{95} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp748 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 					da[2] = d;
	aassign		___619_da $const4 ___614_d 	%line{96} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					pa[3] = pa[2];
	aref		$tmp749 ___619_pa $const4 	%line{98} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp749 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:99
# 					pa[2] = vp;
	aassign		___619_pa $const4 ___614_vp 	%line{99} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 				else if (d < da[3]) {
	aref		$tmp750 ___619_da $const27 	%line{101} %argrw{"wrr"}
	lt		$tmp751 ___614_d $tmp750 	%argrw{"wrr"}
	if		$tmp751 1354 1354 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:102
# 					da[3] = d;
	aassign		___619_da $const27 ___614_d 	%line{102} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 					pa[3] = vp;
	aassign		___619_pa $const27 ___614_vp 	%line{103} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp752 ___608_zz 	%line{66} %argrw{"wr"}
	add		___608_zz ___608_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp753 ___608_yy 	%line{65} %argrw{"wr"}
	add		___608_yy ___608_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp754 ___608_xx 	%line{64} %argrw{"wr"}
	add		___608_xx ___608_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	return da[n];
	aref		$tmp655 ___619_da $const2 	%line{117} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:143
# float voronoi_F1S(point p) { return 2.0 * voronoi_F1(p) - 1.0; }
	mul		$tmp755 $const21 $tmp655 	%line{143} %argrw{"wrr"}
	sub		___643_t $tmp755 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:176
# 		return voronoi_F1S(p);
	return	%line{176}
# intern/cycles/kernel/shaders/node_texture.h:177
# 	if (basis == "Voronoi F2")
	eq		$tmp756 $const10 $const36 	%line{177} %argrw{"wrr"}
	if		$tmp756 1544 1544 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:178
# 		return voronoi_F2S(p);
	functioncall	$const37 1543 	%line{178} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:144
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	functioncall	$const38 1541 	%line{144} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:131
# float voronoi_F2(point p) { return voronoi_Fn(p, 1); }
	functioncall	$const23 1541 	%line{131} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:115
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const25 1540 	%line{115} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:55
# 	xi = (int)floor(p[0]);
	compref		$tmp759 $tmp649 $const2 	%line{55} %argrw{"wrr"}
	floor		$tmp758 $tmp759 	%argrw{"wr"}
	assign		___608_xi $tmp758 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:56
# 	yi = (int)floor(p[1]);
	compref		$tmp761 $tmp649 $const3 	%line{56} %argrw{"wrr"}
	floor		$tmp760 $tmp761 	%argrw{"wr"}
	assign		___608_yi $tmp760 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	zi = (int)floor(p[2]);
	compref		$tmp763 $tmp649 $const4 	%line{57} %argrw{"wrr"}
	floor		$tmp762 $tmp763 	%argrw{"wr"}
	assign		___608_zi $tmp762 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	da[0] = 1e10;
	aassign		___619_da $const2 $const26 	%line{59} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:60
# 	da[1] = 1e10;
	aassign		___619_da $const3 $const26 	%line{60} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[2] = 1e10;
	aassign		___619_da $const4 $const26 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[3] = 1e10;
	aassign		___619_da $const27 $const26 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp765 1385 1387 1538 1540 	%line{64} %argrw{"r"}
	sub		___608_xx ___608_xi $const3 	%argrw{"wrr"}
	add		$tmp764 ___608_xi $const3 	%argrw{"wrr"}
	le		$tmp765 ___608_xx $tmp764 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp767 1389 1391 1536 1538 	%line{65} %argrw{"r"}
	sub		___608_yy ___608_yi $const3 	%argrw{"wrr"}
	add		$tmp766 ___608_yi $const3 	%argrw{"wrr"}
	le		$tmp767 ___608_yy $tmp766 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp769 1393 1395 1534 1536 	%line{66} %argrw{"r"}
	sub		___608_zz ___608_zi $const3 	%argrw{"wrr"}
	add		$tmp768 ___608_zi $const3 	%argrw{"wrr"}
	le		$tmp769 ___608_zz $tmp768 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 				point ip = point(xx, yy, zz);
	assign		$tmp770 ___608_xx 	%line{67} %argrw{"wr"}
	assign		$tmp771 ___608_yy 	%argrw{"wr"}
	assign		$tmp772 ___608_zz 	%argrw{"wr"}
	point		___614_ip $tmp770 $tmp771 $tmp772 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const28 1412 	%line{68} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:43
# 	float r = cellnoise(p);
	cellnoise	___607_r ___614_ip 	%line{43} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:44
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp775 ___614_ip $const3 	%line{44} %argrw{"wrr"}
	compref		$tmp776 ___614_ip $const2 	%argrw{"wrr"}
	compref		$tmp777 ___614_ip $const4 	%argrw{"wrr"}
	point		$tmp774 $tmp775 $tmp776 $tmp777 	%argrw{"wrrr"}
	cellnoise	___607_g $tmp774 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp779 ___614_ip $const3 	%line{45} %argrw{"wrr"}
	compref		$tmp780 ___614_ip $const4 	%argrw{"wrr"}
	compref		$tmp781 ___614_ip $const2 	%argrw{"wrr"}
	point		$tmp778 $tmp779 $tmp780 $tmp781 	%argrw{"wrrr"}
	cellnoise	___607_b $tmp778 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	return color(r, g, b);
	color		$tmp773 ___607_r ___607_g ___607_b 	%line{47} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	assign		___614_vp $tmp773 	%line{68} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point pd = p - (vp + ip);
	add		$tmp782 ___614_vp ___614_ip 	%line{69} %argrw{"wrr"}
	sub		___614_pd $tmp649 $tmp782 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const29 1485 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	if (distance_metric == "Distance Squared")
	eq		$tmp783 $const24 $const24 	%line{21} %argrw{"wrr"}
	if		$tmp783 1420 1420 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:22
# 		return dot(d, d);
	dot		___614_d ___614_pd ___614_pd 	%line{22} %argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Actual Distance")
	eq		$tmp784 $const24 $const30 	%line{23} %argrw{"wrr"}
	if		$tmp784 1424 1424 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		return length(d);
	length		___614_d ___614_pd 	%line{24} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Manhattan")
	eq		$tmp785 $const24 $const31 	%line{25} %argrw{"wrr"}
	if		$tmp785 1435 1435 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		return fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp787 ___614_pd $const2 	%line{26} %argrw{"wrr"}
	fabs		$tmp786 $tmp787 	%argrw{"wr"}
	compref		$tmp789 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp788 $tmp789 	%argrw{"wr"}
	add		$tmp790 $tmp786 $tmp788 	%argrw{"wrr"}
	compref		$tmp792 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp791 $tmp792 	%argrw{"wr"}
	add		___614_d $tmp790 $tmp791 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Chebychev")
	eq		$tmp793 $const24 $const32 	%line{27} %argrw{"wrr"}
	if		$tmp793 1446 1446 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		return max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp795 ___614_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp794 $tmp795 	%argrw{"wr"}
	compref		$tmp798 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp797 $tmp798 	%argrw{"wr"}
	compref		$tmp800 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp799 $tmp800 	%argrw{"wr"}
	max		$tmp796 $tmp797 $tmp799 	%argrw{"wrr"}
	max		___614_d $tmp794 $tmp796 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp801 $const24 $const33 	%line{29} %argrw{"wrr"}
	if		$tmp801 1460 1460 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		return sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp804 ___614_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp803 $tmp804 	%argrw{"wr"}
	sqrt		$tmp802 $tmp803 	%argrw{"wr"}
	compref		$tmp807 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp806 $tmp807 	%argrw{"wr"}
	sqrt		$tmp805 $tmp806 	%argrw{"wr"}
	add		$tmp808 $tmp802 $tmp805 	%argrw{"wrr"}
	compref		$tmp811 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp810 $tmp811 	%argrw{"wr"}
	sqrt		$tmp809 $tmp810 	%argrw{"wr"}
	add		___614_d $tmp808 $tmp809 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp812 $const24 $const34 	%line{31} %argrw{"wrr"}
	if		$tmp812 1468 1468 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		return sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp815 ___614_pd ___614_pd 	%line{32} %argrw{"wrr"}
	mul		$tmp816 ___614_pd ___614_pd 	%argrw{"wrr"}
	dot		$tmp814 $tmp815 $tmp816 	%argrw{"wrr"}
	sqrt		$tmp813 $tmp814 	%argrw{"wr"}
	sqrt		___614_d $tmp813 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky")
	eq		$tmp817 $const24 $const35 	%line{33} %argrw{"wrr"}
	if		$tmp817 1484 1484 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		return pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp820 ___614_pd $const2 	%line{34} %argrw{"wrr"}
	fabs		$tmp819 $tmp820 	%argrw{"wr"}
	pow		$tmp818 $tmp819 $const5 	%argrw{"wrr"}
	compref		$tmp823 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp822 $tmp823 	%argrw{"wr"}
	pow		$tmp821 $tmp822 $const5 	%argrw{"wrr"}
	add		$tmp824 $tmp818 $tmp821 	%argrw{"wrr"}
	compref		$tmp827 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp826 $tmp827 	%argrw{"wr"}
	pow		$tmp825 $tmp826 $const5 	%argrw{"wrr"}
	add		$tmp828 $tmp824 $tmp825 	%argrw{"wrr"}
	div		$tmp829 $const12 $const5 	%argrw{"wrr"}
	pow		___614_d $tmp828 $tmp829 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:36
# 	return 0.0;
	assign		___614_d $const5 	%line{36} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				vp += point(xx, yy, zz);
	assign		$tmp831 ___608_xx 	%line{72} %argrw{"wr"}
	assign		$tmp832 ___608_yy 	%argrw{"wr"}
	assign		$tmp833 ___608_zz 	%argrw{"wr"}
	point		$tmp830 $tmp831 $tmp832 $tmp833 	%argrw{"wrrr"}
	add		___614_vp ___614_vp $tmp830 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				if (d < da[0]) {
	aref		$tmp834 ___619_da $const2 	%line{74} %argrw{"wrr"}
	lt		$tmp835 ___614_d $tmp834 	%argrw{"wrr"}
	if		$tmp835 1507 1534 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:75
# 					da[3] = da[2];
	aref		$tmp836 ___619_da $const4 	%line{75} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp836 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 					da[2] = da[1];
	aref		$tmp837 ___619_da $const3 	%line{76} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp837 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[1] = da[0];
	aref		$tmp838 ___619_da $const2 	%line{77} %argrw{"wrr"}
	aassign		___619_da $const3 $tmp838 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[0] = d;
	aassign		___619_da $const2 ___614_d 	%line{78} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					pa[3] = pa[2];
	aref		$tmp839 ___619_pa $const4 	%line{80} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp839 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:81
# 					pa[2] = pa[1];
	aref		$tmp840 ___619_pa $const3 	%line{81} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp840 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[1] = pa[0];
	aref		$tmp841 ___619_pa $const2 	%line{82} %argrw{"wrr"}
	aassign		___619_pa $const3 $tmp841 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[0] = vp;
	aassign		___619_pa $const2 ___614_vp 	%line{83} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 				else if (d < da[1]) {
	aref		$tmp842 ___619_da $const3 	%line{85} %argrw{"wrr"}
	lt		$tmp843 ___614_d $tmp842 	%argrw{"wrr"}
	if		$tmp843 1520 1534 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:86
# 					da[3] = da[2];
	aref		$tmp844 ___619_da $const4 	%line{86} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp844 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 					da[2] = da[1];
	aref		$tmp845 ___619_da $const3 	%line{87} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp845 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[1] = d;
	aassign		___619_da $const3 ___614_d 	%line{88} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					pa[3] = pa[2];
	aref		$tmp846 ___619_pa $const4 	%line{90} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp846 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:91
# 					pa[2] = pa[1];
	aref		$tmp847 ___619_pa $const3 	%line{91} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp847 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[1] = vp;
	aassign		___619_pa $const3 ___614_vp 	%line{92} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 				else if (d < da[2]) {
	aref		$tmp848 ___619_da $const4 	%line{94} %argrw{"wrr"}
	lt		$tmp849 ___614_d $tmp848 	%argrw{"wrr"}
	if		$tmp849 1529 1534 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:95
# 					da[3] = da[2];
	aref		$tmp850 ___619_da $const4 	%line{95} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp850 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 					da[2] = d;
	aassign		___619_da $const4 ___614_d 	%line{96} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					pa[3] = pa[2];
	aref		$tmp851 ___619_pa $const4 	%line{98} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp851 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:99
# 					pa[2] = vp;
	aassign		___619_pa $const4 ___614_vp 	%line{99} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 				else if (d < da[3]) {
	aref		$tmp852 ___619_da $const27 	%line{101} %argrw{"wrr"}
	lt		$tmp853 ___614_d $tmp852 	%argrw{"wrr"}
	if		$tmp853 1534 1534 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:102
# 					da[3] = d;
	aassign		___619_da $const27 ___614_d 	%line{102} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 					pa[3] = vp;
	aassign		___619_pa $const27 ___614_vp 	%line{103} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp854 ___608_zz 	%line{66} %argrw{"wr"}
	add		___608_zz ___608_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp855 ___608_yy 	%line{65} %argrw{"wr"}
	add		___608_yy ___608_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp856 ___608_xx 	%line{64} %argrw{"wr"}
	add		___608_xx ___608_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	return da[n];
	aref		$tmp757 ___619_da $const3 	%line{117} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:144
# float voronoi_F2S(point p) { return 2.0 * voronoi_F2(p) - 1.0; }
	mul		$tmp857 $const21 $tmp757 	%line{144} %argrw{"wrr"}
	sub		___643_t $tmp857 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:178
# 		return voronoi_F2S(p);
	return	%line{178}
# intern/cycles/kernel/shaders/node_texture.h:179
# 	if (basis == "Voronoi F3")
	eq		$tmp858 $const10 $const39 	%line{179} %argrw{"wrr"}
	if		$tmp858 1724 1724 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:180
# 		return voronoi_F3S(p);
	functioncall	$const40 1723 	%line{180} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	functioncall	$const41 1721 	%line{145} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:132
# float voronoi_F3(point p) { return voronoi_Fn(p, 2); }
	functioncall	$const23 1721 	%line{132} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:115
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const25 1720 	%line{115} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:55
# 	xi = (int)floor(p[0]);
	compref		$tmp861 $tmp649 $const2 	%line{55} %argrw{"wrr"}
	floor		$tmp860 $tmp861 	%argrw{"wr"}
	assign		___608_xi $tmp860 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:56
# 	yi = (int)floor(p[1]);
	compref		$tmp863 $tmp649 $const3 	%line{56} %argrw{"wrr"}
	floor		$tmp862 $tmp863 	%argrw{"wr"}
	assign		___608_yi $tmp862 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	zi = (int)floor(p[2]);
	compref		$tmp865 $tmp649 $const4 	%line{57} %argrw{"wrr"}
	floor		$tmp864 $tmp865 	%argrw{"wr"}
	assign		___608_zi $tmp864 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	da[0] = 1e10;
	aassign		___619_da $const2 $const26 	%line{59} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:60
# 	da[1] = 1e10;
	aassign		___619_da $const3 $const26 	%line{60} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[2] = 1e10;
	aassign		___619_da $const4 $const26 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[3] = 1e10;
	aassign		___619_da $const27 $const26 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp867 1565 1567 1718 1720 	%line{64} %argrw{"r"}
	sub		___608_xx ___608_xi $const3 	%argrw{"wrr"}
	add		$tmp866 ___608_xi $const3 	%argrw{"wrr"}
	le		$tmp867 ___608_xx $tmp866 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp869 1569 1571 1716 1718 	%line{65} %argrw{"r"}
	sub		___608_yy ___608_yi $const3 	%argrw{"wrr"}
	add		$tmp868 ___608_yi $const3 	%argrw{"wrr"}
	le		$tmp869 ___608_yy $tmp868 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp871 1573 1575 1714 1716 	%line{66} %argrw{"r"}
	sub		___608_zz ___608_zi $const3 	%argrw{"wrr"}
	add		$tmp870 ___608_zi $const3 	%argrw{"wrr"}
	le		$tmp871 ___608_zz $tmp870 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 				point ip = point(xx, yy, zz);
	assign		$tmp872 ___608_xx 	%line{67} %argrw{"wr"}
	assign		$tmp873 ___608_yy 	%argrw{"wr"}
	assign		$tmp874 ___608_zz 	%argrw{"wr"}
	point		___614_ip $tmp872 $tmp873 $tmp874 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const28 1592 	%line{68} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:43
# 	float r = cellnoise(p);
	cellnoise	___607_r ___614_ip 	%line{43} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:44
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp877 ___614_ip $const3 	%line{44} %argrw{"wrr"}
	compref		$tmp878 ___614_ip $const2 	%argrw{"wrr"}
	compref		$tmp879 ___614_ip $const4 	%argrw{"wrr"}
	point		$tmp876 $tmp877 $tmp878 $tmp879 	%argrw{"wrrr"}
	cellnoise	___607_g $tmp876 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp881 ___614_ip $const3 	%line{45} %argrw{"wrr"}
	compref		$tmp882 ___614_ip $const4 	%argrw{"wrr"}
	compref		$tmp883 ___614_ip $const2 	%argrw{"wrr"}
	point		$tmp880 $tmp881 $tmp882 $tmp883 	%argrw{"wrrr"}
	cellnoise	___607_b $tmp880 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	return color(r, g, b);
	color		$tmp875 ___607_r ___607_g ___607_b 	%line{47} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	assign		___614_vp $tmp875 	%line{68} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point pd = p - (vp + ip);
	add		$tmp884 ___614_vp ___614_ip 	%line{69} %argrw{"wrr"}
	sub		___614_pd $tmp649 $tmp884 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const29 1665 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	if (distance_metric == "Distance Squared")
	eq		$tmp885 $const24 $const24 	%line{21} %argrw{"wrr"}
	if		$tmp885 1600 1600 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:22
# 		return dot(d, d);
	dot		___614_d ___614_pd ___614_pd 	%line{22} %argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Actual Distance")
	eq		$tmp886 $const24 $const30 	%line{23} %argrw{"wrr"}
	if		$tmp886 1604 1604 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		return length(d);
	length		___614_d ___614_pd 	%line{24} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Manhattan")
	eq		$tmp887 $const24 $const31 	%line{25} %argrw{"wrr"}
	if		$tmp887 1615 1615 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		return fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp889 ___614_pd $const2 	%line{26} %argrw{"wrr"}
	fabs		$tmp888 $tmp889 	%argrw{"wr"}
	compref		$tmp891 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp890 $tmp891 	%argrw{"wr"}
	add		$tmp892 $tmp888 $tmp890 	%argrw{"wrr"}
	compref		$tmp894 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp893 $tmp894 	%argrw{"wr"}
	add		___614_d $tmp892 $tmp893 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Chebychev")
	eq		$tmp895 $const24 $const32 	%line{27} %argrw{"wrr"}
	if		$tmp895 1626 1626 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		return max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp897 ___614_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp896 $tmp897 	%argrw{"wr"}
	compref		$tmp900 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp899 $tmp900 	%argrw{"wr"}
	compref		$tmp902 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp901 $tmp902 	%argrw{"wr"}
	max		$tmp898 $tmp899 $tmp901 	%argrw{"wrr"}
	max		___614_d $tmp896 $tmp898 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp903 $const24 $const33 	%line{29} %argrw{"wrr"}
	if		$tmp903 1640 1640 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		return sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp906 ___614_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp905 $tmp906 	%argrw{"wr"}
	sqrt		$tmp904 $tmp905 	%argrw{"wr"}
	compref		$tmp909 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp908 $tmp909 	%argrw{"wr"}
	sqrt		$tmp907 $tmp908 	%argrw{"wr"}
	add		$tmp910 $tmp904 $tmp907 	%argrw{"wrr"}
	compref		$tmp913 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp912 $tmp913 	%argrw{"wr"}
	sqrt		$tmp911 $tmp912 	%argrw{"wr"}
	add		___614_d $tmp910 $tmp911 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp914 $const24 $const34 	%line{31} %argrw{"wrr"}
	if		$tmp914 1648 1648 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		return sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp917 ___614_pd ___614_pd 	%line{32} %argrw{"wrr"}
	mul		$tmp918 ___614_pd ___614_pd 	%argrw{"wrr"}
	dot		$tmp916 $tmp917 $tmp918 	%argrw{"wrr"}
	sqrt		$tmp915 $tmp916 	%argrw{"wr"}
	sqrt		___614_d $tmp915 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky")
	eq		$tmp919 $const24 $const35 	%line{33} %argrw{"wrr"}
	if		$tmp919 1664 1664 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		return pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp922 ___614_pd $const2 	%line{34} %argrw{"wrr"}
	fabs		$tmp921 $tmp922 	%argrw{"wr"}
	pow		$tmp920 $tmp921 $const5 	%argrw{"wrr"}
	compref		$tmp925 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp924 $tmp925 	%argrw{"wr"}
	pow		$tmp923 $tmp924 $const5 	%argrw{"wrr"}
	add		$tmp926 $tmp920 $tmp923 	%argrw{"wrr"}
	compref		$tmp929 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp928 $tmp929 	%argrw{"wr"}
	pow		$tmp927 $tmp928 $const5 	%argrw{"wrr"}
	add		$tmp930 $tmp926 $tmp927 	%argrw{"wrr"}
	div		$tmp931 $const12 $const5 	%argrw{"wrr"}
	pow		___614_d $tmp930 $tmp931 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:36
# 	return 0.0;
	assign		___614_d $const5 	%line{36} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				vp += point(xx, yy, zz);
	assign		$tmp933 ___608_xx 	%line{72} %argrw{"wr"}
	assign		$tmp934 ___608_yy 	%argrw{"wr"}
	assign		$tmp935 ___608_zz 	%argrw{"wr"}
	point		$tmp932 $tmp933 $tmp934 $tmp935 	%argrw{"wrrr"}
	add		___614_vp ___614_vp $tmp932 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				if (d < da[0]) {
	aref		$tmp936 ___619_da $const2 	%line{74} %argrw{"wrr"}
	lt		$tmp937 ___614_d $tmp936 	%argrw{"wrr"}
	if		$tmp937 1687 1714 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:75
# 					da[3] = da[2];
	aref		$tmp938 ___619_da $const4 	%line{75} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp938 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 					da[2] = da[1];
	aref		$tmp939 ___619_da $const3 	%line{76} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp939 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[1] = da[0];
	aref		$tmp940 ___619_da $const2 	%line{77} %argrw{"wrr"}
	aassign		___619_da $const3 $tmp940 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[0] = d;
	aassign		___619_da $const2 ___614_d 	%line{78} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					pa[3] = pa[2];
	aref		$tmp941 ___619_pa $const4 	%line{80} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp941 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:81
# 					pa[2] = pa[1];
	aref		$tmp942 ___619_pa $const3 	%line{81} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp942 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[1] = pa[0];
	aref		$tmp943 ___619_pa $const2 	%line{82} %argrw{"wrr"}
	aassign		___619_pa $const3 $tmp943 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[0] = vp;
	aassign		___619_pa $const2 ___614_vp 	%line{83} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 				else if (d < da[1]) {
	aref		$tmp944 ___619_da $const3 	%line{85} %argrw{"wrr"}
	lt		$tmp945 ___614_d $tmp944 	%argrw{"wrr"}
	if		$tmp945 1700 1714 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:86
# 					da[3] = da[2];
	aref		$tmp946 ___619_da $const4 	%line{86} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp946 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 					da[2] = da[1];
	aref		$tmp947 ___619_da $const3 	%line{87} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp947 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[1] = d;
	aassign		___619_da $const3 ___614_d 	%line{88} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					pa[3] = pa[2];
	aref		$tmp948 ___619_pa $const4 	%line{90} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp948 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:91
# 					pa[2] = pa[1];
	aref		$tmp949 ___619_pa $const3 	%line{91} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp949 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[1] = vp;
	aassign		___619_pa $const3 ___614_vp 	%line{92} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 				else if (d < da[2]) {
	aref		$tmp950 ___619_da $const4 	%line{94} %argrw{"wrr"}
	lt		$tmp951 ___614_d $tmp950 	%argrw{"wrr"}
	if		$tmp951 1709 1714 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:95
# 					da[3] = da[2];
	aref		$tmp952 ___619_da $const4 	%line{95} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp952 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 					da[2] = d;
	aassign		___619_da $const4 ___614_d 	%line{96} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					pa[3] = pa[2];
	aref		$tmp953 ___619_pa $const4 	%line{98} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp953 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:99
# 					pa[2] = vp;
	aassign		___619_pa $const4 ___614_vp 	%line{99} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 				else if (d < da[3]) {
	aref		$tmp954 ___619_da $const27 	%line{101} %argrw{"wrr"}
	lt		$tmp955 ___614_d $tmp954 	%argrw{"wrr"}
	if		$tmp955 1714 1714 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:102
# 					da[3] = d;
	aassign		___619_da $const27 ___614_d 	%line{102} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 					pa[3] = vp;
	aassign		___619_pa $const27 ___614_vp 	%line{103} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp956 ___608_zz 	%line{66} %argrw{"wr"}
	add		___608_zz ___608_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp957 ___608_yy 	%line{65} %argrw{"wr"}
	add		___608_yy ___608_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp958 ___608_xx 	%line{64} %argrw{"wr"}
	add		___608_xx ___608_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	return da[n];
	aref		$tmp859 ___619_da $const4 	%line{117} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:145
# float voronoi_F3S(point p) { return 2.0 * voronoi_F3(p) - 1.0; }
	mul		$tmp959 $const21 $tmp859 	%line{145} %argrw{"wrr"}
	sub		___643_t $tmp959 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:180
# 		return voronoi_F3S(p);
	return	%line{180}
# intern/cycles/kernel/shaders/node_texture.h:181
# 	if (basis == "Voronoi F4")
	eq		$tmp960 $const10 $const42 	%line{181} %argrw{"wrr"}
	if		$tmp960 1904 1904 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:182
# 		return voronoi_F4S(p);
	functioncall	$const43 1903 	%line{182} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	functioncall	$const44 1901 	%line{146} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:133
# float voronoi_F4(point p) { return voronoi_Fn(p, 3); }
	functioncall	$const23 1901 	%line{133} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:115
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const25 1900 	%line{115} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:55
# 	xi = (int)floor(p[0]);
	compref		$tmp963 $tmp649 $const2 	%line{55} %argrw{"wrr"}
	floor		$tmp962 $tmp963 	%argrw{"wr"}
	assign		___608_xi $tmp962 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:56
# 	yi = (int)floor(p[1]);
	compref		$tmp965 $tmp649 $const3 	%line{56} %argrw{"wrr"}
	floor		$tmp964 $tmp965 	%argrw{"wr"}
	assign		___608_yi $tmp964 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	zi = (int)floor(p[2]);
	compref		$tmp967 $tmp649 $const4 	%line{57} %argrw{"wrr"}
	floor		$tmp966 $tmp967 	%argrw{"wr"}
	assign		___608_zi $tmp966 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	da[0] = 1e10;
	aassign		___619_da $const2 $const26 	%line{59} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:60
# 	da[1] = 1e10;
	aassign		___619_da $const3 $const26 	%line{60} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[2] = 1e10;
	aassign		___619_da $const4 $const26 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[3] = 1e10;
	aassign		___619_da $const27 $const26 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp969 1745 1747 1898 1900 	%line{64} %argrw{"r"}
	sub		___608_xx ___608_xi $const3 	%argrw{"wrr"}
	add		$tmp968 ___608_xi $const3 	%argrw{"wrr"}
	le		$tmp969 ___608_xx $tmp968 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp971 1749 1751 1896 1898 	%line{65} %argrw{"r"}
	sub		___608_yy ___608_yi $const3 	%argrw{"wrr"}
	add		$tmp970 ___608_yi $const3 	%argrw{"wrr"}
	le		$tmp971 ___608_yy $tmp970 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp973 1753 1755 1894 1896 	%line{66} %argrw{"r"}
	sub		___608_zz ___608_zi $const3 	%argrw{"wrr"}
	add		$tmp972 ___608_zi $const3 	%argrw{"wrr"}
	le		$tmp973 ___608_zz $tmp972 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 				point ip = point(xx, yy, zz);
	assign		$tmp974 ___608_xx 	%line{67} %argrw{"wr"}
	assign		$tmp975 ___608_yy 	%argrw{"wr"}
	assign		$tmp976 ___608_zz 	%argrw{"wr"}
	point		___614_ip $tmp974 $tmp975 $tmp976 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const28 1772 	%line{68} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:43
# 	float r = cellnoise(p);
	cellnoise	___607_r ___614_ip 	%line{43} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:44
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp979 ___614_ip $const3 	%line{44} %argrw{"wrr"}
	compref		$tmp980 ___614_ip $const2 	%argrw{"wrr"}
	compref		$tmp981 ___614_ip $const4 	%argrw{"wrr"}
	point		$tmp978 $tmp979 $tmp980 $tmp981 	%argrw{"wrrr"}
	cellnoise	___607_g $tmp978 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp983 ___614_ip $const3 	%line{45} %argrw{"wrr"}
	compref		$tmp984 ___614_ip $const4 	%argrw{"wrr"}
	compref		$tmp985 ___614_ip $const2 	%argrw{"wrr"}
	point		$tmp982 $tmp983 $tmp984 $tmp985 	%argrw{"wrrr"}
	cellnoise	___607_b $tmp982 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	return color(r, g, b);
	color		$tmp977 ___607_r ___607_g ___607_b 	%line{47} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	assign		___614_vp $tmp977 	%line{68} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point pd = p - (vp + ip);
	add		$tmp986 ___614_vp ___614_ip 	%line{69} %argrw{"wrr"}
	sub		___614_pd $tmp649 $tmp986 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const29 1845 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	if (distance_metric == "Distance Squared")
	eq		$tmp987 $const24 $const24 	%line{21} %argrw{"wrr"}
	if		$tmp987 1780 1780 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:22
# 		return dot(d, d);
	dot		___614_d ___614_pd ___614_pd 	%line{22} %argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Actual Distance")
	eq		$tmp988 $const24 $const30 	%line{23} %argrw{"wrr"}
	if		$tmp988 1784 1784 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		return length(d);
	length		___614_d ___614_pd 	%line{24} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Manhattan")
	eq		$tmp989 $const24 $const31 	%line{25} %argrw{"wrr"}
	if		$tmp989 1795 1795 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		return fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp991 ___614_pd $const2 	%line{26} %argrw{"wrr"}
	fabs		$tmp990 $tmp991 	%argrw{"wr"}
	compref		$tmp993 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp992 $tmp993 	%argrw{"wr"}
	add		$tmp994 $tmp990 $tmp992 	%argrw{"wrr"}
	compref		$tmp996 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp995 $tmp996 	%argrw{"wr"}
	add		___614_d $tmp994 $tmp995 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Chebychev")
	eq		$tmp997 $const24 $const32 	%line{27} %argrw{"wrr"}
	if		$tmp997 1806 1806 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		return max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp999 ___614_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp998 $tmp999 	%argrw{"wr"}
	compref		$tmp1002 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1001 $tmp1002 	%argrw{"wr"}
	compref		$tmp1004 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1003 $tmp1004 	%argrw{"wr"}
	max		$tmp1000 $tmp1001 $tmp1003 	%argrw{"wrr"}
	max		___614_d $tmp998 $tmp1000 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1005 $const24 $const33 	%line{29} %argrw{"wrr"}
	if		$tmp1005 1820 1820 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		return sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1008 ___614_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp1007 $tmp1008 	%argrw{"wr"}
	sqrt		$tmp1006 $tmp1007 	%argrw{"wr"}
	compref		$tmp1011 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1010 $tmp1011 	%argrw{"wr"}
	sqrt		$tmp1009 $tmp1010 	%argrw{"wr"}
	add		$tmp1012 $tmp1006 $tmp1009 	%argrw{"wrr"}
	compref		$tmp1015 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1014 $tmp1015 	%argrw{"wr"}
	sqrt		$tmp1013 $tmp1014 	%argrw{"wr"}
	add		___614_d $tmp1012 $tmp1013 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1016 $const24 $const34 	%line{31} %argrw{"wrr"}
	if		$tmp1016 1828 1828 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		return sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1019 ___614_pd ___614_pd 	%line{32} %argrw{"wrr"}
	mul		$tmp1020 ___614_pd ___614_pd 	%argrw{"wrr"}
	dot		$tmp1018 $tmp1019 $tmp1020 	%argrw{"wrr"}
	sqrt		$tmp1017 $tmp1018 	%argrw{"wr"}
	sqrt		___614_d $tmp1017 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1021 $const24 $const35 	%line{33} %argrw{"wrr"}
	if		$tmp1021 1844 1844 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		return pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1024 ___614_pd $const2 	%line{34} %argrw{"wrr"}
	fabs		$tmp1023 $tmp1024 	%argrw{"wr"}
	pow		$tmp1022 $tmp1023 $const5 	%argrw{"wrr"}
	compref		$tmp1027 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1026 $tmp1027 	%argrw{"wr"}
	pow		$tmp1025 $tmp1026 $const5 	%argrw{"wrr"}
	add		$tmp1028 $tmp1022 $tmp1025 	%argrw{"wrr"}
	compref		$tmp1031 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1030 $tmp1031 	%argrw{"wr"}
	pow		$tmp1029 $tmp1030 $const5 	%argrw{"wrr"}
	add		$tmp1032 $tmp1028 $tmp1029 	%argrw{"wrr"}
	div		$tmp1033 $const12 $const5 	%argrw{"wrr"}
	pow		___614_d $tmp1032 $tmp1033 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:36
# 	return 0.0;
	assign		___614_d $const5 	%line{36} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				vp += point(xx, yy, zz);
	assign		$tmp1035 ___608_xx 	%line{72} %argrw{"wr"}
	assign		$tmp1036 ___608_yy 	%argrw{"wr"}
	assign		$tmp1037 ___608_zz 	%argrw{"wr"}
	point		$tmp1034 $tmp1035 $tmp1036 $tmp1037 	%argrw{"wrrr"}
	add		___614_vp ___614_vp $tmp1034 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				if (d < da[0]) {
	aref		$tmp1038 ___619_da $const2 	%line{74} %argrw{"wrr"}
	lt		$tmp1039 ___614_d $tmp1038 	%argrw{"wrr"}
	if		$tmp1039 1867 1894 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:75
# 					da[3] = da[2];
	aref		$tmp1040 ___619_da $const4 	%line{75} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp1040 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 					da[2] = da[1];
	aref		$tmp1041 ___619_da $const3 	%line{76} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp1041 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[1] = da[0];
	aref		$tmp1042 ___619_da $const2 	%line{77} %argrw{"wrr"}
	aassign		___619_da $const3 $tmp1042 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[0] = d;
	aassign		___619_da $const2 ___614_d 	%line{78} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					pa[3] = pa[2];
	aref		$tmp1043 ___619_pa $const4 	%line{80} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp1043 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:81
# 					pa[2] = pa[1];
	aref		$tmp1044 ___619_pa $const3 	%line{81} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp1044 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[1] = pa[0];
	aref		$tmp1045 ___619_pa $const2 	%line{82} %argrw{"wrr"}
	aassign		___619_pa $const3 $tmp1045 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[0] = vp;
	aassign		___619_pa $const2 ___614_vp 	%line{83} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 				else if (d < da[1]) {
	aref		$tmp1046 ___619_da $const3 	%line{85} %argrw{"wrr"}
	lt		$tmp1047 ___614_d $tmp1046 	%argrw{"wrr"}
	if		$tmp1047 1880 1894 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:86
# 					da[3] = da[2];
	aref		$tmp1048 ___619_da $const4 	%line{86} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp1048 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 					da[2] = da[1];
	aref		$tmp1049 ___619_da $const3 	%line{87} %argrw{"wrr"}
	aassign		___619_da $const4 $tmp1049 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[1] = d;
	aassign		___619_da $const3 ___614_d 	%line{88} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					pa[3] = pa[2];
	aref		$tmp1050 ___619_pa $const4 	%line{90} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp1050 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:91
# 					pa[2] = pa[1];
	aref		$tmp1051 ___619_pa $const3 	%line{91} %argrw{"wrr"}
	aassign		___619_pa $const4 $tmp1051 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[1] = vp;
	aassign		___619_pa $const3 ___614_vp 	%line{92} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 				else if (d < da[2]) {
	aref		$tmp1052 ___619_da $const4 	%line{94} %argrw{"wrr"}
	lt		$tmp1053 ___614_d $tmp1052 	%argrw{"wrr"}
	if		$tmp1053 1889 1894 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:95
# 					da[3] = da[2];
	aref		$tmp1054 ___619_da $const4 	%line{95} %argrw{"wrr"}
	aassign		___619_da $const27 $tmp1054 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 					da[2] = d;
	aassign		___619_da $const4 ___614_d 	%line{96} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					pa[3] = pa[2];
	aref		$tmp1055 ___619_pa $const4 	%line{98} %argrw{"wrr"}
	aassign		___619_pa $const27 $tmp1055 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:99
# 					pa[2] = vp;
	aassign		___619_pa $const4 ___614_vp 	%line{99} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 				else if (d < da[3]) {
	aref		$tmp1056 ___619_da $const27 	%line{101} %argrw{"wrr"}
	lt		$tmp1057 ___614_d $tmp1056 	%argrw{"wrr"}
	if		$tmp1057 1894 1894 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:102
# 					da[3] = d;
	aassign		___619_da $const27 ___614_d 	%line{102} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 					pa[3] = vp;
	aassign		___619_pa $const27 ___614_vp 	%line{103} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1058 ___608_zz 	%line{66} %argrw{"wr"}
	add		___608_zz ___608_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1059 ___608_yy 	%line{65} %argrw{"wr"}
	add		___608_yy ___608_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1060 ___608_xx 	%line{64} %argrw{"wr"}
	add		___608_xx ___608_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:117
# 	return da[n];
	aref		$tmp961 ___619_da $const27 	%line{117} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:146
# float voronoi_F4S(point p) { return 2.0 * voronoi_F4(p) - 1.0; }
	mul		$tmp1061 $const21 $tmp961 	%line{146} %argrw{"wrr"}
	sub		___643_t $tmp1061 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:182
# 		return voronoi_F4S(p);
	return	%line{182}
# intern/cycles/kernel/shaders/node_texture.h:183
# 	if (basis == "Voronoi F2-F1")
	eq		$tmp1062 $const10 $const45 	%line{183} %argrw{"wrr"}
	if		$tmp1062 2086 2086 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:184
# 		return voronoi_F1F2S(p);
	functioncall	$const46 2085 	%line{184} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	functioncall	$const47 2083 	%line{147} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const48 2083 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:125
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const25 2080 	%line{125} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:55
# 	xi = (int)floor(p[0]);
	compref		$tmp1065 $tmp649 $const2 	%line{55} %argrw{"wrr"}
	floor		$tmp1064 $tmp1065 	%argrw{"wr"}
	assign		___608_xi $tmp1064 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:56
# 	yi = (int)floor(p[1]);
	compref		$tmp1067 $tmp649 $const3 	%line{56} %argrw{"wrr"}
	floor		$tmp1066 $tmp1067 	%argrw{"wr"}
	assign		___608_yi $tmp1066 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	zi = (int)floor(p[2]);
	compref		$tmp1069 $tmp649 $const4 	%line{57} %argrw{"wrr"}
	floor		$tmp1068 $tmp1069 	%argrw{"wr"}
	assign		___608_zi $tmp1068 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	da[0] = 1e10;
	aassign		___620_da $const2 $const26 	%line{59} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:60
# 	da[1] = 1e10;
	aassign		___620_da $const3 $const26 	%line{60} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[2] = 1e10;
	aassign		___620_da $const4 $const26 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[3] = 1e10;
	aassign		___620_da $const27 $const26 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1071 1925 1927 2078 2080 	%line{64} %argrw{"r"}
	sub		___608_xx ___608_xi $const3 	%argrw{"wrr"}
	add		$tmp1070 ___608_xi $const3 	%argrw{"wrr"}
	le		$tmp1071 ___608_xx $tmp1070 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1073 1929 1931 2076 2078 	%line{65} %argrw{"r"}
	sub		___608_yy ___608_yi $const3 	%argrw{"wrr"}
	add		$tmp1072 ___608_yi $const3 	%argrw{"wrr"}
	le		$tmp1073 ___608_yy $tmp1072 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1075 1933 1935 2074 2076 	%line{66} %argrw{"r"}
	sub		___608_zz ___608_zi $const3 	%argrw{"wrr"}
	add		$tmp1074 ___608_zi $const3 	%argrw{"wrr"}
	le		$tmp1075 ___608_zz $tmp1074 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 				point ip = point(xx, yy, zz);
	assign		$tmp1076 ___608_xx 	%line{67} %argrw{"wr"}
	assign		$tmp1077 ___608_yy 	%argrw{"wr"}
	assign		$tmp1078 ___608_zz 	%argrw{"wr"}
	point		___614_ip $tmp1076 $tmp1077 $tmp1078 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const28 1952 	%line{68} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:43
# 	float r = cellnoise(p);
	cellnoise	___607_r ___614_ip 	%line{43} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:44
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1081 ___614_ip $const3 	%line{44} %argrw{"wrr"}
	compref		$tmp1082 ___614_ip $const2 	%argrw{"wrr"}
	compref		$tmp1083 ___614_ip $const4 	%argrw{"wrr"}
	point		$tmp1080 $tmp1081 $tmp1082 $tmp1083 	%argrw{"wrrr"}
	cellnoise	___607_g $tmp1080 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp1085 ___614_ip $const3 	%line{45} %argrw{"wrr"}
	compref		$tmp1086 ___614_ip $const4 	%argrw{"wrr"}
	compref		$tmp1087 ___614_ip $const2 	%argrw{"wrr"}
	point		$tmp1084 $tmp1085 $tmp1086 $tmp1087 	%argrw{"wrrr"}
	cellnoise	___607_b $tmp1084 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	return color(r, g, b);
	color		$tmp1079 ___607_r ___607_g ___607_b 	%line{47} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	assign		___614_vp $tmp1079 	%line{68} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point pd = p - (vp + ip);
	add		$tmp1088 ___614_vp ___614_ip 	%line{69} %argrw{"wrr"}
	sub		___614_pd $tmp649 $tmp1088 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const29 2025 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	if (distance_metric == "Distance Squared")
	eq		$tmp1089 $const24 $const24 	%line{21} %argrw{"wrr"}
	if		$tmp1089 1960 1960 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:22
# 		return dot(d, d);
	dot		___614_d ___614_pd ___614_pd 	%line{22} %argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Actual Distance")
	eq		$tmp1090 $const24 $const30 	%line{23} %argrw{"wrr"}
	if		$tmp1090 1964 1964 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		return length(d);
	length		___614_d ___614_pd 	%line{24} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Manhattan")
	eq		$tmp1091 $const24 $const31 	%line{25} %argrw{"wrr"}
	if		$tmp1091 1975 1975 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		return fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp1093 ___614_pd $const2 	%line{26} %argrw{"wrr"}
	fabs		$tmp1092 $tmp1093 	%argrw{"wr"}
	compref		$tmp1095 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1094 $tmp1095 	%argrw{"wr"}
	add		$tmp1096 $tmp1092 $tmp1094 	%argrw{"wrr"}
	compref		$tmp1098 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1097 $tmp1098 	%argrw{"wr"}
	add		___614_d $tmp1096 $tmp1097 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Chebychev")
	eq		$tmp1099 $const24 $const32 	%line{27} %argrw{"wrr"}
	if		$tmp1099 1986 1986 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		return max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp1101 ___614_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp1100 $tmp1101 	%argrw{"wr"}
	compref		$tmp1104 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1103 $tmp1104 	%argrw{"wr"}
	compref		$tmp1106 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1105 $tmp1106 	%argrw{"wr"}
	max		$tmp1102 $tmp1103 $tmp1105 	%argrw{"wrr"}
	max		___614_d $tmp1100 $tmp1102 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1107 $const24 $const33 	%line{29} %argrw{"wrr"}
	if		$tmp1107 2000 2000 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		return sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1110 ___614_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp1109 $tmp1110 	%argrw{"wr"}
	sqrt		$tmp1108 $tmp1109 	%argrw{"wr"}
	compref		$tmp1113 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1112 $tmp1113 	%argrw{"wr"}
	sqrt		$tmp1111 $tmp1112 	%argrw{"wr"}
	add		$tmp1114 $tmp1108 $tmp1111 	%argrw{"wrr"}
	compref		$tmp1117 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1116 $tmp1117 	%argrw{"wr"}
	sqrt		$tmp1115 $tmp1116 	%argrw{"wr"}
	add		___614_d $tmp1114 $tmp1115 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1118 $const24 $const34 	%line{31} %argrw{"wrr"}
	if		$tmp1118 2008 2008 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		return sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1121 ___614_pd ___614_pd 	%line{32} %argrw{"wrr"}
	mul		$tmp1122 ___614_pd ___614_pd 	%argrw{"wrr"}
	dot		$tmp1120 $tmp1121 $tmp1122 	%argrw{"wrr"}
	sqrt		$tmp1119 $tmp1120 	%argrw{"wr"}
	sqrt		___614_d $tmp1119 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1123 $const24 $const35 	%line{33} %argrw{"wrr"}
	if		$tmp1123 2024 2024 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		return pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1126 ___614_pd $const2 	%line{34} %argrw{"wrr"}
	fabs		$tmp1125 $tmp1126 	%argrw{"wr"}
	pow		$tmp1124 $tmp1125 $const5 	%argrw{"wrr"}
	compref		$tmp1129 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1128 $tmp1129 	%argrw{"wr"}
	pow		$tmp1127 $tmp1128 $const5 	%argrw{"wrr"}
	add		$tmp1130 $tmp1124 $tmp1127 	%argrw{"wrr"}
	compref		$tmp1133 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1132 $tmp1133 	%argrw{"wr"}
	pow		$tmp1131 $tmp1132 $const5 	%argrw{"wrr"}
	add		$tmp1134 $tmp1130 $tmp1131 	%argrw{"wrr"}
	div		$tmp1135 $const12 $const5 	%argrw{"wrr"}
	pow		___614_d $tmp1134 $tmp1135 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:36
# 	return 0.0;
	assign		___614_d $const5 	%line{36} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				vp += point(xx, yy, zz);
	assign		$tmp1137 ___608_xx 	%line{72} %argrw{"wr"}
	assign		$tmp1138 ___608_yy 	%argrw{"wr"}
	assign		$tmp1139 ___608_zz 	%argrw{"wr"}
	point		$tmp1136 $tmp1137 $tmp1138 $tmp1139 	%argrw{"wrrr"}
	add		___614_vp ___614_vp $tmp1136 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				if (d < da[0]) {
	aref		$tmp1140 ___620_da $const2 	%line{74} %argrw{"wrr"}
	lt		$tmp1141 ___614_d $tmp1140 	%argrw{"wrr"}
	if		$tmp1141 2047 2074 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:75
# 					da[3] = da[2];
	aref		$tmp1142 ___620_da $const4 	%line{75} %argrw{"wrr"}
	aassign		___620_da $const27 $tmp1142 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 					da[2] = da[1];
	aref		$tmp1143 ___620_da $const3 	%line{76} %argrw{"wrr"}
	aassign		___620_da $const4 $tmp1143 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[1] = da[0];
	aref		$tmp1144 ___620_da $const2 	%line{77} %argrw{"wrr"}
	aassign		___620_da $const3 $tmp1144 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[0] = d;
	aassign		___620_da $const2 ___614_d 	%line{78} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					pa[3] = pa[2];
	aref		$tmp1145 ___620_pa $const4 	%line{80} %argrw{"wrr"}
	aassign		___620_pa $const27 $tmp1145 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:81
# 					pa[2] = pa[1];
	aref		$tmp1146 ___620_pa $const3 	%line{81} %argrw{"wrr"}
	aassign		___620_pa $const4 $tmp1146 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[1] = pa[0];
	aref		$tmp1147 ___620_pa $const2 	%line{82} %argrw{"wrr"}
	aassign		___620_pa $const3 $tmp1147 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[0] = vp;
	aassign		___620_pa $const2 ___614_vp 	%line{83} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 				else if (d < da[1]) {
	aref		$tmp1148 ___620_da $const3 	%line{85} %argrw{"wrr"}
	lt		$tmp1149 ___614_d $tmp1148 	%argrw{"wrr"}
	if		$tmp1149 2060 2074 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:86
# 					da[3] = da[2];
	aref		$tmp1150 ___620_da $const4 	%line{86} %argrw{"wrr"}
	aassign		___620_da $const27 $tmp1150 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 					da[2] = da[1];
	aref		$tmp1151 ___620_da $const3 	%line{87} %argrw{"wrr"}
	aassign		___620_da $const4 $tmp1151 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[1] = d;
	aassign		___620_da $const3 ___614_d 	%line{88} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					pa[3] = pa[2];
	aref		$tmp1152 ___620_pa $const4 	%line{90} %argrw{"wrr"}
	aassign		___620_pa $const27 $tmp1152 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:91
# 					pa[2] = pa[1];
	aref		$tmp1153 ___620_pa $const3 	%line{91} %argrw{"wrr"}
	aassign		___620_pa $const4 $tmp1153 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[1] = vp;
	aassign		___620_pa $const3 ___614_vp 	%line{92} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 				else if (d < da[2]) {
	aref		$tmp1154 ___620_da $const4 	%line{94} %argrw{"wrr"}
	lt		$tmp1155 ___614_d $tmp1154 	%argrw{"wrr"}
	if		$tmp1155 2069 2074 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:95
# 					da[3] = da[2];
	aref		$tmp1156 ___620_da $const4 	%line{95} %argrw{"wrr"}
	aassign		___620_da $const27 $tmp1156 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 					da[2] = d;
	aassign		___620_da $const4 ___614_d 	%line{96} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					pa[3] = pa[2];
	aref		$tmp1157 ___620_pa $const4 	%line{98} %argrw{"wrr"}
	aassign		___620_pa $const27 $tmp1157 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:99
# 					pa[2] = vp;
	aassign		___620_pa $const4 ___614_vp 	%line{99} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 				else if (d < da[3]) {
	aref		$tmp1158 ___620_da $const27 	%line{101} %argrw{"wrr"}
	lt		$tmp1159 ___614_d $tmp1158 	%argrw{"wrr"}
	if		$tmp1159 2074 2074 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:102
# 					da[3] = d;
	aassign		___620_da $const27 ___614_d 	%line{102} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 					pa[3] = vp;
	aassign		___620_pa $const27 ___614_vp 	%line{103} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1160 ___608_zz 	%line{66} %argrw{"wr"}
	add		___608_zz ___608_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1161 ___608_yy 	%line{65} %argrw{"wr"}
	add		___608_yy ___608_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1162 ___608_xx 	%line{64} %argrw{"wr"}
	add		___608_xx ___608_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	return da[n2] - da[n1];
	aref		$tmp1163 ___620_da $const3 	%line{127} %argrw{"wrr"}
	aref		$tmp1164 ___620_da $const2 	%argrw{"wrr"}
	sub		$tmp1063 $tmp1163 $tmp1164 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:147
# float voronoi_F1F2S(point p) { return 2.0 * voronoi_F1F2(p) - 1.0; }
	mul		$tmp1165 $const21 $tmp1063 	%line{147} %argrw{"wrr"}
	sub		___643_t $tmp1165 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:184
# 		return voronoi_F1F2S(p);
	return	%line{184}
# intern/cycles/kernel/shaders/node_texture.h:185
# 	if (basis == "Voronoi Crackle")
	eq		$tmp1166 $const10 $const49 	%line{185} %argrw{"wrr"}
	if		$tmp1166 2275 2275 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:186
# 		return voronoi_CrS(p);
	functioncall	$const50 2274 	%line{186} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	functioncall	$const51 2272 	%line{148} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:139
# 	float t = 10.0 * voronoi_F1F2(p);
	functioncall	$const47 2266 	%line{139} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:134
# float voronoi_F1F2(point p) { return voronoi_FnFn(p, 0, 1); }
	functioncall	$const48 2266 	%line{134} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:125
# 	voronoi(p, "Distance Squared", 0, da, pa);
	functioncall	$const25 2263 	%line{125} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:55
# 	xi = (int)floor(p[0]);
	compref		$tmp1170 $tmp649 $const2 	%line{55} %argrw{"wrr"}
	floor		$tmp1169 $tmp1170 	%argrw{"wr"}
	assign		___608_xi $tmp1169 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:56
# 	yi = (int)floor(p[1]);
	compref		$tmp1172 $tmp649 $const3 	%line{56} %argrw{"wrr"}
	floor		$tmp1171 $tmp1172 	%argrw{"wr"}
	assign		___608_yi $tmp1171 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:57
# 	zi = (int)floor(p[2]);
	compref		$tmp1174 $tmp649 $const4 	%line{57} %argrw{"wrr"}
	floor		$tmp1173 $tmp1174 	%argrw{"wr"}
	assign		___608_zi $tmp1173 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:59
# 	da[0] = 1e10;
	aassign		___620_da $const2 $const26 	%line{59} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:60
# 	da[1] = 1e10;
	aassign		___620_da $const3 $const26 	%line{60} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:61
# 	da[2] = 1e10;
	aassign		___620_da $const4 $const26 	%line{61} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:62
# 	da[3] = 1e10;
	aassign		___620_da $const27 $const26 	%line{62} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	for		$tmp1176 2108 2110 2261 2263 	%line{64} %argrw{"r"}
	sub		___608_xx ___608_xi $const3 	%argrw{"wrr"}
	add		$tmp1175 ___608_xi $const3 	%argrw{"wrr"}
	le		$tmp1176 ___608_xx $tmp1175 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	for		$tmp1178 2112 2114 2259 2261 	%line{65} %argrw{"r"}
	sub		___608_yy ___608_yi $const3 	%argrw{"wrr"}
	add		$tmp1177 ___608_yi $const3 	%argrw{"wrr"}
	le		$tmp1178 ___608_yy $tmp1177 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	for		$tmp1180 2116 2118 2257 2259 	%line{66} %argrw{"r"}
	sub		___608_zz ___608_zi $const3 	%argrw{"wrr"}
	add		$tmp1179 ___608_zi $const3 	%argrw{"wrr"}
	le		$tmp1180 ___608_zz $tmp1179 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:67
# 				point ip = point(xx, yy, zz);
	assign		$tmp1181 ___608_xx 	%line{67} %argrw{"wr"}
	assign		$tmp1182 ___608_yy 	%argrw{"wr"}
	assign		$tmp1183 ___608_zz 	%argrw{"wr"}
	point		___614_ip $tmp1181 $tmp1182 $tmp1183 	%argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	functioncall	$const28 2135 	%line{68} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:43
# 	float r = cellnoise(p);
	cellnoise	___607_r ___614_ip 	%line{43} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:44
# 	float g = cellnoise(point(p[1], p[0], p[2]));
	compref		$tmp1186 ___614_ip $const3 	%line{44} %argrw{"wrr"}
	compref		$tmp1187 ___614_ip $const2 	%argrw{"wrr"}
	compref		$tmp1188 ___614_ip $const4 	%argrw{"wrr"}
	point		$tmp1185 $tmp1186 $tmp1187 $tmp1188 	%argrw{"wrrr"}
	cellnoise	___607_g $tmp1185 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:45
# 	float b = cellnoise(point(p[1], p[2], p[0]));
	compref		$tmp1190 ___614_ip $const3 	%line{45} %argrw{"wrr"}
	compref		$tmp1191 ___614_ip $const4 	%argrw{"wrr"}
	compref		$tmp1192 ___614_ip $const2 	%argrw{"wrr"}
	point		$tmp1189 $tmp1190 $tmp1191 $tmp1192 	%argrw{"wrrr"}
	cellnoise	___607_b $tmp1189 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:47
# 	return color(r, g, b);
	color		$tmp1184 ___607_r ___607_g ___607_b 	%line{47} %argrw{"wrrr"}
# intern/cycles/kernel/shaders/node_texture.h:68
# 				point vp = (point)cellnoise_color(ip);
	assign		___614_vp $tmp1184 	%line{68} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:69
# 				point pd = p - (vp + ip);
	add		$tmp1193 ___614_vp ___614_ip 	%line{69} %argrw{"wrr"}
	sub		___614_pd $tmp649 $tmp1193 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:70
# 				float d = voronoi_distance(distance_metric, pd, e);
	functioncall	$const29 2208 	%line{70} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:21
# 	if (distance_metric == "Distance Squared")
	eq		$tmp1194 $const24 $const24 	%line{21} %argrw{"wrr"}
	if		$tmp1194 2143 2143 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:22
# 		return dot(d, d);
	dot		___614_d ___614_pd ___614_pd 	%line{22} %argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:23
# 	if (distance_metric == "Actual Distance")
	eq		$tmp1195 $const24 $const30 	%line{23} %argrw{"wrr"}
	if		$tmp1195 2147 2147 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:24
# 		return length(d);
	length		___614_d ___614_pd 	%line{24} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:25
# 	if (distance_metric == "Manhattan")
	eq		$tmp1196 $const24 $const31 	%line{25} %argrw{"wrr"}
	if		$tmp1196 2158 2158 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:26
# 		return fabs(d[0]) + fabs(d[1]) + fabs(d[2]);
	compref		$tmp1198 ___614_pd $const2 	%line{26} %argrw{"wrr"}
	fabs		$tmp1197 $tmp1198 	%argrw{"wr"}
	compref		$tmp1200 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1199 $tmp1200 	%argrw{"wr"}
	add		$tmp1201 $tmp1197 $tmp1199 	%argrw{"wrr"}
	compref		$tmp1203 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1202 $tmp1203 	%argrw{"wr"}
	add		___614_d $tmp1201 $tmp1202 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:27
# 	if (distance_metric == "Chebychev")
	eq		$tmp1204 $const24 $const32 	%line{27} %argrw{"wrr"}
	if		$tmp1204 2169 2169 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:28
# 		return max(fabs(d[0]), max(fabs(d[1]), fabs(d[2])));
	compref		$tmp1206 ___614_pd $const2 	%line{28} %argrw{"wrr"}
	fabs		$tmp1205 $tmp1206 	%argrw{"wr"}
	compref		$tmp1209 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1208 $tmp1209 	%argrw{"wr"}
	compref		$tmp1211 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1210 $tmp1211 	%argrw{"wr"}
	max		$tmp1207 $tmp1208 $tmp1210 	%argrw{"wrr"}
	max		___614_d $tmp1205 $tmp1207 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:29
# 	if (distance_metric == "Minkovsky 1/2")
	eq		$tmp1212 $const24 $const33 	%line{29} %argrw{"wrr"}
	if		$tmp1212 2183 2183 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:30
# 		return sqrt(fabs(d[0])) + sqrt(fabs(d[1])) + sqrt(fabs(d[1]));
	compref		$tmp1215 ___614_pd $const2 	%line{30} %argrw{"wrr"}
	fabs		$tmp1214 $tmp1215 	%argrw{"wr"}
	sqrt		$tmp1213 $tmp1214 	%argrw{"wr"}
	compref		$tmp1218 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1217 $tmp1218 	%argrw{"wr"}
	sqrt		$tmp1216 $tmp1217 	%argrw{"wr"}
	add		$tmp1219 $tmp1213 $tmp1216 	%argrw{"wrr"}
	compref		$tmp1222 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1221 $tmp1222 	%argrw{"wr"}
	sqrt		$tmp1220 $tmp1221 	%argrw{"wr"}
	add		___614_d $tmp1219 $tmp1220 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:31
# 	if (distance_metric == "Minkovsky 4")
	eq		$tmp1223 $const24 $const34 	%line{31} %argrw{"wrr"}
	if		$tmp1223 2191 2191 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:32
# 		return sqrt(sqrt(dot(d * d, d * d)));
	mul		$tmp1226 ___614_pd ___614_pd 	%line{32} %argrw{"wrr"}
	mul		$tmp1227 ___614_pd ___614_pd 	%argrw{"wrr"}
	dot		$tmp1225 $tmp1226 $tmp1227 	%argrw{"wrr"}
	sqrt		$tmp1224 $tmp1225 	%argrw{"wr"}
	sqrt		___614_d $tmp1224 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:33
# 	if (distance_metric == "Minkovsky")
	eq		$tmp1228 $const24 $const35 	%line{33} %argrw{"wrr"}
	if		$tmp1228 2207 2207 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:34
# 		return pow(pow(fabs(d[0]), e) + pow(fabs(d[1]), e) + pow(fabs(d[2]), e), 1.0 / e);
	compref		$tmp1231 ___614_pd $const2 	%line{34} %argrw{"wrr"}
	fabs		$tmp1230 $tmp1231 	%argrw{"wr"}
	pow		$tmp1229 $tmp1230 $const5 	%argrw{"wrr"}
	compref		$tmp1234 ___614_pd $const3 	%argrw{"wrr"}
	fabs		$tmp1233 $tmp1234 	%argrw{"wr"}
	pow		$tmp1232 $tmp1233 $const5 	%argrw{"wrr"}
	add		$tmp1235 $tmp1229 $tmp1232 	%argrw{"wrr"}
	compref		$tmp1238 ___614_pd $const4 	%argrw{"wrr"}
	fabs		$tmp1237 $tmp1238 	%argrw{"wr"}
	pow		$tmp1236 $tmp1237 $const5 	%argrw{"wrr"}
	add		$tmp1239 $tmp1235 $tmp1236 	%argrw{"wrr"}
	div		$tmp1240 $const12 $const5 	%argrw{"wrr"}
	pow		___614_d $tmp1239 $tmp1240 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:36
# 	return 0.0;
	assign		___614_d $const5 	%line{36} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:72
# 				vp += point(xx, yy, zz);
	assign		$tmp1242 ___608_xx 	%line{72} %argrw{"wr"}
	assign		$tmp1243 ___608_yy 	%argrw{"wr"}
	assign		$tmp1244 ___608_zz 	%argrw{"wr"}
	point		$tmp1241 $tmp1242 $tmp1243 $tmp1244 	%argrw{"wrrr"}
	add		___614_vp ___614_vp $tmp1241 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:74
# 				if (d < da[0]) {
	aref		$tmp1245 ___620_da $const2 	%line{74} %argrw{"wrr"}
	lt		$tmp1246 ___614_d $tmp1245 	%argrw{"wrr"}
	if		$tmp1246 2230 2257 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:75
# 					da[3] = da[2];
	aref		$tmp1247 ___620_da $const4 	%line{75} %argrw{"wrr"}
	aassign		___620_da $const27 $tmp1247 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:76
# 					da[2] = da[1];
	aref		$tmp1248 ___620_da $const3 	%line{76} %argrw{"wrr"}
	aassign		___620_da $const4 $tmp1248 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:77
# 					da[1] = da[0];
	aref		$tmp1249 ___620_da $const2 	%line{77} %argrw{"wrr"}
	aassign		___620_da $const3 $tmp1249 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:78
# 					da[0] = d;
	aassign		___620_da $const2 ___614_d 	%line{78} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:80
# 					pa[3] = pa[2];
	aref		$tmp1250 ___620_pa $const4 	%line{80} %argrw{"wrr"}
	aassign		___620_pa $const27 $tmp1250 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:81
# 					pa[2] = pa[1];
	aref		$tmp1251 ___620_pa $const3 	%line{81} %argrw{"wrr"}
	aassign		___620_pa $const4 $tmp1251 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:82
# 					pa[1] = pa[0];
	aref		$tmp1252 ___620_pa $const2 	%line{82} %argrw{"wrr"}
	aassign		___620_pa $const3 $tmp1252 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:83
# 					pa[0] = vp;
	aassign		___620_pa $const2 ___614_vp 	%line{83} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:85
# 				else if (d < da[1]) {
	aref		$tmp1253 ___620_da $const3 	%line{85} %argrw{"wrr"}
	lt		$tmp1254 ___614_d $tmp1253 	%argrw{"wrr"}
	if		$tmp1254 2243 2257 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:86
# 					da[3] = da[2];
	aref		$tmp1255 ___620_da $const4 	%line{86} %argrw{"wrr"}
	aassign		___620_da $const27 $tmp1255 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:87
# 					da[2] = da[1];
	aref		$tmp1256 ___620_da $const3 	%line{87} %argrw{"wrr"}
	aassign		___620_da $const4 $tmp1256 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:88
# 					da[1] = d;
	aassign		___620_da $const3 ___614_d 	%line{88} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:90
# 					pa[3] = pa[2];
	aref		$tmp1257 ___620_pa $const4 	%line{90} %argrw{"wrr"}
	aassign		___620_pa $const27 $tmp1257 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:91
# 					pa[2] = pa[1];
	aref		$tmp1258 ___620_pa $const3 	%line{91} %argrw{"wrr"}
	aassign		___620_pa $const4 $tmp1258 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:92
# 					pa[1] = vp;
	aassign		___620_pa $const3 ___614_vp 	%line{92} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:94
# 				else if (d < da[2]) {
	aref		$tmp1259 ___620_da $const4 	%line{94} %argrw{"wrr"}
	lt		$tmp1260 ___614_d $tmp1259 	%argrw{"wrr"}
	if		$tmp1260 2252 2257 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:95
# 					da[3] = da[2];
	aref		$tmp1261 ___620_da $const4 	%line{95} %argrw{"wrr"}
	aassign		___620_da $const27 $tmp1261 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:96
# 					da[2] = d;
	aassign		___620_da $const4 ___614_d 	%line{96} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:98
# 					pa[3] = pa[2];
	aref		$tmp1262 ___620_pa $const4 	%line{98} %argrw{"wrr"}
	aassign		___620_pa $const27 $tmp1262 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:99
# 					pa[2] = vp;
	aassign		___620_pa $const4 ___614_vp 	%line{99} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:101
# 				else if (d < da[3]) {
	aref		$tmp1263 ___620_da $const27 	%line{101} %argrw{"wrr"}
	lt		$tmp1264 ___614_d $tmp1263 	%argrw{"wrr"}
	if		$tmp1264 2257 2257 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:102
# 					da[3] = d;
	aassign		___620_da $const27 ___614_d 	%line{102} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:103
# 					pa[3] = vp;
	aassign		___620_pa $const27 ___614_vp 	%line{103} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:66
# 			for (zz = zi - 1; zz <= zi + 1; zz++) {
	assign		$tmp1265 ___608_zz 	%line{66} %argrw{"wr"}
	add		___608_zz ___608_zz $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:65
# 		for (yy = yi - 1; yy <= yi + 1; yy++) {
	assign		$tmp1266 ___608_yy 	%line{65} %argrw{"wr"}
	add		___608_yy ___608_yy $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:64
# 	for (xx = xi - 1; xx <= xi + 1; xx++) {
	assign		$tmp1267 ___608_xx 	%line{64} %argrw{"wr"}
	add		___608_xx ___608_xx $const3 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:127
# 	return da[n2] - da[n1];
	aref		$tmp1268 ___620_da $const3 	%line{127} %argrw{"wrr"}
	aref		$tmp1269 ___620_da $const2 	%argrw{"wrr"}
	sub		$tmp1168 $tmp1268 $tmp1269 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:139
# 	float t = 10.0 * voronoi_F1F2(p);
	mul		___626_t $const7 $tmp1168 	%line{139} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:140
# 	return (t > 1.0) ? 1.0 : t;
	gt		$tmp1270 ___626_t $const12 	%line{140} %argrw{"wrr"}
	if		$tmp1270 2270 2271 	%argrw{"r"}
	assign		$tmp1167 $const12 	%argrw{"wr"}
	assign		$tmp1167 ___626_t 	%argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:148
# float voronoi_CrS(point p) { return 2.0 * voronoi_Cr(p) - 1.0; }
	mul		$tmp1271 $const21 $tmp1167 	%line{148} %argrw{"wrr"}
	sub		___643_t $tmp1271 $const12 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:186
# 		return voronoi_CrS(p);
	return	%line{186}
# intern/cycles/kernel/shaders/node_texture.h:187
# 	if (basis == "Cell Noise")
	eq		$tmp1272 $const10 $const52 	%line{187} %argrw{"wrr"}
	if		$tmp1272 2279 2279 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:188
# 		return cellnoise(p);
	cellnoise	___643_t $tmp649 	%line{188} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:190
# 	return 0.0;
	assign		___643_t $const5 	%line{190} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:254
# 		if (hard)
	if		$const2 2284 2284 	%line{254} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:255
# 			t = fabs(2.0 * t - 1.0);
	mul		$tmp1273 $const21 ___643_t 	%line{255} %argrw{"wrr"}
	sub		$tmp1274 $tmp1273 $const12 	%argrw{"wrr"}
	fabs		___643_t $tmp1274 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:257
# 		float sum2 = sum + t * amp;
	mul		$tmp1275 ___643_t ___640_amp 	%line{257} %argrw{"wrr"}
	add		___643_sum2 ___640_sum $tmp1275 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:259
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp1276 $const3 ___640_n 	%line{259} %argrw{"wrr"}
	assign		$tmp1277 $tmp1276 	%argrw{"wr"}
	add		$tmp1278 ___640_n $const3 	%argrw{"wrr"}
	shl		$tmp1279 $const3 $tmp1278 	%argrw{"wrr"}
	sub		$tmp1280 $tmp1279 $const3 	%argrw{"wrr"}
	assign		$tmp1281 $tmp1280 	%argrw{"wr"}
	div		$tmp1282 $tmp1277 $tmp1281 	%argrw{"wrr"}
	mul		___640_sum ___640_sum $tmp1282 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:260
# 		sum2 *= ((float)(1 << (n + 1)) / (float)((1 << (n + 2)) - 1));
	add		$tmp1283 ___640_n $const3 	%line{260} %argrw{"wrr"}
	shl		$tmp1284 $const3 $tmp1283 	%argrw{"wrr"}
	assign		$tmp1285 $tmp1284 	%argrw{"wr"}
	add		$tmp1286 ___640_n $const4 	%argrw{"wrr"}
	shl		$tmp1287 $const3 $tmp1286 	%argrw{"wrr"}
	sub		$tmp1288 $tmp1287 $const3 	%argrw{"wrr"}
	assign		$tmp1289 $tmp1288 	%argrw{"wr"}
	div		$tmp1290 $tmp1285 $tmp1289 	%argrw{"wrr"}
	mul		___643_sum2 ___643_sum2 $tmp1290 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:262
# 		return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp1291 $const12 ___640_rmd 	%line{262} %argrw{"wrr"}
	mul		$tmp1292 $tmp1291 ___640_sum 	%argrw{"wrr"}
	mul		$tmp1293 ___640_rmd ___643_sum2 	%argrw{"wrr"}
	add		$tmp15 $tmp1292 $tmp1293 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:265
# 		sum *= ((float)(1 << n) / (float)((1 << (n + 1)) - 1));
	shl		$tmp1294 $const3 ___640_n 	%line{265} %argrw{"wrr"}
	assign		$tmp1295 $tmp1294 	%argrw{"wr"}
	add		$tmp1296 ___640_n $const3 	%argrw{"wrr"}
	shl		$tmp1297 $const3 $tmp1296 	%argrw{"wrr"}
	sub		$tmp1298 $tmp1297 $const3 	%argrw{"wrr"}
	assign		$tmp1299 $tmp1298 	%argrw{"wr"}
	div		$tmp1300 $tmp1295 $tmp1299 	%argrw{"wrr"}
	mul		___640_sum ___640_sum $tmp1300 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:266
# 		return sum;
	assign		$tmp15 ___640_sum 	%line{266} %argrw{"wr"}
	return
# intern/cycles/kernel/shaders/node_wave_texture.osl:40
# 		n = n + (distortion * noise_turbulence(p * dscale, "Perlin", detail, 0));
	mul		$tmp1301 Distortion $tmp15 	%filename{"intern/cycles/kernel/shaders/node_wave_texture.osl"} %line{40} %argrw{"wrr"}
	add		___646_n ___646_n $tmp1301 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:42
# 	return noise_wave("Sine", n);
	functioncall	$const54 2356 	%line{42} %argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:205
# 
	eq		$tmp1302 $const53 $const53 	%filename{"intern/cycles/kernel/shaders/node_texture.h"} %line{205} %argrw{"wrr"}
	if		$tmp1302 2327 2327 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:206
# 	/* can happen for big coordinates, things even out to 0.5 then anyway */
	sin		$tmp1303 ___646_n 	%line{206} %argrw{"wr"}
	mul		$tmp1304 $const18 $tmp1303 	%argrw{"wrr"}
	add		Fac $const18 $tmp1304 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:208
# 		return 0.5;
	eq		$tmp1305 $const53 $const55 	%line{208} %argrw{"wrr"}
	if		$tmp1305 2340 2340 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:209
# 	
	mul		___638_b $const21 $const56 	%line{209} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:210
# 	return f;
	div		$tmp1306 ___646_n ___638_b 	%line{210} %argrw{"wrr"}
	assign		___638_n $tmp1306 	%argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:211
# }
	assign		$tmp1308 ___638_n 	%line{211} %argrw{"wr"}
	mul		$tmp1307 $tmp1308 ___638_b 	%argrw{"wrr"}
	sub		___646_n ___646_n $tmp1307 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:212
# 
	lt		$tmp1309 ___646_n $const2 	%line{212} %argrw{"wrr"}
	if		$tmp1309 2338 2338 	%argrw{"r"}
	add		___646_n ___646_n ___638_b 	%argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:214
# {
	div		Fac ___646_n ___638_b 	%line{214} %argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:216
# 		return safe_noise(p, 1);
	eq		$tmp1310 $const53 $const57 	%line{216} %argrw{"wrr"}
	if		$tmp1310 2355 2355 	%argrw{"r"}
# intern/cycles/kernel/shaders/node_texture.h:217
# 	if (basis == "Voronoi F1")
	mul		___639_b $const21 $const56 	%line{217} %argrw{"wrr"}
# intern/cycles/kernel/shaders/node_texture.h:218
# 		return voronoi_F1S(p);
	assign		___639_rmax $const12 	%line{218} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_texture.h:220
# 		return voronoi_F2S(p);
	div		$tmp1313 $const12 ___639_b 	%line{220} %argrw{"wrr"}
	mul		$tmp1314 ___646_n $tmp1313 	%argrw{"wrr"}
	add		$tmp1315 $tmp1314 $const18 	%argrw{"wrr"}
	floor		$tmp1312 $tmp1315 	%argrw{"wr"}
	div		$tmp1316 $const12 ___639_b 	%argrw{"wrr"}
	mul		$tmp1317 ___646_n $tmp1316 	%argrw{"wrr"}
	sub		$tmp1318 $tmp1312 $tmp1317 	%argrw{"wrr"}
	fabs		$tmp1311 $tmp1318 	%argrw{"wr"}
	mul		$tmp1319 $const21 $tmp1311 	%argrw{"wrr"}
	sub		Fac ___639_rmax $tmp1319 	%argrw{"wrr"}
	return
# intern/cycles/kernel/shaders/node_texture.h:223
# 	if (basis == "Voronoi F4")
	assign		Fac $const5 	%line{223} %argrw{"wr"}
# intern/cycles/kernel/shaders/node_wave_texture.osl:63
# 	Color = Fac;
	assign		Color Fac 	%filename{"intern/cycles/kernel/shaders/node_wave_texture.osl"} %line{63} %argrw{"wr"}
	end
